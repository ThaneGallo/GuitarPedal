
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a50  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08005c20  08005c20  00006c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e2c  08005e2c  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005e2c  08005e2c  00006e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e34  08005e34  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e34  08005e34  00006e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e38  08005e38  00006e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005e3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c464  2000005c  08005e98  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c4c0  08005e98  000074c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011e5f  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d0e  00000000  00000000  00018eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  0001bc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca9  00000000  00000000  0001cc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d64  00000000  00000000  0001d8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015577  00000000  00000000  0004265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e0093  00000000  00000000  00057bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137c67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ae4  00000000  00000000  00137cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0013c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c08 	.word	0x08005c08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08005c08 	.word	0x08005c08

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_uldivmod>:
 8000b3c:	b953      	cbnz	r3, 8000b54 <__aeabi_uldivmod+0x18>
 8000b3e:	b94a      	cbnz	r2, 8000b54 <__aeabi_uldivmod+0x18>
 8000b40:	2900      	cmp	r1, #0
 8000b42:	bf08      	it	eq
 8000b44:	2800      	cmpeq	r0, #0
 8000b46:	bf1c      	itt	ne
 8000b48:	f04f 31ff 	movne.w	r1, #4294967295
 8000b4c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b50:	f000 b96a 	b.w	8000e28 <__aeabi_idiv0>
 8000b54:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b5c:	f000 f806 	bl	8000b6c <__udivmoddi4>
 8000b60:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b68:	b004      	add	sp, #16
 8000b6a:	4770      	bx	lr

08000b6c <__udivmoddi4>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	9d08      	ldr	r5, [sp, #32]
 8000b72:	460c      	mov	r4, r1
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d14e      	bne.n	8000c16 <__udivmoddi4+0xaa>
 8000b78:	4694      	mov	ip, r2
 8000b7a:	458c      	cmp	ip, r1
 8000b7c:	4686      	mov	lr, r0
 8000b7e:	fab2 f282 	clz	r2, r2
 8000b82:	d962      	bls.n	8000c4a <__udivmoddi4+0xde>
 8000b84:	b14a      	cbz	r2, 8000b9a <__udivmoddi4+0x2e>
 8000b86:	f1c2 0320 	rsb	r3, r2, #32
 8000b8a:	4091      	lsls	r1, r2
 8000b8c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b90:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b94:	4319      	orrs	r1, r3
 8000b96:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9e:	fa1f f68c 	uxth.w	r6, ip
 8000ba2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ba6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000baa:	fb07 1114 	mls	r1, r7, r4, r1
 8000bae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb2:	fb04 f106 	mul.w	r1, r4, r6
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	d90a      	bls.n	8000bd0 <__udivmoddi4+0x64>
 8000bba:	eb1c 0303 	adds.w	r3, ip, r3
 8000bbe:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bc2:	f080 8112 	bcs.w	8000dea <__udivmoddi4+0x27e>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 810f 	bls.w	8000dea <__udivmoddi4+0x27e>
 8000bcc:	3c02      	subs	r4, #2
 8000bce:	4463      	add	r3, ip
 8000bd0:	1a59      	subs	r1, r3, r1
 8000bd2:	fa1f f38e 	uxth.w	r3, lr
 8000bd6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bda:	fb07 1110 	mls	r1, r7, r0, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb00 f606 	mul.w	r6, r0, r6
 8000be6:	429e      	cmp	r6, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x94>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bf2:	f080 80fc 	bcs.w	8000dee <__udivmoddi4+0x282>
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	f240 80f9 	bls.w	8000dee <__udivmoddi4+0x282>
 8000bfc:	4463      	add	r3, ip
 8000bfe:	3802      	subs	r0, #2
 8000c00:	1b9b      	subs	r3, r3, r6
 8000c02:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c06:	2100      	movs	r1, #0
 8000c08:	b11d      	cbz	r5, 8000c12 <__udivmoddi4+0xa6>
 8000c0a:	40d3      	lsrs	r3, r2
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d905      	bls.n	8000c26 <__udivmoddi4+0xba>
 8000c1a:	b10d      	cbz	r5, 8000c20 <__udivmoddi4+0xb4>
 8000c1c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c20:	2100      	movs	r1, #0
 8000c22:	4608      	mov	r0, r1
 8000c24:	e7f5      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c26:	fab3 f183 	clz	r1, r3
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d146      	bne.n	8000cbc <__udivmoddi4+0x150>
 8000c2e:	42a3      	cmp	r3, r4
 8000c30:	d302      	bcc.n	8000c38 <__udivmoddi4+0xcc>
 8000c32:	4290      	cmp	r0, r2
 8000c34:	f0c0 80f0 	bcc.w	8000e18 <__udivmoddi4+0x2ac>
 8000c38:	1a86      	subs	r6, r0, r2
 8000c3a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c3e:	2001      	movs	r0, #1
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	d0e6      	beq.n	8000c12 <__udivmoddi4+0xa6>
 8000c44:	e9c5 6300 	strd	r6, r3, [r5]
 8000c48:	e7e3      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000c4a:	2a00      	cmp	r2, #0
 8000c4c:	f040 8090 	bne.w	8000d70 <__udivmoddi4+0x204>
 8000c50:	eba1 040c 	sub.w	r4, r1, ip
 8000c54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c58:	fa1f f78c 	uxth.w	r7, ip
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c66:	fb08 4416 	mls	r4, r8, r6, r4
 8000c6a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c6e:	fb07 f006 	mul.w	r0, r7, r6
 8000c72:	4298      	cmp	r0, r3
 8000c74:	d908      	bls.n	8000c88 <__udivmoddi4+0x11c>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c7e:	d202      	bcs.n	8000c86 <__udivmoddi4+0x11a>
 8000c80:	4298      	cmp	r0, r3
 8000c82:	f200 80cd 	bhi.w	8000e20 <__udivmoddi4+0x2b4>
 8000c86:	4626      	mov	r6, r4
 8000c88:	1a1c      	subs	r4, r3, r0
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c92:	fb08 4410 	mls	r4, r8, r0, r4
 8000c96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9a:	fb00 f707 	mul.w	r7, r0, r7
 8000c9e:	429f      	cmp	r7, r3
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x148>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x146>
 8000cac:	429f      	cmp	r7, r3
 8000cae:	f200 80b0 	bhi.w	8000e12 <__udivmoddi4+0x2a6>
 8000cb2:	4620      	mov	r0, r4
 8000cb4:	1bdb      	subs	r3, r3, r7
 8000cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cba:	e7a5      	b.n	8000c08 <__udivmoddi4+0x9c>
 8000cbc:	f1c1 0620 	rsb	r6, r1, #32
 8000cc0:	408b      	lsls	r3, r1
 8000cc2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ccc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cd0:	ea43 030c 	orr.w	r3, r3, ip
 8000cd4:	40f4      	lsrs	r4, r6
 8000cd6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cda:	0c38      	lsrs	r0, r7, #16
 8000cdc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ce0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ce4:	fa1f fc87 	uxth.w	ip, r7
 8000ce8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cec:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cf0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cf4:	45a1      	cmp	r9, r4
 8000cf6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cfa:	d90a      	bls.n	8000d12 <__udivmoddi4+0x1a6>
 8000cfc:	193c      	adds	r4, r7, r4
 8000cfe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d02:	f080 8084 	bcs.w	8000e0e <__udivmoddi4+0x2a2>
 8000d06:	45a1      	cmp	r9, r4
 8000d08:	f240 8081 	bls.w	8000e0e <__udivmoddi4+0x2a2>
 8000d0c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d10:	443c      	add	r4, r7
 8000d12:	eba4 0409 	sub.w	r4, r4, r9
 8000d16:	fa1f f983 	uxth.w	r9, r3
 8000d1a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d1e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d22:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d26:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	d907      	bls.n	8000d3e <__udivmoddi4+0x1d2>
 8000d2e:	193c      	adds	r4, r7, r4
 8000d30:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d34:	d267      	bcs.n	8000e06 <__udivmoddi4+0x29a>
 8000d36:	45a4      	cmp	ip, r4
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0x29a>
 8000d3a:	3b02      	subs	r3, #2
 8000d3c:	443c      	add	r4, r7
 8000d3e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d42:	fba0 9302 	umull	r9, r3, r0, r2
 8000d46:	eba4 040c 	sub.w	r4, r4, ip
 8000d4a:	429c      	cmp	r4, r3
 8000d4c:	46ce      	mov	lr, r9
 8000d4e:	469c      	mov	ip, r3
 8000d50:	d351      	bcc.n	8000df6 <__udivmoddi4+0x28a>
 8000d52:	d04e      	beq.n	8000df2 <__udivmoddi4+0x286>
 8000d54:	b155      	cbz	r5, 8000d6c <__udivmoddi4+0x200>
 8000d56:	ebb8 030e 	subs.w	r3, r8, lr
 8000d5a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d5e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d62:	40cb      	lsrs	r3, r1
 8000d64:	431e      	orrs	r6, r3
 8000d66:	40cc      	lsrs	r4, r1
 8000d68:	e9c5 6400 	strd	r6, r4, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e750      	b.n	8000c12 <__udivmoddi4+0xa6>
 8000d70:	f1c2 0320 	rsb	r3, r2, #32
 8000d74:	fa20 f103 	lsr.w	r1, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d80:	4094      	lsls	r4, r2
 8000d82:	430c      	orrs	r4, r1
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d8c:	fa1f f78c 	uxth.w	r7, ip
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3110 	mls	r1, r8, r0, r3
 8000d98:	0c23      	lsrs	r3, r4, #16
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f107 	mul.w	r1, r0, r7
 8000da2:	4299      	cmp	r1, r3
 8000da4:	d908      	bls.n	8000db8 <__udivmoddi4+0x24c>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dae:	d22c      	bcs.n	8000e0a <__udivmoddi4+0x29e>
 8000db0:	4299      	cmp	r1, r3
 8000db2:	d92a      	bls.n	8000e0a <__udivmoddi4+0x29e>
 8000db4:	3802      	subs	r0, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dc0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb01 f307 	mul.w	r3, r1, r7
 8000dcc:	42a3      	cmp	r3, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x276>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dd8:	d213      	bcs.n	8000e02 <__udivmoddi4+0x296>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d911      	bls.n	8000e02 <__udivmoddi4+0x296>
 8000dde:	3902      	subs	r1, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	1ae4      	subs	r4, r4, r3
 8000de4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000de8:	e739      	b.n	8000c5e <__udivmoddi4+0xf2>
 8000dea:	4604      	mov	r4, r0
 8000dec:	e6f0      	b.n	8000bd0 <__udivmoddi4+0x64>
 8000dee:	4608      	mov	r0, r1
 8000df0:	e706      	b.n	8000c00 <__udivmoddi4+0x94>
 8000df2:	45c8      	cmp	r8, r9
 8000df4:	d2ae      	bcs.n	8000d54 <__udivmoddi4+0x1e8>
 8000df6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dfa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dfe:	3801      	subs	r0, #1
 8000e00:	e7a8      	b.n	8000d54 <__udivmoddi4+0x1e8>
 8000e02:	4631      	mov	r1, r6
 8000e04:	e7ed      	b.n	8000de2 <__udivmoddi4+0x276>
 8000e06:	4603      	mov	r3, r0
 8000e08:	e799      	b.n	8000d3e <__udivmoddi4+0x1d2>
 8000e0a:	4630      	mov	r0, r6
 8000e0c:	e7d4      	b.n	8000db8 <__udivmoddi4+0x24c>
 8000e0e:	46d6      	mov	lr, sl
 8000e10:	e77f      	b.n	8000d12 <__udivmoddi4+0x1a6>
 8000e12:	4463      	add	r3, ip
 8000e14:	3802      	subs	r0, #2
 8000e16:	e74d      	b.n	8000cb4 <__udivmoddi4+0x148>
 8000e18:	4606      	mov	r6, r0
 8000e1a:	4623      	mov	r3, r4
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	e70f      	b.n	8000c40 <__udivmoddi4+0xd4>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	e730      	b.n	8000c88 <__udivmoddi4+0x11c>
 8000e26:	bf00      	nop

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	0000      	movs	r0, r0
	...

08000e30 <normalize_adc>:

extern uint8_t process_first_half;
extern uint8_t process_second_half;


	void normalize_adc(float* out_data, uint16_t* in_data, uint16_t size){
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	80fb      	strh	r3, [r7, #6]
		uint16_t i;

		    float x_prev = 0.0f;
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
		    float y_prev = 0.0f;
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]

		    for (uint16_t i = 0; i < size; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	83fb      	strh	r3, [r7, #30]
 8000e4e:	e041      	b.n	8000ed4 <normalize_adc+0xa4>
		        // Convert from uint16_t to float centered around 0
		        float x = ((float)in_data[i] - 2048.0f) / 2048.0f;
 8000e50:	8bfb      	ldrh	r3, [r7, #30]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	68ba      	ldr	r2, [r7, #8]
 8000e56:	4413      	add	r3, r2
 8000e58:	881b      	ldrh	r3, [r3, #0]
 8000e5a:	ee07 3a90 	vmov	s15, r3
 8000e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e62:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8000ef0 <normalize_adc+0xc0>
 8000e66:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000e6a:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8000ef0 <normalize_adc+0xc0>
 8000e6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e72:	edc7 7a06 	vstr	s15, [r7, #24]

		        // Apply DC blocker IIR filter
		        float y = x - x_prev + 0.995 * y_prev;
 8000e76:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e7a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e82:	ee17 0a90 	vmov	r0, s15
 8000e86:	f7ff fb7f 	bl	8000588 <__aeabi_f2d>
 8000e8a:	4604      	mov	r4, r0
 8000e8c:	460d      	mov	r5, r1
 8000e8e:	6a38      	ldr	r0, [r7, #32]
 8000e90:	f7ff fb7a 	bl	8000588 <__aeabi_f2d>
 8000e94:	a314      	add	r3, pc, #80	@ (adr r3, 8000ee8 <normalize_adc+0xb8>)
 8000e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9a:	f7ff fbcd 	bl	8000638 <__aeabi_dmul>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	4629      	mov	r1, r5
 8000ea6:	f7ff fa11 	bl	80002cc <__adddf3>
 8000eaa:	4602      	mov	r2, r0
 8000eac:	460b      	mov	r3, r1
 8000eae:	4610      	mov	r0, r2
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f7ff fdf3 	bl	8000a9c <__aeabi_d2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	617b      	str	r3, [r7, #20]

		        x_prev = x;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	627b      	str	r3, [r7, #36]	@ 0x24
		        y_prev = y;
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	623b      	str	r3, [r7, #32]

		        out_data[i] = y;
 8000ec2:	8bfb      	ldrh	r3, [r7, #30]
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	4413      	add	r3, r2
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	601a      	str	r2, [r3, #0]
		    for (uint16_t i = 0; i < size; i++) {
 8000ece:	8bfb      	ldrh	r3, [r7, #30]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	83fb      	strh	r3, [r7, #30]
 8000ed4:	8bfa      	ldrh	r2, [r7, #30]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d3b9      	bcc.n	8000e50 <normalize_adc+0x20>
		    }

	}
 8000edc:	bf00      	nop
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	@ 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	3d70a3d7 	.word	0x3d70a3d7
 8000eec:	3fefd70a 	.word	0x3fefd70a
 8000ef0:	45000000 	.word	0x45000000

08000ef4 <HAL_ADC_ConvHalfCpltCallback>:


	}

	// Called when the **first half** of the DMA buffer is filled
	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d102      	bne.n	8000f0c <HAL_ADC_ConvHalfCpltCallback+0x18>
	        process_first_half = 1;
 8000f06:	4b05      	ldr	r3, [pc, #20]	@ (8000f1c <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
	    }
	}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	40012000 	.word	0x40012000
 8000f1c:	2000c078 	.word	0x2000c078

08000f20 <HAL_ADC_ConvCpltCallback>:

	// Called when the **second half** is filled (full transfer complete)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <HAL_ADC_ConvCpltCallback+0x24>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d102      	bne.n	8000f38 <HAL_ADC_ConvCpltCallback+0x18>
	        // Process the second half of the buffer
	    	process_second_half = 1;
 8000f32:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_ADC_ConvCpltCallback+0x28>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
	    }
	}
 8000f38:	bf00      	nop
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40012000 	.word	0x40012000
 8000f48:	2000c079 	.word	0x2000c079

08000f4c <prepare_for_dac>:

 #include "WM8524.h"
 #include "main.h"
 

void prepare_for_dac(uint16_t* out_data, float* in_data, uint16_t size){
 8000f4c:	b480      	push	{r7}
 8000f4e:	b087      	sub	sp, #28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	60f8      	str	r0, [r7, #12]
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	4613      	mov	r3, r2
 8000f58:	80fb      	strh	r3, [r7, #6]
	uint16_t i;


	for(i = 0; i < size; i++){
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	82fb      	strh	r3, [r7, #22]
 8000f5e:	e01a      	b.n	8000f96 <prepare_for_dac+0x4a>

			//shifts from -1 --> 1 to -2048 --> 2048
			// then shifts up 2048 to dac range of 0-4096
			out_data[i] =  (uint16_t)((in_data[i] * 2047.5f) + 2047.5f);
 8000f60:	8afb      	ldrh	r3, [r7, #22]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	68ba      	ldr	r2, [r7, #8]
 8000f66:	4413      	add	r3, r2
 8000f68:	edd3 7a00 	vldr	s15, [r3]
 8000f6c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000fac <prepare_for_dac+0x60>
 8000f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f74:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000fac <prepare_for_dac+0x60>
 8000f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f7c:	8afb      	ldrh	r3, [r7, #22]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	68fa      	ldr	r2, [r7, #12]
 8000f82:	4413      	add	r3, r2
 8000f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f88:	ee17 2a90 	vmov	r2, s15
 8000f8c:	b292      	uxth	r2, r2
 8000f8e:	801a      	strh	r2, [r3, #0]
	for(i = 0; i < size; i++){
 8000f90:	8afb      	ldrh	r3, [r7, #22]
 8000f92:	3301      	adds	r3, #1
 8000f94:	82fb      	strh	r3, [r7, #22]
 8000f96:	8afa      	ldrh	r2, [r7, #22]
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d3e0      	bcc.n	8000f60 <prepare_for_dac+0x14>

		}



}
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	44fff000 	.word	0x44fff000

08000fb0 <combine_buffers>:
#include "dsp.h"


void combine_buffers(float* out_buf, float* in_buf, float attenuation, uint16_t size){
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	ed87 0a01 	vstr	s0, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	807b      	strh	r3, [r7, #2]

    uint16_t i;
    float max_value = 0; // for normalizing
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	613b      	str	r3, [r7, #16]

    //check for null
    if (!out_buf) {
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d103      	bne.n	8000fd6 <combine_buffers+0x26>
         myprintf("combine_buffers ERROR: out_buf is NULL\n");
 8000fce:	4844      	ldr	r0, [pc, #272]	@ (80010e0 <combine_buffers+0x130>)
 8000fd0:	f000 f986 	bl	80012e0 <myprintf>
         return;
 8000fd4:	e081      	b.n	80010da <combine_buffers+0x12a>
     }

     if (!in_buf) {
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d103      	bne.n	8000fe4 <combine_buffers+0x34>
         myprintf("combine_buffers ERROR: in_buf is NULL\n");
 8000fdc:	4841      	ldr	r0, [pc, #260]	@ (80010e4 <combine_buffers+0x134>)
 8000fde:	f000 f97f 	bl	80012e0 <myprintf>
         return;
 8000fe2:	e07a      	b.n	80010da <combine_buffers+0x12a>
     }

     if (size == 0) {
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d103      	bne.n	8000ff2 <combine_buffers+0x42>
         myprintf("combine_buffers WARNING: size is 0\n");
 8000fea:	483f      	ldr	r0, [pc, #252]	@ (80010e8 <combine_buffers+0x138>)
 8000fec:	f000 f978 	bl	80012e0 <myprintf>
         return;
 8000ff0:	e073      	b.n	80010da <combine_buffers+0x12a>
     }

    //combines buffers and searches for max to renormalize later
    for(i = 0; i < size; i++){
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	82fb      	strh	r3, [r7, #22]
 8000ff6:	e052      	b.n	800109e <combine_buffers+0xee>

    	myprintf("combine_buffers(): size=%d\n", size);
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	483b      	ldr	r0, [pc, #236]	@ (80010ec <combine_buffers+0x13c>)
 8000ffe:	f000 f96f 	bl	80012e0 <myprintf>
    	myprintf("out_buf=%p, in_buf=%p\n", out_buf, in_buf);
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	68f9      	ldr	r1, [r7, #12]
 8001006:	483a      	ldr	r0, [pc, #232]	@ (80010f0 <combine_buffers+0x140>)
 8001008:	f000 f96a 	bl	80012e0 <myprintf>
    	myprintf("out_buf=%d, in_buf=%d\n", out_buf[i], in_buf[i]);
 800100c:	8afb      	ldrh	r3, [r7, #22]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	68fa      	ldr	r2, [r7, #12]
 8001012:	4413      	add	r3, r2
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fab6 	bl	8000588 <__aeabi_f2d>
 800101c:	4604      	mov	r4, r0
 800101e:	460d      	mov	r5, r1
 8001020:	8afb      	ldrh	r3, [r7, #22]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff faac 	bl	8000588 <__aeabi_f2d>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	ec43 2b11 	vmov	d1, r2, r3
 8001038:	ec45 4b10 	vmov	d0, r4, r5
 800103c:	482d      	ldr	r0, [pc, #180]	@ (80010f4 <combine_buffers+0x144>)
 800103e:	f000 f94f 	bl	80012e0 <myprintf>

        out_buf[i] =  attenuation * in_buf[i] + out_buf[i];
 8001042:	8afb      	ldrh	r3, [r7, #22]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001052:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001056:	8afb      	ldrh	r3, [r7, #22]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	edd3 7a00 	vldr	s15, [r3]
 8001062:	8afb      	ldrh	r3, [r7, #22]
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	4413      	add	r3, r2
 800106a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106e:	edc3 7a00 	vstr	s15, [r3]


        if(out_buf[i] > max_value){
 8001072:	8afb      	ldrh	r3, [r7, #22]
 8001074:	009b      	lsls	r3, r3, #2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	4413      	add	r3, r2
 800107a:	edd3 7a00 	vldr	s15, [r3]
 800107e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001082:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108a:	d505      	bpl.n	8001098 <combine_buffers+0xe8>
            max_value = out_buf[i];
 800108c:	8afb      	ldrh	r3, [r7, #22]
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	613b      	str	r3, [r7, #16]
    for(i = 0; i < size; i++){
 8001098:	8afb      	ldrh	r3, [r7, #22]
 800109a:	3301      	adds	r3, #1
 800109c:	82fb      	strh	r3, [r7, #22]
 800109e:	8afa      	ldrh	r2, [r7, #22]
 80010a0:	887b      	ldrh	r3, [r7, #2]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d3a8      	bcc.n	8000ff8 <combine_buffers+0x48>
        }

    }

    //re-normalizes from -1 --> 1
     for(i = 0; i < size; i++){
 80010a6:	2300      	movs	r3, #0
 80010a8:	82fb      	strh	r3, [r7, #22]
 80010aa:	e012      	b.n	80010d2 <combine_buffers+0x122>

        out_buf[i] /= max_value;
 80010ac:	8afb      	ldrh	r3, [r7, #22]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	edd3 6a00 	vldr	s13, [r3]
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4413      	add	r3, r2
 80010c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80010c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c8:	edc3 7a00 	vstr	s15, [r3]
     for(i = 0; i < size; i++){
 80010cc:	8afb      	ldrh	r3, [r7, #22]
 80010ce:	3301      	adds	r3, #1
 80010d0:	82fb      	strh	r3, [r7, #22]
 80010d2:	8afa      	ldrh	r2, [r7, #22]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d3e8      	bcc.n	80010ac <combine_buffers+0xfc>

    }


}
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bdb0      	pop	{r4, r5, r7, pc}
 80010e0:	08005c20 	.word	0x08005c20
 80010e4:	08005c48 	.word	0x08005c48
 80010e8:	08005c70 	.word	0x08005c70
 80010ec:	08005c94 	.word	0x08005c94
 80010f0:	08005cb0 	.word	0x08005cb0
 80010f4:	08005cc8 	.word	0x08005cc8

080010f8 <create_delay>:

void create_delay(delay *delay, float delay_ms){
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	ed87 0a00 	vstr	s0, [r7]

	uint8_t i;

	myprintf("in_create_delay \n");
 8001104:	4842      	ldr	r0, [pc, #264]	@ (8001210 <create_delay+0x118>)
 8001106:	f000 f8eb 	bl	80012e0 <myprintf>



	uint8_t num_buf = (uint8_t)(delay_ms / (TIME_FOR_ONE_SAMPLE_MS * HALF_BUF_LEN));
 800110a:	6838      	ldr	r0, [r7, #0]
 800110c:	f7ff fa3c 	bl	8000588 <__aeabi_f2d>
 8001110:	a33d      	add	r3, pc, #244	@ (adr r3, 8001208 <create_delay+0x110>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff fbb9 	bl	800088c <__aeabi_ddiv>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f7ff fc9b 	bl	8000a5c <__aeabi_d2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]

	if (num_buf < 1) {
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d103      	bne.n	8001138 <create_delay+0x40>
	    myprintf("Delay is too short");
 8001130:	4838      	ldr	r0, [pc, #224]	@ (8001214 <create_delay+0x11c>)
 8001132:	f000 f8d5 	bl	80012e0 <myprintf>
	    return;
 8001136:	e062      	b.n	80011fe <create_delay+0x106>
	}

	// Allocate array of float* (buffer pointers)
	delay->delay_buf = malloc(sizeof(float*) * num_buf);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4618      	mov	r0, r3
 800113e:	f004 f899 	bl	8005274 <malloc>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	605a      	str	r2, [r3, #4]
	if (!delay->delay_buf) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d103      	bne.n	800115a <create_delay+0x62>
	    myprintf("Not enough space for delay buffer pointers");
 8001152:	4831      	ldr	r0, [pc, #196]	@ (8001218 <create_delay+0x120>)
 8001154:	f000 f8c4 	bl	80012e0 <myprintf>
	    return;
 8001158:	e051      	b.n	80011fe <create_delay+0x106>
	}

	// Allocate each individual float buffer
	for (i = 0; i < num_buf; i++) {
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]
 800115e:	e03e      	b.n	80011de <create_delay+0xe6>

	    delay->delay_buf[i] = malloc(sizeof(float) * HALF_BUF_LEN);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d4      	adds	r4, r2, r3
 800116a:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800116e:	f004 f881 	bl	8005274 <malloc>
 8001172:	4603      	mov	r3, r0
 8001174:	6023      	str	r3, [r4, #0]
	    myprintf("delay_buf[%d] = %p\n", i, delay->delay_buf[i]);
 8001176:	7df9      	ldrb	r1, [r7, #23]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685a      	ldr	r2, [r3, #4]
 800117c:	7dfb      	ldrb	r3, [r7, #23]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4825      	ldr	r0, [pc, #148]	@ (800121c <create_delay+0x124>)
 8001188:	f000 f8aa 	bl	80012e0 <myprintf>

	    if (!delay->delay_buf[i]) {
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	7dfb      	ldrb	r3, [r7, #23]
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4413      	add	r3, r2
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d11d      	bne.n	80011d8 <create_delay+0xe0>
	        myprintf("Not enough space for buffer %d\n", i);
 800119c:	7dfb      	ldrb	r3, [r7, #23]
 800119e:	4619      	mov	r1, r3
 80011a0:	481f      	ldr	r0, [pc, #124]	@ (8001220 <create_delay+0x128>)
 80011a2:	f000 f89d 	bl	80012e0 <myprintf>

	        // Free previously allocated buffers
	        for (int j = 0; j < i; j++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	e00b      	b.n	80011c4 <create_delay+0xcc>
	            free(delay->delay_buf[j]);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f004 f863 	bl	8005284 <free>
	        for (int j = 0; j < i; j++) {
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	3301      	adds	r3, #1
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	dbef      	blt.n	80011ac <create_delay+0xb4>
	        }
	        free(delay->delay_buf);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f857 	bl	8005284 <free>
	        return;
 80011d6:	e012      	b.n	80011fe <create_delay+0x106>
	for (i = 0; i < num_buf; i++) {
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	3301      	adds	r3, #1
 80011dc:	75fb      	strb	r3, [r7, #23]
 80011de:	7dfa      	ldrb	r2, [r7, #23]
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d3bc      	bcc.n	8001160 <create_delay+0x68>
	    }

	}


	delay->num_buf = num_buf;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	721a      	strb	r2, [r3, #8]
	delay->ms = delay_ms;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	683a      	ldr	r2, [r7, #0]
 80011f0:	601a      	str	r2, [r3, #0]
	delay->index = 0;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	729a      	strb	r2, [r3, #10]
	delay->filled_all = 0;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	725a      	strb	r2, [r3, #9]

}
 80011fe:	371c      	adds	r7, #28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	f3af 8000 	nop.w
 8001208:	47ae147b 	.word	0x47ae147b
 800120c:	40447ae1 	.word	0x40447ae1
 8001210:	08005ce0 	.word	0x08005ce0
 8001214:	08005cf4 	.word	0x08005cf4
 8001218:	08005d08 	.word	0x08005d08
 800121c:	08005d34 	.word	0x08005d34
 8001220:	08005d48 	.word	0x08005d48

08001224 <process_delay>:


void process_delay(float* new_data, delay *delay, float attenuation){
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	ed87 0a01 	vstr	s0, [r7, #4]

	if(delay->filled_all == 1){
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	7a5b      	ldrb	r3, [r3, #9]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d12b      	bne.n	8001292 <process_delay+0x6e>
		//combine old data with new
		combine_buffers(new_data, delay->delay_buf[delay->index], attenuation, HALF_BUF_LEN);
 800123a:	68bb      	ldr	r3, [r7, #8]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	7a9b      	ldrb	r3, [r3, #10]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800124c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001250:	4619      	mov	r1, r3
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f7ff feac 	bl	8000fb0 <combine_buffers>

		//copy old data to buffer for next copy
		memcpy(delay->delay_buf[delay->index], new_data, (HALF_BUF_LEN)*sizeof(float));
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	685a      	ldr	r2, [r3, #4]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	7a9b      	ldrb	r3, [r3, #10]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800126a:	68f9      	ldr	r1, [r7, #12]
 800126c:	4618      	mov	r0, r3
 800126e:	f004 f93d 	bl	80054ec <memcpy>


		delay->index++;
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	7a9b      	ldrb	r3, [r3, #10]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	729a      	strb	r2, [r3, #10]


		//reset index to start from first buffer
		if(delay->index >= delay->num_buf){
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	7a9a      	ldrb	r2, [r3, #10]
 8001282:	68bb      	ldr	r3, [r7, #8]
 8001284:	7a1b      	ldrb	r3, [r3, #8]
 8001286:	429a      	cmp	r2, r3
 8001288:	d323      	bcc.n	80012d2 <process_delay+0xae>
			delay->index = 0;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	2200      	movs	r2, #0
 800128e:	729a      	strb	r2, [r3, #10]
		}
		return;
 8001290:	e01f      	b.n	80012d2 <process_delay+0xae>
	}
	else{
	memcpy(delay->delay_buf[delay->index], new_data, (HALF_BUF_LEN)*sizeof(float));
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	685a      	ldr	r2, [r3, #4]
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	7a9b      	ldrb	r3, [r3, #10]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	4413      	add	r3, r2
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012a4:	68f9      	ldr	r1, [r7, #12]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 f920 	bl	80054ec <memcpy>

	delay->index++;
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	7a9b      	ldrb	r3, [r3, #10]
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	729a      	strb	r2, [r3, #10]

	if(delay->index >= delay->num_buf){
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	7a9a      	ldrb	r2, [r3, #10]
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	7a1b      	ldrb	r3, [r3, #8]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d308      	bcc.n	80012d6 <process_delay+0xb2>
			delay->index = 0;
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	2200      	movs	r2, #0
 80012c8:	729a      	strb	r2, [r3, #10]
			delay->filled_all = 1;
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	2201      	movs	r2, #1
 80012ce:	725a      	strb	r2, [r3, #9]
	}
	return;
 80012d0:	e001      	b.n	80012d6 <process_delay+0xb2>
		return;
 80012d2:	bf00      	nop
 80012d4:	e000      	b.n	80012d8 <process_delay+0xb4>
	return;
 80012d6:	bf00      	nop
	}


}
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <myprintf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...)
{
 80012e0:	b40f      	push	{r0, r1, r2, r3}
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0

  //	if(res == osOK){

  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f6:	480b      	ldr	r0, [pc, #44]	@ (8001324 <myprintf+0x44>)
 80012f8:	f004 f8a6 	bl	8005448 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80012fc:	4809      	ldr	r0, [pc, #36]	@ (8001324 <myprintf+0x44>)
 80012fe:	f7fe ff87 	bl	8000210 <strlen>
 8001302:	4603      	mov	r3, r0
 8001304:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)buffer, len, -1);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	b29a      	uxth	r2, r3
 800130a:	f04f 33ff 	mov.w	r3, #4294967295
 800130e:	4905      	ldr	r1, [pc, #20]	@ (8001324 <myprintf+0x44>)
 8001310:	4805      	ldr	r0, [pc, #20]	@ (8001328 <myprintf+0x48>)
 8001312:	f003 fbf3 	bl	8004afc <HAL_UART_Transmit>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001320:	b004      	add	sp, #16
 8001322:	4770      	bx	lr
 8001324:	2000c228 	.word	0x2000c228
 8001328:	2000c1e0 	.word	0x2000c1e0

0800132c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b084      	sub	sp, #16
 8001330:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001332:	f000 fd09 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001336:	f000 f87d 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133a:	f000 fa0f 	bl	800175c <MX_GPIO_Init>
  MX_DMA_Init();
 800133e:	f000 f9d7 	bl	80016f0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001342:	f000 f8e3 	bl	800150c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001346:	f000 f9a9 	bl	800169c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800134a:	f000 f95b 	bl	8001604 <MX_TIM2_Init>
  MX_DAC_Init();
 800134e:	f000 f92f 	bl	80015b0 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  uint32_t i;
  uint8_t dac = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	71fb      	strb	r3, [r7, #7]

  myprintf("Start of start adc\n");
 8001356:	482b      	ldr	r0, [pc, #172]	@ (8001404 <main+0xd8>)
 8001358:	f7ff ffc2 	bl	80012e0 <myprintf>

  // begins filling of ADC buffer
  HAL_TIM_Base_Start(&htim2);
 800135c:	482a      	ldr	r0, [pc, #168]	@ (8001408 <main+0xdc>)
 800135e:	f002 fef5 	bl	800414c <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_buf, ADC_BUF_LEN);
 8001362:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001366:	4929      	ldr	r1, [pc, #164]	@ (800140c <main+0xe0>)
 8001368:	4829      	ldr	r0, [pc, #164]	@ (8001410 <main+0xe4>)
 800136a:	f000 fd73 	bl	8001e54 <HAL_ADC_Start_DMA>
//  create_filter(lowpass_test, LOW_PASS_FILTER, 2, 1, 80);
////  create_filter(highpass_test, HIGH_PASS_FILTER, 2, 1, 200);
//  create_filter(bandstop_test, BAND_STOP_FILTER, 2, .7, 60);

  delay* delay;
  delay = malloc(sizeof(delay));
 800136e:	2004      	movs	r0, #4
 8001370:	f003 ff80 	bl	8005274 <malloc>
 8001374:	4603      	mov	r3, r0
 8001376:	603b      	str	r3, [r7, #0]
  create_delay(delay, 50);
 8001378:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001414 <main+0xe8>
 800137c:	6838      	ldr	r0, [r7, #0]
 800137e:	f7ff febb 	bl	80010f8 <create_delay>
     * DAC buffer only begins once it is fully filled after the adc runs one full cycle
     *
     */

    // triggers when adc buff is half full
    if (process_first_half == 1)
 8001382:	4b25      	ldr	r3, [pc, #148]	@ (8001418 <main+0xec>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d114      	bne.n	80013b4 <main+0x88>
    {

    //prepare data for dsp

      normalize_adc(processing_buf, adc_buf, HALF_BUF_LEN); //shift from 0-->4096 to -1 to 1
 800138a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800138e:	491f      	ldr	r1, [pc, #124]	@ (800140c <main+0xe0>)
 8001390:	4822      	ldr	r0, [pc, #136]	@ (800141c <main+0xf0>)
 8001392:	f7ff fd4d 	bl	8000e30 <normalize_adc>


      process_delay(processing_buf, delay, .5);
 8001396:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800139a:	6839      	ldr	r1, [r7, #0]
 800139c:	481f      	ldr	r0, [pc, #124]	@ (800141c <main+0xf0>)
 800139e:	f7ff ff41 	bl	8001224 <process_delay>


      prepare_for_dac(&dac_buf, processing_buf, HALF_BUF_LEN);
 80013a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013a6:	491d      	ldr	r1, [pc, #116]	@ (800141c <main+0xf0>)
 80013a8:	481d      	ldr	r0, [pc, #116]	@ (8001420 <main+0xf4>)
 80013aa:	f7ff fdcf 	bl	8000f4c <prepare_for_dac>
//
//      //copy data into dac buffer
//      memcpy(&dac_buf, processing_buf, HALF_BUF_LEN * sizeof(uint16_t));

      process_first_half = 0;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <main+0xec>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	701a      	strb	r2, [r3, #0]
    }
    // triggers once the second half is filled
    if (process_second_half == 1)
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <main+0xf8>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d1e2      	bne.n	8001382 <main+0x56>
    {

//      dc_block(&adc_buf[HALF_BUF_LEN], HALF_BUF_LEN);
      normalize_adc(processing_buf, &adc_buf[HALF_BUF_LEN], HALF_BUF_LEN); //shift to -1 --> 1
 80013bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013c0:	4919      	ldr	r1, [pc, #100]	@ (8001428 <main+0xfc>)
 80013c2:	4816      	ldr	r0, [pc, #88]	@ (800141c <main+0xf0>)
 80013c4:	f7ff fd34 	bl	8000e30 <normalize_adc>
//

      process_delay(processing_buf, delay, .5);
 80013c8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80013cc:	6839      	ldr	r1, [r7, #0]
 80013ce:	4813      	ldr	r0, [pc, #76]	@ (800141c <main+0xf0>)
 80013d0:	f7ff ff28 	bl	8001224 <process_delay>

      //shifts back to
      prepare_for_dac(&dac_buf[HALF_BUF_LEN], processing_buf, HALF_BUF_LEN);
 80013d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013d8:	4910      	ldr	r1, [pc, #64]	@ (800141c <main+0xf0>)
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <main+0x100>)
 80013dc:	f7ff fdb6 	bl	8000f4c <prepare_for_dac>

//      //copy data into dac buffer
//      memcpy(&dac_buf[HALF_BUF_LEN], processing_buf, HALF_BUF_LEN * sizeof(uint16_t));

      if (dac == 0)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d10a      	bne.n	80013fc <main+0xd0>
      {
        HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t *)dac_buf, ADC_BUF_LEN, DAC_ALIGN_12B_R);
 80013e6:	2300      	movs	r3, #0
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <main+0xf4>)
 80013f0:	2100      	movs	r1, #0
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <main+0x104>)
 80013f4:	f001 fa00 	bl	80027f8 <HAL_DAC_Start_DMA>
        dac = 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	71fb      	strb	r3, [r7, #7]
      }

      process_second_half = 0;
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <main+0xf8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
    if (process_first_half == 1)
 8001402:	e7be      	b.n	8001382 <main+0x56>
 8001404:	08005dc4 	.word	0x08005dc4
 8001408:	2000c198 	.word	0x2000c198
 800140c:	20000078 	.word	0x20000078
 8001410:	2000c07c 	.word	0x2000c07c
 8001414:	42480000 	.word	0x42480000
 8001418:	2000c078 	.word	0x2000c078
 800141c:	20008078 	.word	0x20008078
 8001420:	20004078 	.word	0x20004078
 8001424:	2000c079 	.word	0x2000c079
 8001428:	20002078 	.word	0x20002078
 800142c:	20006078 	.word	0x20006078
 8001430:	2000c124 	.word	0x2000c124

08001434 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	2234      	movs	r2, #52	@ 0x34
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f004 f80e 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b29      	ldr	r3, [pc, #164]	@ (8001504 <SystemClock_Config+0xd0>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a28      	ldr	r2, [pc, #160]	@ (8001504 <SystemClock_Config+0xd0>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b26      	ldr	r3, [pc, #152]	@ (8001504 <SystemClock_Config+0xd0>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <SystemClock_Config+0xd4>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <SystemClock_Config+0xd4>)
 8001482:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b1f      	ldr	r3, [pc, #124]	@ (8001508 <SystemClock_Config+0xd4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001494:	2302      	movs	r3, #2
 8001496:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001498:	2301      	movs	r3, #1
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800149c:	2310      	movs	r3, #16
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a0:	2302      	movs	r3, #2
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014a8:	2308      	movs	r3, #8
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014ac:	2348      	movs	r3, #72	@ 0x48
 80014ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b0:	2302      	movs	r3, #2
 80014b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014b4:	2302      	movs	r3, #2
 80014b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4618      	mov	r0, r3
 80014c2:	f002 fb55 	bl	8003b70 <HAL_RCC_OscConfig>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014cc:	f000 f972 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014d0:	230f      	movs	r3, #15
 80014d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014d4:	2302      	movs	r3, #2
 80014d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014e6:	f107 0308 	add.w	r3, r7, #8
 80014ea:	2102      	movs	r1, #2
 80014ec:	4618      	mov	r0, r3
 80014ee:	f002 f849 	bl	8003584 <HAL_RCC_ClockConfig>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80014f8:	f000 f95c 	bl	80017b4 <Error_Handler>
  }
}
 80014fc:	bf00      	nop
 80014fe:	3750      	adds	r7, #80	@ 0x50
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40023800 	.word	0x40023800
 8001508:	40007000 	.word	0x40007000

0800150c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001512:	463b      	mov	r3, r7
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 800151e:	4b22      	ldr	r3, [pc, #136]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001520:	4a22      	ldr	r2, [pc, #136]	@ (80015ac <MX_ADC1_Init+0xa0>)
 8001522:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001524:	4b20      	ldr	r3, [pc, #128]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800152a:	4b1f      	ldr	r3, [pc, #124]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001530:	4b1d      	ldr	r3, [pc, #116]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001538:	2200      	movs	r2, #0
 800153a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800153c:	4b1a      	ldr	r3, [pc, #104]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 800153e:	2200      	movs	r2, #0
 8001540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001544:	4b18      	ldr	r3, [pc, #96]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800154a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800154c:	4b16      	ldr	r3, [pc, #88]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 800154e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001552:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800155a:	4b13      	ldr	r3, [pc, #76]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 800155c:	2201      	movs	r2, #1
 800155e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001568:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 800156a:	2201      	movs	r2, #1
 800156c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800156e:	480e      	ldr	r0, [pc, #56]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001570:	f000 fc2c 	bl	8001dcc <HAL_ADC_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800157a:	f000 f91b 	bl	80017b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_0;
 800157e:	2300      	movs	r3, #0
 8001580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001582:	2301      	movs	r3, #1
 8001584:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001586:	2300      	movs	r3, #0
 8001588:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158a:	463b      	mov	r3, r7
 800158c:	4619      	mov	r1, r3
 800158e:	4806      	ldr	r0, [pc, #24]	@ (80015a8 <MX_ADC1_Init+0x9c>)
 8001590:	f000 fd7e 	bl	8002090 <HAL_ADC_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800159a:	f000 f90b 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 800159e:	bf00      	nop
 80015a0:	3710      	adds	r7, #16
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000c07c 	.word	0x2000c07c
 80015ac:	40012000 	.word	0x40012000

080015b0 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
   */
  hdac.Instance = DAC;
 80015be:	4b0f      	ldr	r3, [pc, #60]	@ (80015fc <MX_DAC_Init+0x4c>)
 80015c0:	4a0f      	ldr	r2, [pc, #60]	@ (8001600 <MX_DAC_Init+0x50>)
 80015c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015c4:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_DAC_Init+0x4c>)
 80015c6:	f001 f8f5 	bl	80027b4 <HAL_DAC_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015d0:	f000 f8f0 	bl	80017b4 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015d4:	2324      	movs	r3, #36	@ 0x24
 80015d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80015dc:	463b      	mov	r3, r7
 80015de:	2200      	movs	r2, #0
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_DAC_Init+0x4c>)
 80015e4:	f001 f9e6 	bl	80029b4 <HAL_DAC_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80015ee:	f000 f8e1 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */
}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2000c124 	.word	0x2000c124
 8001600:	40007400 	.word	0x40007400

08001604 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0308 	add.w	r3, r7, #8
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	463b      	mov	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001620:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001622:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001628:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_TIM2_Init+0x94>)
 800162a:	2200      	movs	r2, #0
 800162c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b1a      	ldr	r3, [pc, #104]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 749;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001636:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800163a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_TIM2_Init+0x94>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001644:	2280      	movs	r2, #128	@ 0x80
 8001646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_TIM2_Init+0x94>)
 800164a:	f002 fd2f 	bl	80040ac <HAL_TIM_Base_Init>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001654:	f000 f8ae 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001658:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001666:	f002 ff39 	bl	80044dc <HAL_TIM_ConfigClockSource>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001670:	f000 f8a0 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001674:	2320      	movs	r3, #32
 8001676:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800167c:	463b      	mov	r3, r7
 800167e:	4619      	mov	r1, r3
 8001680:	4805      	ldr	r0, [pc, #20]	@ (8001698 <MX_TIM2_Init+0x94>)
 8001682:	f003 f95b 	bl	800493c <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800168c:	f000 f892 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	2000c198 	.word	0x2000c198

0800169c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016a0:	4b11      	ldr	r3, [pc, #68]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a2:	4a12      	ldr	r2, [pc, #72]	@ (80016ec <MX_USART2_UART_Init+0x50>)
 80016a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016a6:	4b10      	ldr	r3, [pc, #64]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016a8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80016ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016c0:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c2:	220c      	movs	r2, #12
 80016c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	@ (80016e8 <MX_USART2_UART_Init+0x4c>)
 80016d4:	f003 f9c2 	bl	8004a5c <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016de:	f000 f869 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000c1e0 	.word	0x2000c1e0
 80016ec:	40004400 	.word	0x40004400

080016f0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	4b17      	ldr	r3, [pc, #92]	@ (8001758 <MX_DMA_Init+0x68>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a16      	ldr	r2, [pc, #88]	@ (8001758 <MX_DMA_Init+0x68>)
 8001700:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <MX_DMA_Init+0x68>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800170e:	607b      	str	r3, [r7, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	603b      	str	r3, [r7, #0]
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_DMA_Init+0x68>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	4a0f      	ldr	r2, [pc, #60]	@ (8001758 <MX_DMA_Init+0x68>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001720:	6313      	str	r3, [r2, #48]	@ 0x30
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <MX_DMA_Init+0x68>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	2010      	movs	r0, #16
 8001734:	f001 f814 	bl	8002760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001738:	2010      	movs	r0, #16
 800173a:	f001 f82d 	bl	8002798 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	2038      	movs	r0, #56	@ 0x38
 8001744:	f001 f80c 	bl	8002760 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001748:	2038      	movs	r0, #56	@ 0x38
 800174a:	f001 f825 	bl	8002798 <HAL_NVIC_EnableIRQ>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800

0800175c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <MX_GPIO_Init+0x30>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <MX_GPIO_Init+0x30>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <MX_GPIO_Init+0x30>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80017a2:	f000 faf3 	bl	8001d8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40010000 	.word	0x40010000

080017b4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <Error_Handler+0x8>

080017c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	4b10      	ldr	r3, [pc, #64]	@ (800180c <HAL_MspInit+0x4c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a0f      	ldr	r2, [pc, #60]	@ (800180c <HAL_MspInit+0x4c>)
 80017d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <HAL_MspInit+0x4c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017de:	607b      	str	r3, [r7, #4]
 80017e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	603b      	str	r3, [r7, #0]
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <HAL_MspInit+0x4c>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ea:	4a08      	ldr	r2, [pc, #32]	@ (800180c <HAL_MspInit+0x4c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <HAL_MspInit+0x4c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800

08001810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a33      	ldr	r2, [pc, #204]	@ (80018fc <HAL_ADC_MspInit+0xec>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d160      	bne.n	80018f4 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b32      	ldr	r3, [pc, #200]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800183a:	4a31      	ldr	r2, [pc, #196]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001840:	6453      	str	r3, [r2, #68]	@ 0x44
 8001842:	4b2f      	ldr	r3, [pc, #188]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a2a      	ldr	r2, [pc, #168]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b28      	ldr	r3, [pc, #160]	@ (8001900 <HAL_ADC_MspInit+0xf0>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800186a:	2301      	movs	r3, #1
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186e:	2303      	movs	r3, #3
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	4821      	ldr	r0, [pc, #132]	@ (8001904 <HAL_ADC_MspInit+0xf4>)
 800187e:	f001 fced 	bl	800325c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001882:	4b21      	ldr	r3, [pc, #132]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 8001884:	4a21      	ldr	r2, [pc, #132]	@ (800190c <HAL_ADC_MspInit+0xfc>)
 8001886:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001888:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 800188a:	2200      	movs	r2, #0
 800188c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188e:	4b1e      	ldr	r3, [pc, #120]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001894:	4b1c      	ldr	r3, [pc, #112]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 8001896:	2200      	movs	r2, #0
 8001898:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800189a:	4b1b      	ldr	r3, [pc, #108]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 800189c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018a2:	4b19      	ldr	r3, [pc, #100]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018aa:	4b17      	ldr	r3, [pc, #92]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018b2:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018ba:	4b13      	ldr	r3, [pc, #76]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018c0:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018c2:	2204      	movs	r2, #4
 80018c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018c6:	4b10      	ldr	r3, [pc, #64]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018c8:	2203      	movs	r2, #3
 80018ca:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80018cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018d8:	480b      	ldr	r0, [pc, #44]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018da:	f001 f94f 	bl	8002b7c <HAL_DMA_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 80018e4:	f7ff ff66 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80018ee:	4a06      	ldr	r2, [pc, #24]	@ (8001908 <HAL_ADC_MspInit+0xf8>)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80018f4:	bf00      	nop
 80018f6:	3728      	adds	r7, #40	@ 0x28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40012000 	.word	0x40012000
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	2000c0c4 	.word	0x2000c0c4
 800190c:	40026410 	.word	0x40026410

08001910 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a34      	ldr	r2, [pc, #208]	@ (8001a00 <HAL_DAC_MspInit+0xf0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d161      	bne.n	80019f6 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b33      	ldr	r3, [pc, #204]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193a:	4a32      	ldr	r2, [pc, #200]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 800193c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001940:	6413      	str	r3, [r2, #64]	@ 0x40
 8001942:	4b30      	ldr	r3, [pc, #192]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b2c      	ldr	r3, [pc, #176]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a2b      	ldr	r2, [pc, #172]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <HAL_DAC_MspInit+0xf4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800196a:	2310      	movs	r3, #16
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196e:	2303      	movs	r3, #3
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001976:	f107 0314 	add.w	r3, r7, #20
 800197a:	4619      	mov	r1, r3
 800197c:	4822      	ldr	r0, [pc, #136]	@ (8001a08 <HAL_DAC_MspInit+0xf8>)
 800197e:	f001 fc6d 	bl	800325c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 8001984:	4a22      	ldr	r2, [pc, #136]	@ (8001a10 <HAL_DAC_MspInit+0x100>)
 8001986:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001988:	4b20      	ldr	r3, [pc, #128]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 800198a:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 800198e:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001990:	4b1e      	ldr	r3, [pc, #120]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 8001992:	2240      	movs	r2, #64	@ 0x40
 8001994:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001996:	4b1d      	ldr	r3, [pc, #116]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 8001998:	2200      	movs	r2, #0
 800199a:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800199c:	4b1b      	ldr	r3, [pc, #108]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 800199e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019a2:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019a4:	4b19      	ldr	r3, [pc, #100]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019aa:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b2:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80019b4:	4b15      	ldr	r3, [pc, #84]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019ba:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80019bc:	4b13      	ldr	r3, [pc, #76]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019be:	2200      	movs	r2, #0
 80019c0:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019c2:	4b12      	ldr	r3, [pc, #72]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019c4:	2204      	movs	r2, #4
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019c8:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019ca:	2203      	movs	r2, #3
 80019cc:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 80019ce:	4b0f      	ldr	r3, [pc, #60]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019d4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80019da:	480c      	ldr	r0, [pc, #48]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019dc:	f001 f8ce 	bl	8002b7c <HAL_DMA_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <HAL_DAC_MspInit+0xda>
    {
      Error_Handler();
 80019e6:	f7ff fee5 	bl	80017b4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a07      	ldr	r2, [pc, #28]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	4a06      	ldr	r2, [pc, #24]	@ (8001a0c <HAL_DAC_MspInit+0xfc>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3728      	adds	r7, #40	@ 0x28
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40007400 	.word	0x40007400
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	2000c138 	.word	0x2000c138
 8001a10:	40026088 	.word	0x40026088

08001a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a24:	d10d      	bne.n	8001a42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <HAL_TIM_Base_MspInit+0x3c>)
 8001a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800

08001a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]
 8001a68:	60da      	str	r2, [r3, #12]
 8001a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a19      	ldr	r2, [pc, #100]	@ (8001ad8 <HAL_UART_MspInit+0x84>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d12b      	bne.n	8001ace <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b18      	ldr	r3, [pc, #96]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	4a17      	ldr	r2, [pc, #92]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b11      	ldr	r3, [pc, #68]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9a:	4a10      	ldr	r2, [pc, #64]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001adc <HAL_UART_MspInit+0x88>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001aae:	230c      	movs	r3, #12
 8001ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001abe:	2307      	movs	r3, #7
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <HAL_UART_MspInit+0x8c>)
 8001aca:	f001 fbc7 	bl	800325c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	@ 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	40020000 	.word	0x40020000

08001ae4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08c      	sub	sp, #48	@ 0x30
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <HAL_InitTick+0xd0>)
 8001afa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afc:	4a2d      	ldr	r2, [pc, #180]	@ (8001bb4 <HAL_InitTick+0xd0>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b04:	4b2b      	ldr	r3, [pc, #172]	@ (8001bb4 <HAL_InitTick+0xd0>)
 8001b06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b10:	f107 020c 	add.w	r2, r7, #12
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4611      	mov	r1, r2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f001 fe4c 	bl	80037b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b20:	f001 fe36 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8001b24:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b28:	4a23      	ldr	r2, [pc, #140]	@ (8001bb8 <HAL_InitTick+0xd4>)
 8001b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2e:	0c9b      	lsrs	r3, r3, #18
 8001b30:	3b01      	subs	r3, #1
 8001b32:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b34:	4b21      	ldr	r3, [pc, #132]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b36:	4a22      	ldr	r2, [pc, #136]	@ (8001bc0 <HAL_InitTick+0xdc>)
 8001b38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b3a:	4b20      	ldr	r3, [pc, #128]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b3c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b40:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b42:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b46:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b48:	4b1c      	ldr	r3, [pc, #112]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b54:	4b19      	ldr	r3, [pc, #100]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b5a:	4818      	ldr	r0, [pc, #96]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b5c:	f002 faa6 	bl	80040ac <HAL_TIM_Base_Init>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11b      	bne.n	8001ba6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b6e:	4813      	ldr	r0, [pc, #76]	@ (8001bbc <HAL_InitTick+0xd8>)
 8001b70:	f002 fb54 	bl	800421c <HAL_TIM_Base_Start_IT>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d111      	bne.n	8001ba6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b82:	2019      	movs	r0, #25
 8001b84:	f000 fe08 	bl	8002798 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2b0f      	cmp	r3, #15
 8001b8c:	d808      	bhi.n	8001ba0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b8e:	2200      	movs	r2, #0
 8001b90:	6879      	ldr	r1, [r7, #4]
 8001b92:	2019      	movs	r0, #25
 8001b94:	f000 fde4 	bl	8002760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b98:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <HAL_InitTick+0xe0>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e002      	b.n	8001ba6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3730      	adds	r7, #48	@ 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	431bde83 	.word	0x431bde83
 8001bbc:	2000c328 	.word	0x2000c328
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	20000004 	.word	0x20000004

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bcc:	bf00      	nop
 8001bce:	e7fd      	b.n	8001bcc <NMI_Handler+0x4>

08001bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd4:	bf00      	nop
 8001bd6:	e7fd      	b.n	8001bd4 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <MemManage_Handler+0x4>

08001be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be4:	bf00      	nop
 8001be6:	e7fd      	b.n	8001be4 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	bf00      	nop
 8001bee:	e7fd      	b.n	8001bec <UsageFault_Handler+0x4>

08001bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c2c:	4802      	ldr	r0, [pc, #8]	@ (8001c38 <DMA1_Stream5_IRQHandler+0x10>)
 8001c2e:	f001 f8ab 	bl	8002d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	2000c138 	.word	0x2000c138

08001c3c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c40:	4802      	ldr	r0, [pc, #8]	@ (8001c4c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c42:	f002 fb5b 	bl	80042fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000c328 	.word	0x2000c328

08001c50 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <DMA2_Stream0_IRQHandler+0x10>)
 8001c56:	f001 f897 	bl	8002d88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	2000c0c4 	.word	0x2000c0c4

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	@ (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	@ (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	@ (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	@ (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	@ (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f003 fbfe 	bl	8005494 <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	@ (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	@ (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20020000 	.word	0x20020000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	2000c370 	.word	0x2000c370
 8001ccc:	2000c4c0 	.word	0x2000c4c0

08001cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	@ (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	@ (8001d30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	@ (8001d34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	@ (8001d38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	@ (8001d40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001d22:	f003 fbbd 	bl	80054a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d26:	f7ff fb01 	bl	800132c <main>
  bx  lr    
 8001d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001d38:	08005e3c 	.word	0x08005e3c
  ldr r2, =_sbss
 8001d3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001d40:	2000c4c0 	.word	0x2000c4c0

08001d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d88 <HAL_Init+0x40>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0d      	ldr	r2, [pc, #52]	@ (8001d88 <HAL_Init+0x40>)
 8001d52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d58:	4b0b      	ldr	r3, [pc, #44]	@ (8001d88 <HAL_Init+0x40>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <HAL_Init+0x40>)
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d64:	4b08      	ldr	r3, [pc, #32]	@ (8001d88 <HAL_Init+0x40>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a07      	ldr	r2, [pc, #28]	@ (8001d88 <HAL_Init+0x40>)
 8001d6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d70:	2003      	movs	r0, #3
 8001d72:	f000 fcea 	bl	800274a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d76:	200f      	movs	r0, #15
 8001d78:	f7ff feb4 	bl	8001ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d7c:	f7ff fd20 	bl	80017c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	40023c00 	.word	0x40023c00

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	20000008 	.word	0x20000008
 8001db0:	2000c374 	.word	0x2000c374

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	@ (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	2000c374 	.word	0x2000c374

08001dcc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e033      	b.n	8001e4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f7ff fd10 	bl	8001810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d118      	bne.n	8001e3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e12:	f023 0302 	bic.w	r3, r3, #2
 8001e16:	f043 0202 	orr.w	r2, r3, #2
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 fa68 	bl	80022f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e3a:	e001      	b.n	8001e40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b088      	sub	sp, #32
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d101      	bne.n	8001e76 <HAL_ADC_Start_DMA+0x22>
 8001e72:	2302      	movs	r3, #2
 8001e74:	e0eb      	b.n	800204e <HAL_ADC_Start_DMA+0x1fa>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 0301 	and.w	r3, r3, #1
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d018      	beq.n	8001ebe <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689a      	ldr	r2, [r3, #8]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f042 0201 	orr.w	r2, r2, #1
 8001e9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e9c:	4b6e      	ldr	r3, [pc, #440]	@ (8002058 <HAL_ADC_Start_DMA+0x204>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a6e      	ldr	r2, [pc, #440]	@ (800205c <HAL_ADC_Start_DMA+0x208>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	0c9a      	lsrs	r2, r3, #18
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001eb0:	e002      	b.n	8001eb8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1f9      	bne.n	8001eb2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ecc:	d107      	bne.n	8001ede <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001edc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	f040 80a3 	bne.w	8002034 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001f18:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f2c:	d106      	bne.n	8001f3c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f32:	f023 0206 	bic.w	r2, r3, #6
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f3a:	e002      	b.n	8001f42 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f4a:	4b45      	ldr	r3, [pc, #276]	@ (8002060 <HAL_ADC_Start_DMA+0x20c>)
 8001f4c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f52:	4a44      	ldr	r2, [pc, #272]	@ (8002064 <HAL_ADC_Start_DMA+0x210>)
 8001f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f5a:	4a43      	ldr	r2, [pc, #268]	@ (8002068 <HAL_ADC_Start_DMA+0x214>)
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f62:	4a42      	ldr	r2, [pc, #264]	@ (800206c <HAL_ADC_Start_DMA+0x218>)
 8001f64:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001f6e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001f7e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	689a      	ldr	r2, [r3, #8]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f8e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	334c      	adds	r3, #76	@ 0x4c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f000 fe9a 	bl	8002cd8 <HAL_DMA_Start_IT>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 031f 	and.w	r3, r3, #31
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d12a      	bne.n	800200a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002070 <HAL_ADC_Start_DMA+0x21c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d015      	beq.n	8001fea <HAL_ADC_Start_DMA+0x196>
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002074 <HAL_ADC_Start_DMA+0x220>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d105      	bne.n	8001fd4 <HAL_ADC_Start_DMA+0x180>
 8001fc8:	4b25      	ldr	r3, [pc, #148]	@ (8002060 <HAL_ADC_Start_DMA+0x20c>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a27      	ldr	r2, [pc, #156]	@ (8002078 <HAL_ADC_Start_DMA+0x224>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d136      	bne.n	800204c <HAL_ADC_Start_DMA+0x1f8>
 8001fde:	4b20      	ldr	r3, [pc, #128]	@ (8002060 <HAL_ADC_Start_DMA+0x20c>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d130      	bne.n	800204c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d129      	bne.n	800204c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	e020      	b.n	800204c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a18      	ldr	r2, [pc, #96]	@ (8002070 <HAL_ADC_Start_DMA+0x21c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d11b      	bne.n	800204c <HAL_ADC_Start_DMA+0x1f8>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d114      	bne.n	800204c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002030:	609a      	str	r2, [r3, #8]
 8002032:	e00b      	b.n	800204c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002038:	f043 0210 	orr.w	r2, r3, #16
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	f043 0201 	orr.w	r2, r3, #1
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800204c:	7ffb      	ldrb	r3, [r7, #31]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3720      	adds	r7, #32
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000000 	.word	0x20000000
 800205c:	431bde83 	.word	0x431bde83
 8002060:	40012300 	.word	0x40012300
 8002064:	080024ed 	.word	0x080024ed
 8002068:	080025a7 	.word	0x080025a7
 800206c:	080025c3 	.word	0x080025c3
 8002070:	40012000 	.word	0x40012000
 8002074:	40012100 	.word	0x40012100
 8002078:	40012200 	.word	0x40012200

0800207c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x1c>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e113      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x244>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b09      	cmp	r3, #9
 80020ba:	d925      	bls.n	8002108 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68d9      	ldr	r1, [r3, #12]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	4613      	mov	r3, r2
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	4413      	add	r3, r2
 80020d0:	3b1e      	subs	r3, #30
 80020d2:	2207      	movs	r2, #7
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43da      	mvns	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	400a      	ands	r2, r1
 80020e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68d9      	ldr	r1, [r3, #12]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	4618      	mov	r0, r3
 80020f4:	4603      	mov	r3, r0
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	4403      	add	r3, r0
 80020fa:	3b1e      	subs	r3, #30
 80020fc:	409a      	lsls	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	60da      	str	r2, [r3, #12]
 8002106:	e022      	b.n	800214e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6919      	ldr	r1, [r3, #16]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4613      	mov	r3, r2
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	4413      	add	r3, r2
 800211c:	2207      	movs	r2, #7
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	400a      	ands	r2, r1
 800212a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6919      	ldr	r1, [r3, #16]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	4603      	mov	r3, r0
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4403      	add	r3, r0
 8002144:	409a      	lsls	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b06      	cmp	r3, #6
 8002154:	d824      	bhi.n	80021a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	3b05      	subs	r3, #5
 8002168:	221f      	movs	r2, #31
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43da      	mvns	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	400a      	ands	r2, r1
 8002176:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	b29b      	uxth	r3, r3
 8002184:	4618      	mov	r0, r3
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	3b05      	subs	r3, #5
 8002192:	fa00 f203 	lsl.w	r2, r0, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	@ 0x34
 800219e:	e04c      	b.n	800223a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b0c      	cmp	r3, #12
 80021a6:	d824      	bhi.n	80021f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685a      	ldr	r2, [r3, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	3b23      	subs	r3, #35	@ 0x23
 80021ba:	221f      	movs	r2, #31
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43da      	mvns	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	400a      	ands	r2, r1
 80021c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685a      	ldr	r2, [r3, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	3b23      	subs	r3, #35	@ 0x23
 80021e4:	fa00 f203 	lsl.w	r2, r0, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	430a      	orrs	r2, r1
 80021ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80021f0:	e023      	b.n	800223a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	3b41      	subs	r3, #65	@ 0x41
 8002204:	221f      	movs	r2, #31
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	400a      	ands	r2, r1
 8002212:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29b      	uxth	r3, r3
 8002220:	4618      	mov	r0, r3
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	3b41      	subs	r3, #65	@ 0x41
 800222e:	fa00 f203 	lsl.w	r2, r0, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	430a      	orrs	r2, r1
 8002238:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <HAL_ADC_ConfigChannel+0x250>)
 800223c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <HAL_ADC_ConfigChannel+0x254>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d10f      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d8>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b12      	cmp	r3, #18
 800224e:	d10b      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a1d      	ldr	r2, [pc, #116]	@ (80022e4 <HAL_ADC_ConfigChannel+0x254>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d12b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x23a>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1c      	ldr	r2, [pc, #112]	@ (80022e8 <HAL_ADC_ConfigChannel+0x258>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d003      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x1f4>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b11      	cmp	r3, #17
 8002282:	d122      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a11      	ldr	r2, [pc, #68]	@ (80022e8 <HAL_ADC_ConfigChannel+0x258>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d111      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_ADC_ConfigChannel+0x25c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_ADC_ConfigChannel+0x260>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9a      	lsrs	r2, r3, #18
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000
 80022e8:	10000012 	.word	0x10000012
 80022ec:	20000000 	.word	0x20000000
 80022f0:	431bde83 	.word	0x431bde83

080022f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fc:	4b79      	ldr	r3, [pc, #484]	@ (80024e4 <ADC_Init+0x1f0>)
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	431a      	orrs	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002328:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	021a      	lsls	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800234c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6859      	ldr	r1, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800236e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6899      	ldr	r1, [r3, #8]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	4a58      	ldr	r2, [pc, #352]	@ (80024e8 <ADC_Init+0x1f4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d022      	beq.n	80023d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800239a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	e00f      	b.n	80023f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80023f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0202 	bic.w	r2, r2, #2
 8002400:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	7e1b      	ldrb	r3, [r3, #24]
 800240c:	005a      	lsls	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d01b      	beq.n	8002458 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800242e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800243e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	3b01      	subs	r3, #1
 800244c:	035a      	lsls	r2, r3, #13
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	e007      	b.n	8002468 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002466:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002476:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	3b01      	subs	r3, #1
 8002484:	051a      	lsls	r2, r3, #20
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800249c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6899      	ldr	r1, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80024aa:	025a      	lsls	r2, r3, #9
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80024c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695b      	ldr	r3, [r3, #20]
 80024ce:	029a      	lsls	r2, r3, #10
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	609a      	str	r2, [r3, #8]
}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	40012300 	.word	0x40012300
 80024e8:	0f000001 	.word	0x0f000001

080024ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002502:	2b00      	cmp	r3, #0
 8002504:	d13c      	bne.n	8002580 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d12b      	bne.n	8002578 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002524:	2b00      	cmp	r3, #0
 8002526:	d127      	bne.n	8002578 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800252e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002540:	2b00      	cmp	r3, #0
 8002542:	d119      	bne.n	8002578 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0220 	bic.w	r2, r2, #32
 8002552:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002558:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002564:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d105      	bne.n	8002578 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002570:	f043 0201 	orr.w	r2, r3, #1
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f7fe fcd1 	bl	8000f20 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800257e:	e00e      	b.n	800259e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff fd75 	bl	800207c <HAL_ADC_ErrorCallback>
}
 8002592:	e004      	b.n	800259e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	4798      	blx	r3
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7fe fc9d 	bl	8000ef4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}

080025c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b084      	sub	sp, #16
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2240      	movs	r2, #64	@ 0x40
 80025d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025da:	f043 0204 	orr.w	r2, r3, #4
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fd4a 	bl	800207c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002600:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002618:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800261c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002622:	4a04      	ldr	r2, [pc, #16]	@ (8002634 <__NVIC_SetPriorityGrouping+0x44>)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	60d3      	str	r3, [r2, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <__NVIC_GetPriorityGrouping+0x18>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	0a1b      	lsrs	r3, r3, #8
 8002642:	f003 0307 	and.w	r3, r3, #7
}
 8002646:	4618      	mov	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	4603      	mov	r3, r0
 800265c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002662:	2b00      	cmp	r3, #0
 8002664:	db0b      	blt.n	800267e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	4907      	ldr	r1, [pc, #28]	@ (800268c <__NVIC_EnableIRQ+0x38>)
 800266e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2001      	movs	r0, #1
 8002676:	fa00 f202 	lsl.w	r2, r0, r2
 800267a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	@ (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	@ (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	@ 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff ff4c 	bl	80025f0 <__NVIC_SetPriorityGrouping>
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	4603      	mov	r3, r0
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	607a      	str	r2, [r7, #4]
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800276e:	2300      	movs	r3, #0
 8002770:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002772:	f7ff ff61 	bl	8002638 <__NVIC_GetPriorityGrouping>
 8002776:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	6978      	ldr	r0, [r7, #20]
 800277e:	f7ff ffb1 	bl	80026e4 <NVIC_EncodePriority>
 8002782:	4602      	mov	r2, r0
 8002784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ff80 	bl	8002690 <__NVIC_SetPriority>
}
 8002790:	bf00      	nop
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	4603      	mov	r3, r0
 80027a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff ff54 	bl	8002654 <__NVIC_EnableIRQ>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e014      	b.n	80027f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	791b      	ldrb	r3, [r3, #4]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d105      	bne.n	80027dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff f89a 	bl	8001910 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0a2      	b.n	8002956 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	795b      	ldrb	r3, [r3, #5]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_DAC_Start_DMA+0x24>
 8002818:	2302      	movs	r3, #2
 800281a:	e09c      	b.n	8002956 <HAL_DAC_Start_DMA+0x15e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2202      	movs	r2, #2
 8002826:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d129      	bne.n	8002882 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	4a4b      	ldr	r2, [pc, #300]	@ (8002960 <HAL_DAC_Start_DMA+0x168>)
 8002834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4a4a      	ldr	r2, [pc, #296]	@ (8002964 <HAL_DAC_Start_DMA+0x16c>)
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	4a49      	ldr	r2, [pc, #292]	@ (8002968 <HAL_DAC_Start_DMA+0x170>)
 8002844:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002854:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_DAC_Start_DMA+0x6c>
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d005      	beq.n	800286e <HAL_DAC_Start_DMA+0x76>
 8002862:	e009      	b.n	8002878 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3308      	adds	r3, #8
 800286a:	613b      	str	r3, [r7, #16]
        break;
 800286c:	e033      	b.n	80028d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	330c      	adds	r3, #12
 8002874:	613b      	str	r3, [r7, #16]
        break;
 8002876:	e02e      	b.n	80028d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	3310      	adds	r3, #16
 800287e:	613b      	str	r3, [r7, #16]
        break;
 8002880:	e029      	b.n	80028d6 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	4a39      	ldr	r2, [pc, #228]	@ (800296c <HAL_DAC_Start_DMA+0x174>)
 8002888:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	4a38      	ldr	r2, [pc, #224]	@ (8002970 <HAL_DAC_Start_DMA+0x178>)
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	4a37      	ldr	r2, [pc, #220]	@ (8002974 <HAL_DAC_Start_DMA+0x17c>)
 8002898:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80028a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_DAC_Start_DMA+0xc0>
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	2b04      	cmp	r3, #4
 80028b4:	d005      	beq.n	80028c2 <HAL_DAC_Start_DMA+0xca>
 80028b6:	e009      	b.n	80028cc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	3314      	adds	r3, #20
 80028be:	613b      	str	r3, [r7, #16]
        break;
 80028c0:	e009      	b.n	80028d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	3318      	adds	r3, #24
 80028c8:	613b      	str	r3, [r7, #16]
        break;
 80028ca:	e004      	b.n	80028d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	331c      	adds	r3, #28
 80028d2:	613b      	str	r3, [r7, #16]
        break;
 80028d4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d111      	bne.n	8002900 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6898      	ldr	r0, [r3, #8]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	693a      	ldr	r2, [r7, #16]
 80028f6:	f000 f9ef 	bl	8002cd8 <HAL_DMA_Start_IT>
 80028fa:	4603      	mov	r3, r0
 80028fc:	75fb      	strb	r3, [r7, #23]
 80028fe:	e010      	b.n	8002922 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 800290e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	68d8      	ldr	r0, [r3, #12]
 8002914:	6879      	ldr	r1, [r7, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	f000 f9dd 	bl	8002cd8 <HAL_DMA_Start_IT>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002928:	7dfb      	ldrb	r3, [r7, #23]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10c      	bne.n	8002948 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6819      	ldr	r1, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2201      	movs	r2, #1
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	430a      	orrs	r2, r1
 8002944:	601a      	str	r2, [r3, #0]
 8002946:	e005      	b.n	8002954 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002954:	7dfb      	ldrb	r3, [r7, #23]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	08002a67 	.word	0x08002a67
 8002964:	08002a89 	.word	0x08002a89
 8002968:	08002aa5 	.word	0x08002aa5
 800296c:	08002b0f 	.word	0x08002b0f
 8002970:	08002b31 	.word	0x08002b31
 8002974:	08002b4d 	.word	0x08002b4d

08002978 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	@ 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_DAC_ConfigChannel+0x1c>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e042      	b.n	8002a5a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	795b      	ldrb	r3, [r3, #5]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d101      	bne.n	80029e0 <HAL_DAC_ConfigChannel+0x2c>
 80029dc:	2302      	movs	r3, #2
 80029de:	e03c      	b.n	8002a5a <HAL_DAC_ConfigChannel+0xa6>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2201      	movs	r2, #1
 80029e4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2202      	movs	r2, #2
 80029ea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f003 0310 	and.w	r3, r3, #16
 80029fa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f003 0310 	and.w	r3, r3, #16
 8002a3c:	22c0      	movs	r2, #192	@ 0xc0
 8002a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a42:	43da      	mvns	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	400a      	ands	r2, r1
 8002a4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3724      	adds	r7, #36	@ 0x24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002a74:	68f8      	ldr	r0, [r7, #12]
 8002a76:	f7ff ff7f 	bl	8002978 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	711a      	strb	r2, [r3, #4]
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff ff78 	bl	800298c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f7ff ff6e 	bl	80029a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	711a      	strb	r2, [r3, #4]
}
 8002aca:	bf00      	nop
 8002acc:	3710      	adds	r7, #16
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff ffd8 	bl	8002ad2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	711a      	strb	r2, [r3, #4]
}
 8002b28:	bf00      	nop
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f7ff ffd1 	bl	8002ae6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b44:	bf00      	nop
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	f043 0204 	orr.w	r2, r3, #4
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f7ff ffc7 	bl	8002afa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	711a      	strb	r2, [r3, #4]
}
 8002b72:	bf00      	nop
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b086      	sub	sp, #24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b88:	f7ff f914 	bl	8001db4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e099      	b.n	8002ccc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f022 0201 	bic.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb8:	e00f      	b.n	8002bda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bba:	f7ff f8fb 	bl	8001db4 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d908      	bls.n	8002bda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e078      	b.n	8002ccc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e8      	bne.n	8002bba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	4b38      	ldr	r3, [pc, #224]	@ (8002cd4 <HAL_DMA_Init+0x158>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d107      	bne.n	8002c44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	695b      	ldr	r3, [r3, #20]
 8002c52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f023 0307 	bic.w	r3, r3, #7
 8002c5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d117      	bne.n	8002c9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00e      	beq.n	8002c9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fa6f 	bl	8003164 <DMA_CheckFifoParam>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2240      	movs	r2, #64	@ 0x40
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa26 	bl	80030f8 <DMA_CalcBaseAndBitshift>
 8002cac:	4603      	mov	r3, r0
 8002cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cb4:	223f      	movs	r2, #63	@ 0x3f
 8002cb6:	409a      	lsls	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	f010803f 	.word	0xf010803f

08002cd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	60b9      	str	r1, [r7, #8]
 8002ce2:	607a      	str	r2, [r7, #4]
 8002ce4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <HAL_DMA_Start_IT+0x26>
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	e040      	b.n	8002d80 <HAL_DMA_Start_IT+0xa8>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d12f      	bne.n	8002d72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2202      	movs	r2, #2
 8002d16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f000 f9b8 	bl	800309c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d30:	223f      	movs	r2, #63	@ 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0216 	orr.w	r2, r2, #22
 8002d46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d007      	beq.n	8002d60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0208 	orr.w	r2, r2, #8
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e005      	b.n	8002d7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d94:	4b8e      	ldr	r3, [pc, #568]	@ (8002fd0 <HAL_DMA_IRQHandler+0x248>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a8e      	ldr	r2, [pc, #568]	@ (8002fd4 <HAL_DMA_IRQHandler+0x24c>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	2208      	movs	r2, #8
 8002db4:	409a      	lsls	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01a      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d013      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f022 0204 	bic.w	r2, r2, #4
 8002dda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de0:	2208      	movs	r2, #8
 8002de2:	409a      	lsls	r2, r3
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dec:	f043 0201 	orr.w	r2, r3, #1
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df8:	2201      	movs	r2, #1
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d012      	beq.n	8002e2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e16:	2201      	movs	r2, #1
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	f043 0202 	orr.w	r2, r3, #2
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e2e:	2204      	movs	r2, #4
 8002e30:	409a      	lsls	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00b      	beq.n	8002e60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e58:	f043 0204 	orr.w	r2, r3, #4
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e64:	2210      	movs	r2, #16
 8002e66:	409a      	lsls	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d043      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03c      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e82:	2210      	movs	r2, #16
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d018      	beq.n	8002eca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d108      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d024      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
 8002eb6:	e01f      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d01b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
 8002ec8:	e016      	b.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d107      	bne.n	8002ee8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0208 	bic.w	r2, r2, #8
 8002ee6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002efc:	2220      	movs	r2, #32
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	f000 808f 	beq.w	8003028 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8087 	beq.w	8003028 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	2220      	movs	r2, #32
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b05      	cmp	r3, #5
 8002f30:	d136      	bne.n	8002fa0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0216 	bic.w	r2, r2, #22
 8002f40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d103      	bne.n	8002f62 <HAL_DMA_IRQHandler+0x1da>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0208 	bic.w	r2, r2, #8
 8002f70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	223f      	movs	r2, #63	@ 0x3f
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2201      	movs	r2, #1
 8002f82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d07e      	beq.n	8003094 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	4798      	blx	r3
        }
        return;
 8002f9e:	e079      	b.n	8003094 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d01d      	beq.n	8002fea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10d      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d031      	beq.n	8003028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	4798      	blx	r3
 8002fcc:	e02c      	b.n	8003028 <HAL_DMA_IRQHandler+0x2a0>
 8002fce:	bf00      	nop
 8002fd0:	20000000 	.word	0x20000000
 8002fd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d023      	beq.n	8003028 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
 8002fe8:	e01e      	b.n	8003028 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10f      	bne.n	8003018 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0210 	bic.w	r2, r2, #16
 8003006:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800302c:	2b00      	cmp	r3, #0
 800302e:	d032      	beq.n	8003096 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d022      	beq.n	8003082 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2205      	movs	r2, #5
 8003040:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3301      	adds	r3, #1
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	429a      	cmp	r2, r3
 800305e:	d307      	bcc.n	8003070 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f2      	bne.n	8003054 <HAL_DMA_IRQHandler+0x2cc>
 800306e:	e000      	b.n	8003072 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003070:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
 8003092:	e000      	b.n	8003096 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003094:	bf00      	nop
    }
  }
}
 8003096:	3718      	adds	r7, #24
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
 80030a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b40      	cmp	r3, #64	@ 0x40
 80030c8:	d108      	bne.n	80030dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030da:	e007      	b.n	80030ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	3b10      	subs	r3, #16
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <DMA_CalcBaseAndBitshift+0x64>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003112:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <DMA_CalcBaseAndBitshift+0x68>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4413      	add	r3, r2
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d909      	bls.n	800313a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800312e:	f023 0303 	bic.w	r3, r3, #3
 8003132:	1d1a      	adds	r2, r3, #4
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	659a      	str	r2, [r3, #88]	@ 0x58
 8003138:	e007      	b.n	800314a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003142:	f023 0303 	bic.w	r3, r3, #3
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	aaaaaaab 	.word	0xaaaaaaab
 8003160:	08005df0 	.word	0x08005df0

08003164 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003174:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d11f      	bne.n	80031be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d856      	bhi.n	8003232 <DMA_CheckFifoParam+0xce>
 8003184:	a201      	add	r2, pc, #4	@ (adr r2, 800318c <DMA_CheckFifoParam+0x28>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	0800319d 	.word	0x0800319d
 8003190:	080031af 	.word	0x080031af
 8003194:	0800319d 	.word	0x0800319d
 8003198:	08003233 	.word	0x08003233
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d046      	beq.n	8003236 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ac:	e043      	b.n	8003236 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031b6:	d140      	bne.n	800323a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031bc:	e03d      	b.n	800323a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031c6:	d121      	bne.n	800320c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d837      	bhi.n	800323e <DMA_CheckFifoParam+0xda>
 80031ce:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <DMA_CheckFifoParam+0x70>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	080031e5 	.word	0x080031e5
 80031d8:	080031eb 	.word	0x080031eb
 80031dc:	080031e5 	.word	0x080031e5
 80031e0:	080031fd 	.word	0x080031fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	73fb      	strb	r3, [r7, #15]
      break;
 80031e8:	e030      	b.n	800324c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d025      	beq.n	8003242 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031fa:	e022      	b.n	8003242 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003204:	d11f      	bne.n	8003246 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800320a:	e01c      	b.n	8003246 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b02      	cmp	r3, #2
 8003210:	d903      	bls.n	800321a <DMA_CheckFifoParam+0xb6>
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d003      	beq.n	8003220 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003218:	e018      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	73fb      	strb	r3, [r7, #15]
      break;
 800321e:	e015      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00e      	beq.n	800324a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	73fb      	strb	r3, [r7, #15]
      break;
 8003230:	e00b      	b.n	800324a <DMA_CheckFifoParam+0xe6>
      break;
 8003232:	bf00      	nop
 8003234:	e00a      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;
 8003236:	bf00      	nop
 8003238:	e008      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;
 800323a:	bf00      	nop
 800323c:	e006      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;
 800323e:	bf00      	nop
 8003240:	e004      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;
 8003242:	bf00      	nop
 8003244:	e002      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;   
 8003246:	bf00      	nop
 8003248:	e000      	b.n	800324c <DMA_CheckFifoParam+0xe8>
      break;
 800324a:	bf00      	nop
    }
  } 
  
  return status; 
 800324c:	7bfb      	ldrb	r3, [r7, #15]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800326a:	2300      	movs	r3, #0
 800326c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800326e:	2300      	movs	r3, #0
 8003270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	e165      	b.n	8003544 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003278:	2201      	movs	r2, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4013      	ands	r3, r2
 800328a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	429a      	cmp	r2, r3
 8003292:	f040 8154 	bne.w	800353e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d005      	beq.n	80032ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d130      	bne.n	8003310 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	2203      	movs	r2, #3
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	43db      	mvns	r3, r3
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	4013      	ands	r3, r2
 80032c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4313      	orrs	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032e4:	2201      	movs	r2, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	091b      	lsrs	r3, r3, #4
 80032fa:	f003 0201 	and.w	r2, r3, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 0303 	and.w	r3, r3, #3
 8003318:	2b03      	cmp	r3, #3
 800331a:	d017      	beq.n	800334c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	4313      	orrs	r3, r2
 8003344:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d123      	bne.n	80033a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	08da      	lsrs	r2, r3, #3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3208      	adds	r2, #8
 8003360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	220f      	movs	r2, #15
 8003370:	fa02 f303 	lsl.w	r3, r2, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	4013      	ands	r3, r2
 800337a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	691a      	ldr	r2, [r3, #16]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	08da      	lsrs	r2, r3, #3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3208      	adds	r2, #8
 800339a:	69b9      	ldr	r1, [r7, #24]
 800339c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0203 	and.w	r2, r3, #3
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80ae 	beq.w	800353e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b5d      	ldr	r3, [pc, #372]	@ (800355c <HAL_GPIO_Init+0x300>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	4a5c      	ldr	r2, [pc, #368]	@ (800355c <HAL_GPIO_Init+0x300>)
 80033ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80033f2:	4b5a      	ldr	r3, [pc, #360]	@ (800355c <HAL_GPIO_Init+0x300>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033fe:	4a58      	ldr	r2, [pc, #352]	@ (8003560 <HAL_GPIO_Init+0x304>)
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	089b      	lsrs	r3, r3, #2
 8003404:	3302      	adds	r3, #2
 8003406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	220f      	movs	r2, #15
 8003416:	fa02 f303 	lsl.w	r3, r2, r3
 800341a:	43db      	mvns	r3, r3
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	4013      	ands	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a4f      	ldr	r2, [pc, #316]	@ (8003564 <HAL_GPIO_Init+0x308>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d025      	beq.n	8003476 <HAL_GPIO_Init+0x21a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a4e      	ldr	r2, [pc, #312]	@ (8003568 <HAL_GPIO_Init+0x30c>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d01f      	beq.n	8003472 <HAL_GPIO_Init+0x216>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a4d      	ldr	r2, [pc, #308]	@ (800356c <HAL_GPIO_Init+0x310>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d019      	beq.n	800346e <HAL_GPIO_Init+0x212>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a4c      	ldr	r2, [pc, #304]	@ (8003570 <HAL_GPIO_Init+0x314>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <HAL_GPIO_Init+0x20e>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a4b      	ldr	r2, [pc, #300]	@ (8003574 <HAL_GPIO_Init+0x318>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00d      	beq.n	8003466 <HAL_GPIO_Init+0x20a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a4a      	ldr	r2, [pc, #296]	@ (8003578 <HAL_GPIO_Init+0x31c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <HAL_GPIO_Init+0x206>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a49      	ldr	r2, [pc, #292]	@ (800357c <HAL_GPIO_Init+0x320>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d101      	bne.n	800345e <HAL_GPIO_Init+0x202>
 800345a:	2306      	movs	r3, #6
 800345c:	e00c      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800345e:	2307      	movs	r3, #7
 8003460:	e00a      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003462:	2305      	movs	r3, #5
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003466:	2304      	movs	r3, #4
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x21c>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4935      	ldr	r1, [pc, #212]	@ (8003560 <HAL_GPIO_Init+0x304>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003496:	4b3a      	ldr	r3, [pc, #232]	@ (8003580 <HAL_GPIO_Init+0x324>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ba:	4a31      	ldr	r2, [pc, #196]	@ (8003580 <HAL_GPIO_Init+0x324>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003580 <HAL_GPIO_Init+0x324>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e4:	4a26      	ldr	r2, [pc, #152]	@ (8003580 <HAL_GPIO_Init+0x324>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ea:	4b25      	ldr	r3, [pc, #148]	@ (8003580 <HAL_GPIO_Init+0x324>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350e:	4a1c      	ldr	r2, [pc, #112]	@ (8003580 <HAL_GPIO_Init+0x324>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003514:	4b1a      	ldr	r3, [pc, #104]	@ (8003580 <HAL_GPIO_Init+0x324>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003538:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_GPIO_Init+0x324>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f ae96 	bls.w	8003278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3724      	adds	r7, #36	@ 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40013800 	.word	0x40013800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021000 	.word	0x40021000
 8003578:	40021400 	.word	0x40021400
 800357c:	40021800 	.word	0x40021800
 8003580:	40013c00 	.word	0x40013c00

08003584 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e0cc      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003598:	4b68      	ldr	r3, [pc, #416]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d90c      	bls.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a6:	4b65      	ldr	r3, [pc, #404]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ae:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0b8      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035d8:	4b59      	ldr	r3, [pc, #356]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	4a58      	ldr	r2, [pc, #352]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0308 	and.w	r3, r3, #8
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d005      	beq.n	80035fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f0:	4b53      	ldr	r3, [pc, #332]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a52      	ldr	r2, [pc, #328]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035fc:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	494d      	ldr	r1, [pc, #308]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d044      	beq.n	80036a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b01      	cmp	r3, #1
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b47      	ldr	r3, [pc, #284]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d119      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b02      	cmp	r3, #2
 8003638:	d003      	beq.n	8003642 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800363e:	2b03      	cmp	r3, #3
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	4b3f      	ldr	r3, [pc, #252]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d109      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e06f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003652:	4b3b      	ldr	r3, [pc, #236]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e067      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003662:	4b37      	ldr	r3, [pc, #220]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	4934      	ldr	r1, [pc, #208]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003674:	f7fe fb9e 	bl	8001db4 <HAL_GetTick>
 8003678:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367a:	e00a      	b.n	8003692 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800367c:	f7fe fb9a 	bl	8001db4 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368a:	4293      	cmp	r3, r2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04f      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	4b2b      	ldr	r3, [pc, #172]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 020c 	and.w	r2, r3, #12
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d1eb      	bne.n	800367c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a4:	4b25      	ldr	r3, [pc, #148]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d20c      	bcs.n	80036cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b22      	ldr	r3, [pc, #136]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ba:	4b20      	ldr	r3, [pc, #128]	@ (800373c <HAL_RCC_ClockConfig+0x1b8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 030f 	and.w	r3, r3, #15
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e032      	b.n	8003732 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036d8:	4b19      	ldr	r3, [pc, #100]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	4916      	ldr	r1, [pc, #88]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036f6:	4b12      	ldr	r3, [pc, #72]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	00db      	lsls	r3, r3, #3
 8003704:	490e      	ldr	r1, [pc, #56]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370a:	f000 f887 	bl	800381c <HAL_RCC_GetSysClockFreq>
 800370e:	4602      	mov	r2, r0
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	490a      	ldr	r1, [pc, #40]	@ (8003744 <HAL_RCC_ClockConfig+0x1c0>)
 800371c:	5ccb      	ldrb	r3, [r1, r3]
 800371e:	fa22 f303 	lsr.w	r3, r2, r3
 8003722:	4a09      	ldr	r2, [pc, #36]	@ (8003748 <HAL_RCC_ClockConfig+0x1c4>)
 8003724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003726:	4b09      	ldr	r3, [pc, #36]	@ (800374c <HAL_RCC_ClockConfig+0x1c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f9da 	bl	8001ae4 <HAL_InitTick>

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3710      	adds	r7, #16
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40023c00 	.word	0x40023c00
 8003740:	40023800 	.word	0x40023800
 8003744:	08005dd8 	.word	0x08005dd8
 8003748:	20000000 	.word	0x20000000
 800374c:	20000004 	.word	0x20000004

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b03      	ldr	r3, [pc, #12]	@ (8003764 <HAL_RCC_GetHCLKFreq+0x14>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	20000000 	.word	0x20000000

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800376c:	f7ff fff0 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003770:	4602      	mov	r2, r0
 8003772:	4b05      	ldr	r3, [pc, #20]	@ (8003788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	0a9b      	lsrs	r3, r3, #10
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	4903      	ldr	r1, [pc, #12]	@ (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 800377e:	5ccb      	ldrb	r3, [r1, r3]
 8003780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003784:	4618      	mov	r0, r3
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40023800 	.word	0x40023800
 800378c:	08005de8 	.word	0x08005de8

08003790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003794:	f7ff ffdc 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003798:	4602      	mov	r2, r0
 800379a:	4b05      	ldr	r3, [pc, #20]	@ (80037b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	0b5b      	lsrs	r3, r3, #13
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	4903      	ldr	r1, [pc, #12]	@ (80037b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a6:	5ccb      	ldrb	r3, [r1, r3]
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40023800 	.word	0x40023800
 80037b4:	08005de8 	.word	0x08005de8

080037b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	220f      	movs	r2, #15
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037c8:	4b12      	ldr	r3, [pc, #72]	@ (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_GetClockConfig+0x5c>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037fa:	4b07      	ldr	r3, [pc, #28]	@ (8003818 <HAL_RCC_GetClockConfig+0x60>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	601a      	str	r2, [r3, #0]
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40023c00 	.word	0x40023c00

0800381c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800381c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003820:	b0a6      	sub	sp, #152	@ 0x98
 8003822:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800382a:	2300      	movs	r3, #0
 800382c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800383c:	2300      	movs	r3, #0
 800383e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003842:	4bc8      	ldr	r3, [pc, #800]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 030c 	and.w	r3, r3, #12
 800384a:	2b0c      	cmp	r3, #12
 800384c:	f200 817e 	bhi.w	8003b4c <HAL_RCC_GetSysClockFreq+0x330>
 8003850:	a201      	add	r2, pc, #4	@ (adr r2, 8003858 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800388d 	.word	0x0800388d
 800385c:	08003b4d 	.word	0x08003b4d
 8003860:	08003b4d 	.word	0x08003b4d
 8003864:	08003b4d 	.word	0x08003b4d
 8003868:	08003895 	.word	0x08003895
 800386c:	08003b4d 	.word	0x08003b4d
 8003870:	08003b4d 	.word	0x08003b4d
 8003874:	08003b4d 	.word	0x08003b4d
 8003878:	0800389d 	.word	0x0800389d
 800387c:	08003b4d 	.word	0x08003b4d
 8003880:	08003b4d 	.word	0x08003b4d
 8003884:	08003b4d 	.word	0x08003b4d
 8003888:	08003a07 	.word	0x08003a07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800388c:	4bb6      	ldr	r3, [pc, #728]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x34c>)
 800388e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003892:	e15f      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4bb5      	ldr	r3, [pc, #724]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003896:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800389a:	e15b      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800389c:	4bb1      	ldr	r3, [pc, #708]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038a8:	4bae      	ldr	r3, [pc, #696]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d031      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038b4:	4bab      	ldr	r3, [pc, #684]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	2200      	movs	r2, #0
 80038bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80038c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80038c8:	2300      	movs	r3, #0
 80038ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80038cc:	4ba7      	ldr	r3, [pc, #668]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 80038ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80038d2:	462a      	mov	r2, r5
 80038d4:	fb03 f202 	mul.w	r2, r3, r2
 80038d8:	2300      	movs	r3, #0
 80038da:	4621      	mov	r1, r4
 80038dc:	fb01 f303 	mul.w	r3, r1, r3
 80038e0:	4413      	add	r3, r2
 80038e2:	4aa2      	ldr	r2, [pc, #648]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 80038e4:	4621      	mov	r1, r4
 80038e6:	fba1 1202 	umull	r1, r2, r1, r2
 80038ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80038ec:	460a      	mov	r2, r1
 80038ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80038f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80038f2:	4413      	add	r3, r2
 80038f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80038f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80038fa:	2200      	movs	r2, #0
 80038fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80038fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003900:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003904:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003908:	f7fd f918 	bl	8000b3c <__aeabi_uldivmod>
 800390c:	4602      	mov	r2, r0
 800390e:	460b      	mov	r3, r1
 8003910:	4613      	mov	r3, r2
 8003912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003916:	e064      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b92      	ldr	r3, [pc, #584]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	653b      	str	r3, [r7, #80]	@ 0x50
 8003922:	657a      	str	r2, [r7, #84]	@ 0x54
 8003924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800392a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800392c:	2300      	movs	r3, #0
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003930:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003934:	4622      	mov	r2, r4
 8003936:	462b      	mov	r3, r5
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4621      	mov	r1, r4
 800394e:	1a51      	subs	r1, r2, r1
 8003950:	6139      	str	r1, [r7, #16]
 8003952:	4629      	mov	r1, r5
 8003954:	eb63 0301 	sbc.w	r3, r3, r1
 8003958:	617b      	str	r3, [r7, #20]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003966:	4659      	mov	r1, fp
 8003968:	018b      	lsls	r3, r1, #6
 800396a:	4651      	mov	r1, sl
 800396c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003970:	4651      	mov	r1, sl
 8003972:	018a      	lsls	r2, r1, #6
 8003974:	4651      	mov	r1, sl
 8003976:	ebb2 0801 	subs.w	r8, r2, r1
 800397a:	4659      	mov	r1, fp
 800397c:	eb63 0901 	sbc.w	r9, r3, r1
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800398c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003990:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003994:	4690      	mov	r8, r2
 8003996:	4699      	mov	r9, r3
 8003998:	4623      	mov	r3, r4
 800399a:	eb18 0303 	adds.w	r3, r8, r3
 800399e:	60bb      	str	r3, [r7, #8]
 80039a0:	462b      	mov	r3, r5
 80039a2:	eb49 0303 	adc.w	r3, r9, r3
 80039a6:	60fb      	str	r3, [r7, #12]
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039b4:	4629      	mov	r1, r5
 80039b6:	028b      	lsls	r3, r1, #10
 80039b8:	4621      	mov	r1, r4
 80039ba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039be:	4621      	mov	r1, r4
 80039c0:	028a      	lsls	r2, r1, #10
 80039c2:	4610      	mov	r0, r2
 80039c4:	4619      	mov	r1, r3
 80039c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039ca:	2200      	movs	r2, #0
 80039cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80039ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80039d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80039d4:	f7fd f8b2 	bl	8000b3c <__aeabi_uldivmod>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	4613      	mov	r3, r2
 80039de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80039e2:	4b60      	ldr	r3, [pc, #384]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	0c1b      	lsrs	r3, r3, #16
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	3301      	adds	r3, #1
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80039f4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80039fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003a04:	e0a6      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a06:	4b57      	ldr	r3, [pc, #348]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a12:	4b54      	ldr	r3, [pc, #336]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d02a      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b51      	ldr	r3, [pc, #324]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a30:	2100      	movs	r1, #0
 8003a32:	4b4e      	ldr	r3, [pc, #312]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a34:	fb03 f201 	mul.w	r2, r3, r1
 8003a38:	2300      	movs	r3, #0
 8003a3a:	fb00 f303 	mul.w	r3, r0, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	4a4a      	ldr	r2, [pc, #296]	@ (8003b6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003a42:	fba0 1202 	umull	r1, r2, r0, r2
 8003a46:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a48:	460a      	mov	r2, r1
 8003a4a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003a4c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003a4e:	4413      	add	r3, r2
 8003a50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003a52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a56:	2200      	movs	r2, #0
 8003a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a5a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003a5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a60:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003a64:	f7fd f86a 	bl	8000b3c <__aeabi_uldivmod>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a72:	e05b      	b.n	8003b2c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a74:	4b3b      	ldr	r3, [pc, #236]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	099b      	lsrs	r3, r3, #6
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	2300      	movs	r3, #0
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a90:	4642      	mov	r2, r8
 8003a92:	464b      	mov	r3, r9
 8003a94:	f04f 0000 	mov.w	r0, #0
 8003a98:	f04f 0100 	mov.w	r1, #0
 8003a9c:	0159      	lsls	r1, r3, #5
 8003a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003aa2:	0150      	lsls	r0, r2, #5
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4641      	mov	r1, r8
 8003aaa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003aae:	4649      	mov	r1, r9
 8003ab0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ab4:	f04f 0200 	mov.w	r2, #0
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ac0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ac4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ac8:	ebb2 040a 	subs.w	r4, r2, sl
 8003acc:	eb63 050b 	sbc.w	r5, r3, fp
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	00eb      	lsls	r3, r5, #3
 8003ada:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ade:	00e2      	lsls	r2, r4, #3
 8003ae0:	4614      	mov	r4, r2
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	4643      	mov	r3, r8
 8003ae6:	18e3      	adds	r3, r4, r3
 8003ae8:	603b      	str	r3, [r7, #0]
 8003aea:	464b      	mov	r3, r9
 8003aec:	eb45 0303 	adc.w	r3, r5, r3
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003afe:	4629      	mov	r1, r5
 8003b00:	028b      	lsls	r3, r1, #10
 8003b02:	4621      	mov	r1, r4
 8003b04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b08:	4621      	mov	r1, r4
 8003b0a:	028a      	lsls	r2, r1, #10
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b14:	2200      	movs	r2, #0
 8003b16:	61bb      	str	r3, [r7, #24]
 8003b18:	61fa      	str	r2, [r7, #28]
 8003b1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b1e:	f7fd f80d 	bl	8000b3c <__aeabi_uldivmod>
 8003b22:	4602      	mov	r2, r0
 8003b24:	460b      	mov	r3, r1
 8003b26:	4613      	mov	r3, r2
 8003b28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	0f1b      	lsrs	r3, r3, #28
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3798      	adds	r7, #152	@ 0x98
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	017d7840 	.word	0x017d7840

08003b70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e28d      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 8083 	beq.w	8003c96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003b90:	4b94      	ldr	r3, [pc, #592]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d019      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003b9c:	4b91      	ldr	r3, [pc, #580]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d106      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ba8:	4b8e      	ldr	r3, [pc, #568]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4b8b      	ldr	r3, [pc, #556]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003bbe:	2b0c      	cmp	r3, #12
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b88      	ldr	r3, [pc, #544]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b84      	ldr	r3, [pc, #528]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x124>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e25a      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x90>
 8003bf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a7b      	ldr	r2, [pc, #492]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xcc>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0xb4>
 8003c0a:	4b76      	ldr	r3, [pc, #472]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a75      	ldr	r2, [pc, #468]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b73      	ldr	r3, [pc, #460]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a72      	ldr	r2, [pc, #456]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xcc>
 8003c24:	4b6f      	ldr	r3, [pc, #444]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a6e      	ldr	r2, [pc, #440]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b6c      	ldr	r3, [pc, #432]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a6b      	ldr	r2, [pc, #428]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c44:	f7fe f8b6 	bl	8001db4 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7fe f8b2 	bl	8001db4 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e21f      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b61      	ldr	r3, [pc, #388]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xdc>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c6c:	f7fe f8a2 	bl	8001db4 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fe f89e 	bl	8001db4 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e20b      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b57      	ldr	r3, [pc, #348]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x104>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d06f      	beq.n	8003d82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003ca2:	4b50      	ldr	r3, [pc, #320]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d017      	beq.n	8003cde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cae:	4b4d      	ldr	r3, [pc, #308]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d105      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cba:	4b4a      	ldr	r3, [pc, #296]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cc6:	4b47      	ldr	r3, [pc, #284]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d11c      	bne.n	8003d0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd2:	4b44      	ldr	r3, [pc, #272]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d116      	bne.n	8003d0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cde:	4b41      	ldr	r3, [pc, #260]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d005      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x186>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d001      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e1d3      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4937      	ldr	r1, [pc, #220]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d0a:	e03a      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d020      	beq.n	8003d56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d14:	4b34      	ldr	r3, [pc, #208]	@ (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1a:	f7fe f84b 	bl	8001db4 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d22:	f7fe f847 	bl	8001db4 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e1b4      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d34:	4b2b      	ldr	r3, [pc, #172]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d40:	4b28      	ldr	r3, [pc, #160]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	00db      	lsls	r3, r3, #3
 8003d4e:	4925      	ldr	r1, [pc, #148]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	600b      	str	r3, [r1, #0]
 8003d54:	e015      	b.n	8003d82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d56:	4b24      	ldr	r3, [pc, #144]	@ (8003de8 <HAL_RCC_OscConfig+0x278>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe f82a 	bl	8001db4 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d64:	f7fe f826 	bl	8001db4 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e193      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d036      	beq.n	8003dfc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d016      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d96:	4b15      	ldr	r3, [pc, #84]	@ (8003dec <HAL_RCC_OscConfig+0x27c>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9c:	f7fe f80a 	bl	8001db4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da4:	f7fe f806 	bl	8001db4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e173      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db6:	4b0b      	ldr	r3, [pc, #44]	@ (8003de4 <HAL_RCC_OscConfig+0x274>)
 8003db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x234>
 8003dc2:	e01b      	b.n	8003dfc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dc4:	4b09      	ldr	r3, [pc, #36]	@ (8003dec <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fff3 	bl	8001db4 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd0:	e00e      	b.n	8003df0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd2:	f7fd ffef 	bl	8001db4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d907      	bls.n	8003df0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e15c      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 8003de4:	40023800 	.word	0x40023800
 8003de8:	42470000 	.word	0x42470000
 8003dec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df0:	4b8a      	ldr	r3, [pc, #552]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003df2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1ea      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8097 	beq.w	8003f38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e0e:	4b83      	ldr	r3, [pc, #524]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10f      	bne.n	8003e3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]
 8003e1e:	4b7f      	ldr	r3, [pc, #508]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e22:	4a7e      	ldr	r2, [pc, #504]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e32:	60bb      	str	r3, [r7, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e36:	2301      	movs	r3, #1
 8003e38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3a:	4b79      	ldr	r3, [pc, #484]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d118      	bne.n	8003e78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e46:	4b76      	ldr	r3, [pc, #472]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a75      	ldr	r2, [pc, #468]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e52:	f7fd ffaf 	bl	8001db4 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e5a:	f7fd ffab 	bl	8001db4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e118      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004020 <HAL_RCC_OscConfig+0x4b0>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d106      	bne.n	8003e8e <HAL_RCC_OscConfig+0x31e>
 8003e80:	4b66      	ldr	r3, [pc, #408]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e84:	4a65      	ldr	r2, [pc, #404]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e86:	f043 0301 	orr.w	r3, r3, #1
 8003e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8c:	e01c      	b.n	8003ec8 <HAL_RCC_OscConfig+0x358>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d10c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x340>
 8003e96:	4b61      	ldr	r3, [pc, #388]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9a:	4a60      	ldr	r2, [pc, #384]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003e9c:	f043 0304 	orr.w	r3, r3, #4
 8003ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea2:	4b5e      	ldr	r3, [pc, #376]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	4a5d      	ldr	r2, [pc, #372]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ea8:	f043 0301 	orr.w	r3, r3, #1
 8003eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003eae:	e00b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x358>
 8003eb0:	4b5a      	ldr	r3, [pc, #360]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eb4:	4a59      	ldr	r2, [pc, #356]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ebc:	4b57      	ldr	r3, [pc, #348]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec0:	4a56      	ldr	r2, [pc, #344]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ec2:	f023 0304 	bic.w	r3, r3, #4
 8003ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d015      	beq.n	8003efc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed0:	f7fd ff70 	bl	8001db4 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	e00a      	b.n	8003eee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed8:	f7fd ff6c 	bl	8001db4 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e0d7      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	4b4b      	ldr	r3, [pc, #300]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ee      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x368>
 8003efa:	e014      	b.n	8003f26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efc:	f7fd ff5a 	bl	8001db4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fd ff56 	bl	8001db4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e0c1      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f1a:	4b40      	ldr	r3, [pc, #256]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ee      	bne.n	8003f04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b3b      	ldr	r3, [pc, #236]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f30:	4a3a      	ldr	r2, [pc, #232]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80ad 	beq.w	800409c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f42:	4b36      	ldr	r3, [pc, #216]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d060      	beq.n	8004010 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d145      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b33      	ldr	r3, [pc, #204]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fd ff2a 	bl	8001db4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fd ff26 	bl	8001db4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e093      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b29      	ldr	r3, [pc, #164]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	69da      	ldr	r2, [r3, #28]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	019b      	lsls	r3, r3, #6
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f98:	085b      	lsrs	r3, r3, #1
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	041b      	lsls	r3, r3, #16
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	061b      	lsls	r3, r3, #24
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	071b      	lsls	r3, r3, #28
 8003fae:	491b      	ldr	r1, [pc, #108]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fba:	f7fd fefb 	bl	8001db4 <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fd fef7 	bl	8001db4 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e064      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fd4:	4b11      	ldr	r3, [pc, #68]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0f0      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x452>
 8003fe0:	e05c      	b.n	800409c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_RCC_OscConfig+0x4b4>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe8:	f7fd fee4 	bl	8001db4 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff0:	f7fd fee0 	bl	8001db4 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b02      	cmp	r3, #2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e04d      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004002:	4b06      	ldr	r3, [pc, #24]	@ (800401c <HAL_RCC_OscConfig+0x4ac>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1f0      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x480>
 800400e:	e045      	b.n	800409c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d107      	bne.n	8004028 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e040      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
 800401c:	40023800 	.word	0x40023800
 8004020:	40007000 	.word	0x40007000
 8004024:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004028:	4b1f      	ldr	r3, [pc, #124]	@ (80040a8 <HAL_RCC_OscConfig+0x538>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d030      	beq.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004040:	429a      	cmp	r2, r3
 8004042:	d129      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800404e:	429a      	cmp	r2, r3
 8004050:	d122      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004058:	4013      	ands	r3, r2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800405e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	4293      	cmp	r3, r2
 8004062:	d119      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406e:	085b      	lsrs	r3, r3, #1
 8004070:	3b01      	subs	r3, #1
 8004072:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004074:	429a      	cmp	r2, r3
 8004076:	d10f      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004084:	429a      	cmp	r2, r3
 8004086:	d107      	bne.n	8004098 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023800 	.word	0x40023800

080040ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e041      	b.n	8004142 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fc9e 	bl	8001a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3304      	adds	r3, #4
 80040e8:	4619      	mov	r1, r3
 80040ea:	4610      	mov	r0, r2
 80040ec:	f000 fae6 	bl	80046bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3708      	adds	r7, #8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
	...

0800414c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800415a:	b2db      	uxtb	r3, r3
 800415c:	2b01      	cmp	r3, #1
 800415e:	d001      	beq.n	8004164 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e046      	b.n	80041f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2202      	movs	r2, #2
 8004168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a23      	ldr	r2, [pc, #140]	@ (8004200 <HAL_TIM_Base_Start+0xb4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d022      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800417e:	d01d      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <HAL_TIM_Base_Start+0xb8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d018      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <HAL_TIM_Base_Start+0xbc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d013      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a1c      	ldr	r2, [pc, #112]	@ (800420c <HAL_TIM_Base_Start+0xc0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d00e      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004210 <HAL_TIM_Base_Start+0xc4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d009      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a19      	ldr	r2, [pc, #100]	@ (8004214 <HAL_TIM_Base_Start+0xc8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d004      	beq.n	80041bc <HAL_TIM_Base_Start+0x70>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a18      	ldr	r2, [pc, #96]	@ (8004218 <HAL_TIM_Base_Start+0xcc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d111      	bne.n	80041e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b06      	cmp	r3, #6
 80041cc:	d010      	beq.n	80041f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f042 0201 	orr.w	r2, r2, #1
 80041dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041de:	e007      	b.n	80041f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f042 0201 	orr.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40010400 	.word	0x40010400
 8004214:	40014000 	.word	0x40014000
 8004218:	40001800 	.word	0x40001800

0800421c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b01      	cmp	r3, #1
 800422e:	d001      	beq.n	8004234 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e04e      	b.n	80042d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d022      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425e:	d01d      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a1f      	ldr	r2, [pc, #124]	@ (80042e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d018      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1e      	ldr	r2, [pc, #120]	@ (80042e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d013      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a1c      	ldr	r2, [pc, #112]	@ (80042ec <HAL_TIM_Base_Start_IT+0xd0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00e      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a1b      	ldr	r2, [pc, #108]	@ (80042f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d009      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a19      	ldr	r2, [pc, #100]	@ (80042f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d004      	beq.n	800429c <HAL_TIM_Base_Start_IT+0x80>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a18      	ldr	r2, [pc, #96]	@ (80042f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d111      	bne.n	80042c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b06      	cmp	r3, #6
 80042ac:	d010      	beq.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f042 0201 	orr.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042be:	e007      	b.n	80042d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	40010000 	.word	0x40010000
 80042e4:	40000400 	.word	0x40000400
 80042e8:	40000800 	.word	0x40000800
 80042ec:	40000c00 	.word	0x40000c00
 80042f0:	40010400 	.word	0x40010400
 80042f4:	40014000 	.word	0x40014000
 80042f8:	40001800 	.word	0x40001800

080042fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d020      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d01b      	beq.n	8004360 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f06f 0202 	mvn.w	r2, #2
 8004330:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	f003 0303 	and.w	r3, r3, #3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f999 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 800434c:	e005      	b.n	800435a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 f98b 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 f99c 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f003 0304 	and.w	r3, r3, #4
 8004366:	2b00      	cmp	r3, #0
 8004368:	d020      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f06f 0204 	mvn.w	r2, #4
 800437c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2202      	movs	r2, #2
 8004382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f973 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 8004398:	e005      	b.n	80043a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 f965 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f976 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d020      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f003 0308 	and.w	r3, r3, #8
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01b      	beq.n	80043f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f06f 0208 	mvn.w	r2, #8
 80043c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2204      	movs	r2, #4
 80043ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	f003 0303 	and.w	r3, r3, #3
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f94d 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 80043e4:	e005      	b.n	80043f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f93f 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f950 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d020      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d01b      	beq.n	8004444 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0210 	mvn.w	r2, #16
 8004414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2208      	movs	r2, #8
 800441a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f927 	bl	800467e <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f919 	bl	800466a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f92a 	bl	8004692 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00c      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f06f 0201 	mvn.w	r2, #1
 8004460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fd f994 	bl	8001790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00c      	beq.n	800448c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d007      	beq.n	800448c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fade 	bl	8004a48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00c      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800449c:	2b00      	cmp	r3, #0
 800449e:	d007      	beq.n	80044b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80044a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f8fb 	bl	80046a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 0320 	and.w	r3, r3, #32
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f06f 0220 	mvn.w	r2, #32
 80044cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 fab0 	bl	8004a34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_TIM_ConfigClockSource+0x1c>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e0b4      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x186>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800451e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68ba      	ldr	r2, [r7, #8]
 8004526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004530:	d03e      	beq.n	80045b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004536:	f200 8087 	bhi.w	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 800453a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453e:	f000 8086 	beq.w	800464e <HAL_TIM_ConfigClockSource+0x172>
 8004542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004546:	d87f      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004548:	2b70      	cmp	r3, #112	@ 0x70
 800454a:	d01a      	beq.n	8004582 <HAL_TIM_ConfigClockSource+0xa6>
 800454c:	2b70      	cmp	r3, #112	@ 0x70
 800454e:	d87b      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004550:	2b60      	cmp	r3, #96	@ 0x60
 8004552:	d050      	beq.n	80045f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004554:	2b60      	cmp	r3, #96	@ 0x60
 8004556:	d877      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004558:	2b50      	cmp	r3, #80	@ 0x50
 800455a:	d03c      	beq.n	80045d6 <HAL_TIM_ConfigClockSource+0xfa>
 800455c:	2b50      	cmp	r3, #80	@ 0x50
 800455e:	d873      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004560:	2b40      	cmp	r3, #64	@ 0x40
 8004562:	d058      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0x13a>
 8004564:	2b40      	cmp	r3, #64	@ 0x40
 8004566:	d86f      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004568:	2b30      	cmp	r3, #48	@ 0x30
 800456a:	d064      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 800456c:	2b30      	cmp	r3, #48	@ 0x30
 800456e:	d86b      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004570:	2b20      	cmp	r3, #32
 8004572:	d060      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 8004574:	2b20      	cmp	r3, #32
 8004576:	d867      	bhi.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
 8004578:	2b00      	cmp	r3, #0
 800457a:	d05c      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 800457c:	2b10      	cmp	r3, #16
 800457e:	d05a      	beq.n	8004636 <HAL_TIM_ConfigClockSource+0x15a>
 8004580:	e062      	b.n	8004648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004592:	f000 f9b3 	bl	80048fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80045a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	609a      	str	r2, [r3, #8]
      break;
 80045ae:	e04f      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80045c0:	f000 f99c 	bl	80048fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689a      	ldr	r2, [r3, #8]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045d2:	609a      	str	r2, [r3, #8]
      break;
 80045d4:	e03c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045e2:	461a      	mov	r2, r3
 80045e4:	f000 f910 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2150      	movs	r1, #80	@ 0x50
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f969 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 80045f4:	e02c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004602:	461a      	mov	r2, r3
 8004604:	f000 f92f 	bl	8004866 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2160      	movs	r1, #96	@ 0x60
 800460e:	4618      	mov	r0, r3
 8004610:	f000 f959 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004614:	e01c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004622:	461a      	mov	r2, r3
 8004624:	f000 f8f0 	bl	8004808 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2140      	movs	r1, #64	@ 0x40
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f949 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004634:	e00c      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 f940 	bl	80048c6 <TIM_ITRx_SetConfig>
      break;
 8004646:	e003      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	73fb      	strb	r3, [r7, #15]
      break;
 800464c:	e000      	b.n	8004650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800464e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr

0800467e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004692:	b480      	push	{r7}
 8004694:	b083      	sub	sp, #12
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800469a:	bf00      	nop
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046ae:	bf00      	nop
 80046b0:	370c      	adds	r7, #12
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
	...

080046bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046bc:	b480      	push	{r7}
 80046be:	b085      	sub	sp, #20
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a43      	ldr	r2, [pc, #268]	@ (80047dc <TIM_Base_SetConfig+0x120>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046da:	d00f      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a40      	ldr	r2, [pc, #256]	@ (80047e0 <TIM_Base_SetConfig+0x124>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00b      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3f      	ldr	r2, [pc, #252]	@ (80047e4 <TIM_Base_SetConfig+0x128>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d007      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a3e      	ldr	r2, [pc, #248]	@ (80047e8 <TIM_Base_SetConfig+0x12c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d003      	beq.n	80046fc <TIM_Base_SetConfig+0x40>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a3d      	ldr	r2, [pc, #244]	@ (80047ec <TIM_Base_SetConfig+0x130>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d108      	bne.n	800470e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a32      	ldr	r2, [pc, #200]	@ (80047dc <TIM_Base_SetConfig+0x120>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800471c:	d027      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a2f      	ldr	r2, [pc, #188]	@ (80047e0 <TIM_Base_SetConfig+0x124>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d023      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2e      	ldr	r2, [pc, #184]	@ (80047e4 <TIM_Base_SetConfig+0x128>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d01f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2d      	ldr	r2, [pc, #180]	@ (80047e8 <TIM_Base_SetConfig+0x12c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2c      	ldr	r2, [pc, #176]	@ (80047ec <TIM_Base_SetConfig+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d017      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2b      	ldr	r2, [pc, #172]	@ (80047f0 <TIM_Base_SetConfig+0x134>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2a      	ldr	r2, [pc, #168]	@ (80047f4 <TIM_Base_SetConfig+0x138>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a29      	ldr	r2, [pc, #164]	@ (80047f8 <TIM_Base_SetConfig+0x13c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a28      	ldr	r2, [pc, #160]	@ (80047fc <TIM_Base_SetConfig+0x140>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a27      	ldr	r2, [pc, #156]	@ (8004800 <TIM_Base_SetConfig+0x144>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0xb2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a26      	ldr	r2, [pc, #152]	@ (8004804 <TIM_Base_SetConfig+0x148>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a0e      	ldr	r2, [pc, #56]	@ (80047dc <TIM_Base_SetConfig+0x120>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d003      	beq.n	80047ae <TIM_Base_SetConfig+0xf2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a10      	ldr	r2, [pc, #64]	@ (80047ec <TIM_Base_SetConfig+0x130>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d103      	bne.n	80047b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	691a      	ldr	r2, [r3, #16]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f043 0204 	orr.w	r2, r3, #4
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	601a      	str	r2, [r3, #0]
}
 80047ce:	bf00      	nop
 80047d0:	3714      	adds	r7, #20
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40000800 	.word	0x40000800
 80047e8:	40000c00 	.word	0x40000c00
 80047ec:	40010400 	.word	0x40010400
 80047f0:	40014000 	.word	0x40014000
 80047f4:	40014400 	.word	0x40014400
 80047f8:	40014800 	.word	0x40014800
 80047fc:	40001800 	.word	0x40001800
 8004800:	40001c00 	.word	0x40001c00
 8004804:	40002000 	.word	0x40002000

08004808 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004808:	b480      	push	{r7}
 800480a:	b087      	sub	sp, #28
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0201 	bic.w	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004832:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	011b      	lsls	r3, r3, #4
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f023 030a 	bic.w	r3, r3, #10
 8004844:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	621a      	str	r2, [r3, #32]
}
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004866:	b480      	push	{r7}
 8004868:	b087      	sub	sp, #28
 800486a:	af00      	add	r7, sp, #0
 800486c:	60f8      	str	r0, [r7, #12]
 800486e:	60b9      	str	r1, [r7, #8]
 8004870:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	f023 0210 	bic.w	r2, r3, #16
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004890:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	031b      	lsls	r3, r3, #12
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	621a      	str	r2, [r3, #32]
}
 80048ba:	bf00      	nop
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f043 0307 	orr.w	r3, r3, #7
 80048e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	609a      	str	r2, [r3, #8]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004916:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	021a      	lsls	r2, r3, #8
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	431a      	orrs	r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4313      	orrs	r3, r2
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	609a      	str	r2, [r3, #8]
}
 8004930:	bf00      	nop
 8004932:	371c      	adds	r7, #28
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004950:	2302      	movs	r3, #2
 8004952:	e05a      	b.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800497a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68fa      	ldr	r2, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a21      	ldr	r2, [pc, #132]	@ (8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d022      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a0:	d01d      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d018      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004a24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a18      	ldr	r2, [pc, #96]	@ (8004a28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a15      	ldr	r2, [pc, #84]	@ (8004a30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10c      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68ba      	ldr	r2, [r7, #8]
 80049f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	40010000 	.word	0x40010000
 8004a1c:	40000400 	.word	0x40000400
 8004a20:	40000800 	.word	0x40000800
 8004a24:	40000c00 	.word	0x40000c00
 8004a28:	40010400 	.word	0x40010400
 8004a2c:	40014000 	.word	0x40014000
 8004a30:	40001800 	.word	0x40001800

08004a34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e042      	b.n	8004af4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fc ffe6 	bl	8001a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2224      	movs	r2, #36	@ 0x24
 8004a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f973 	bl	8004d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	691a      	ldr	r2, [r3, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ab4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	695a      	ldr	r2, [r3, #20]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ac4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68da      	ldr	r2, [r3, #12]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ad4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b08a      	sub	sp, #40	@ 0x28
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	60f8      	str	r0, [r7, #12]
 8004b04:	60b9      	str	r1, [r7, #8]
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	4613      	mov	r3, r2
 8004b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d175      	bne.n	8004c08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <HAL_UART_Transmit+0x2c>
 8004b22:	88fb      	ldrh	r3, [r7, #6]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e06e      	b.n	8004c0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2221      	movs	r2, #33	@ 0x21
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b3a:	f7fd f93b 	bl	8001db4 <HAL_GetTick>
 8004b3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	88fa      	ldrh	r2, [r7, #6]
 8004b4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b54:	d108      	bne.n	8004b68 <HAL_UART_Transmit+0x6c>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	61bb      	str	r3, [r7, #24]
 8004b66:	e003      	b.n	8004b70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b70:	e02e      	b.n	8004bd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	9300      	str	r3, [sp, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2180      	movs	r1, #128	@ 0x80
 8004b7c:	68f8      	ldr	r0, [r7, #12]
 8004b7e:	f000 f848 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 8004b82:	4603      	mov	r3, r0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d005      	beq.n	8004b94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e03a      	b.n	8004c0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10b      	bne.n	8004bb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ba8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	3302      	adds	r3, #2
 8004bae:	61bb      	str	r3, [r7, #24]
 8004bb0:	e007      	b.n	8004bc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	781a      	ldrb	r2, [r3, #0]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	b29a      	uxth	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1cb      	bne.n	8004b72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2140      	movs	r1, #64	@ 0x40
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f814 	bl	8004c12 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e006      	b.n	8004c0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	e000      	b.n	8004c0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c08:	2302      	movs	r3, #2
  }
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b086      	sub	sp, #24
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	60f8      	str	r0, [r7, #12]
 8004c1a:	60b9      	str	r1, [r7, #8]
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c22:	e03b      	b.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c24:	6a3b      	ldr	r3, [r7, #32]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d037      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2c:	f7fd f8c2 	bl	8001db4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d302      	bcc.n	8004c42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e03a      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d023      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	2b80      	cmp	r3, #128	@ 0x80
 8004c58:	d020      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b40      	cmp	r3, #64	@ 0x40
 8004c5e:	d01d      	beq.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d116      	bne.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	617b      	str	r3, [r7, #20]
 8004c82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c84:	68f8      	ldr	r0, [r7, #12]
 8004c86:	f000 f81d 	bl	8004cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e00f      	b.n	8004cbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	bf0c      	ite	eq
 8004cac:	2301      	moveq	r3, #1
 8004cae:	2300      	movne	r3, #0
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d0b4      	beq.n	8004c24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b095      	sub	sp, #84	@ 0x54
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd6:	e853 3f00 	ldrex	r3, [r3]
 8004cda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cec:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e5      	bne.n	8004ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3314      	adds	r3, #20
 8004d06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	f023 0301 	bic.w	r3, r3, #1
 8004d16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d119      	bne.n	8004d70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	e853 3f00 	ldrex	r3, [r3]
 8004d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0310 	bic.w	r3, r3, #16
 8004d52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	330c      	adds	r3, #12
 8004d5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d5c:	61ba      	str	r2, [r7, #24]
 8004d5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d60:	6979      	ldr	r1, [r7, #20]
 8004d62:	69ba      	ldr	r2, [r7, #24]
 8004d64:	e841 2300 	strex	r3, r2, [r1]
 8004d68:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1e5      	bne.n	8004d3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d7e:	bf00      	nop
 8004d80:	3754      	adds	r7, #84	@ 0x54
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d90:	b0c0      	sub	sp, #256	@ 0x100
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da8:	68d9      	ldr	r1, [r3, #12]
 8004daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	ea40 0301 	orr.w	r3, r0, r1
 8004db4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004de4:	f021 010c 	bic.w	r1, r1, #12
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004df2:	430b      	orrs	r3, r1
 8004df4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	695b      	ldr	r3, [r3, #20]
 8004dfe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e06:	6999      	ldr	r1, [r3, #24]
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	681a      	ldr	r2, [r3, #0]
 8004e0e:	ea40 0301 	orr.w	r3, r0, r1
 8004e12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005058 <UART_SetConfig+0x2cc>)
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d005      	beq.n	8004e2c <UART_SetConfig+0xa0>
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b8d      	ldr	r3, [pc, #564]	@ (800505c <UART_SetConfig+0x2d0>)
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d104      	bne.n	8004e36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e2c:	f7fe fcb0 	bl	8003790 <HAL_RCC_GetPCLK2Freq>
 8004e30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e34:	e003      	b.n	8004e3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e36:	f7fe fc97 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004e3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e48:	f040 810c 	bne.w	8005064 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e50:	2200      	movs	r2, #0
 8004e52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004e5e:	4622      	mov	r2, r4
 8004e60:	462b      	mov	r3, r5
 8004e62:	1891      	adds	r1, r2, r2
 8004e64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e66:	415b      	adcs	r3, r3
 8004e68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e6e:	4621      	mov	r1, r4
 8004e70:	eb12 0801 	adds.w	r8, r2, r1
 8004e74:	4629      	mov	r1, r5
 8004e76:	eb43 0901 	adc.w	r9, r3, r1
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e8e:	4690      	mov	r8, r2
 8004e90:	4699      	mov	r9, r3
 8004e92:	4623      	mov	r3, r4
 8004e94:	eb18 0303 	adds.w	r3, r8, r3
 8004e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e9c:	462b      	mov	r3, r5
 8004e9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004eb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004eb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004eba:	460b      	mov	r3, r1
 8004ebc:	18db      	adds	r3, r3, r3
 8004ebe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	eb42 0303 	adc.w	r3, r2, r3
 8004ec6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ec8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004ecc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004ed0:	f7fb fe34 	bl	8000b3c <__aeabi_uldivmod>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4b61      	ldr	r3, [pc, #388]	@ (8005060 <UART_SetConfig+0x2d4>)
 8004eda:	fba3 2302 	umull	r2, r3, r3, r2
 8004ede:	095b      	lsrs	r3, r3, #5
 8004ee0:	011c      	lsls	r4, r3, #4
 8004ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004eec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ef0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ef4:	4642      	mov	r2, r8
 8004ef6:	464b      	mov	r3, r9
 8004ef8:	1891      	adds	r1, r2, r2
 8004efa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004efc:	415b      	adcs	r3, r3
 8004efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f04:	4641      	mov	r1, r8
 8004f06:	eb12 0a01 	adds.w	sl, r2, r1
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004f10:	f04f 0200 	mov.w	r2, #0
 8004f14:	f04f 0300 	mov.w	r3, #0
 8004f18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f24:	4692      	mov	sl, r2
 8004f26:	469b      	mov	fp, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004f2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f32:	464b      	mov	r3, r9
 8004f34:	eb4b 0303 	adc.w	r3, fp, r3
 8004f38:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f48:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f50:	460b      	mov	r3, r1
 8004f52:	18db      	adds	r3, r3, r3
 8004f54:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f56:	4613      	mov	r3, r2
 8004f58:	eb42 0303 	adc.w	r3, r2, r3
 8004f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f66:	f7fb fde9 	bl	8000b3c <__aeabi_uldivmod>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4b3b      	ldr	r3, [pc, #236]	@ (8005060 <UART_SetConfig+0x2d4>)
 8004f72:	fba3 2301 	umull	r2, r3, r3, r1
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	2264      	movs	r2, #100	@ 0x64
 8004f7a:	fb02 f303 	mul.w	r3, r2, r3
 8004f7e:	1acb      	subs	r3, r1, r3
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f86:	4b36      	ldr	r3, [pc, #216]	@ (8005060 <UART_SetConfig+0x2d4>)
 8004f88:	fba3 2302 	umull	r2, r3, r3, r2
 8004f8c:	095b      	lsrs	r3, r3, #5
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f94:	441c      	add	r4, r3
 8004f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fa0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fa4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fa8:	4642      	mov	r2, r8
 8004faa:	464b      	mov	r3, r9
 8004fac:	1891      	adds	r1, r2, r2
 8004fae:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004fb0:	415b      	adcs	r3, r3
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004fb8:	4641      	mov	r1, r8
 8004fba:	1851      	adds	r1, r2, r1
 8004fbc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004fbe:	4649      	mov	r1, r9
 8004fc0:	414b      	adcs	r3, r1
 8004fc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fc4:	f04f 0200 	mov.w	r2, #0
 8004fc8:	f04f 0300 	mov.w	r3, #0
 8004fcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004fd0:	4659      	mov	r1, fp
 8004fd2:	00cb      	lsls	r3, r1, #3
 8004fd4:	4651      	mov	r1, sl
 8004fd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fda:	4651      	mov	r1, sl
 8004fdc:	00ca      	lsls	r2, r1, #3
 8004fde:	4610      	mov	r0, r2
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	189b      	adds	r3, r3, r2
 8004fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fec:	464b      	mov	r3, r9
 8004fee:	460a      	mov	r2, r1
 8004ff0:	eb42 0303 	adc.w	r3, r2, r3
 8004ff4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005004:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005008:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800500c:	460b      	mov	r3, r1
 800500e:	18db      	adds	r3, r3, r3
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005012:	4613      	mov	r3, r2
 8005014:	eb42 0303 	adc.w	r3, r2, r3
 8005018:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800501a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800501e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005022:	f7fb fd8b 	bl	8000b3c <__aeabi_uldivmod>
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	4b0d      	ldr	r3, [pc, #52]	@ (8005060 <UART_SetConfig+0x2d4>)
 800502c:	fba3 1302 	umull	r1, r3, r3, r2
 8005030:	095b      	lsrs	r3, r3, #5
 8005032:	2164      	movs	r1, #100	@ 0x64
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	1ad3      	subs	r3, r2, r3
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	3332      	adds	r3, #50	@ 0x32
 800503e:	4a08      	ldr	r2, [pc, #32]	@ (8005060 <UART_SetConfig+0x2d4>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	095b      	lsrs	r3, r3, #5
 8005046:	f003 0207 	and.w	r2, r3, #7
 800504a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4422      	add	r2, r4
 8005052:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005054:	e106      	b.n	8005264 <UART_SetConfig+0x4d8>
 8005056:	bf00      	nop
 8005058:	40011000 	.word	0x40011000
 800505c:	40011400 	.word	0x40011400
 8005060:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005064:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005068:	2200      	movs	r2, #0
 800506a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800506e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005072:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005076:	4642      	mov	r2, r8
 8005078:	464b      	mov	r3, r9
 800507a:	1891      	adds	r1, r2, r2
 800507c:	6239      	str	r1, [r7, #32]
 800507e:	415b      	adcs	r3, r3
 8005080:	627b      	str	r3, [r7, #36]	@ 0x24
 8005082:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005086:	4641      	mov	r1, r8
 8005088:	1854      	adds	r4, r2, r1
 800508a:	4649      	mov	r1, r9
 800508c:	eb43 0501 	adc.w	r5, r3, r1
 8005090:	f04f 0200 	mov.w	r2, #0
 8005094:	f04f 0300 	mov.w	r3, #0
 8005098:	00eb      	lsls	r3, r5, #3
 800509a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800509e:	00e2      	lsls	r2, r4, #3
 80050a0:	4614      	mov	r4, r2
 80050a2:	461d      	mov	r5, r3
 80050a4:	4643      	mov	r3, r8
 80050a6:	18e3      	adds	r3, r4, r3
 80050a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050ac:	464b      	mov	r3, r9
 80050ae:	eb45 0303 	adc.w	r3, r5, r3
 80050b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80050c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80050d2:	4629      	mov	r1, r5
 80050d4:	008b      	lsls	r3, r1, #2
 80050d6:	4621      	mov	r1, r4
 80050d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050dc:	4621      	mov	r1, r4
 80050de:	008a      	lsls	r2, r1, #2
 80050e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80050e4:	f7fb fd2a 	bl	8000b3c <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4b60      	ldr	r3, [pc, #384]	@ (8005270 <UART_SetConfig+0x4e4>)
 80050ee:	fba3 2302 	umull	r2, r3, r3, r2
 80050f2:	095b      	lsrs	r3, r3, #5
 80050f4:	011c      	lsls	r4, r3, #4
 80050f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050fa:	2200      	movs	r2, #0
 80050fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005100:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005104:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005108:	4642      	mov	r2, r8
 800510a:	464b      	mov	r3, r9
 800510c:	1891      	adds	r1, r2, r2
 800510e:	61b9      	str	r1, [r7, #24]
 8005110:	415b      	adcs	r3, r3
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005118:	4641      	mov	r1, r8
 800511a:	1851      	adds	r1, r2, r1
 800511c:	6139      	str	r1, [r7, #16]
 800511e:	4649      	mov	r1, r9
 8005120:	414b      	adcs	r3, r1
 8005122:	617b      	str	r3, [r7, #20]
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005130:	4659      	mov	r1, fp
 8005132:	00cb      	lsls	r3, r1, #3
 8005134:	4651      	mov	r1, sl
 8005136:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800513a:	4651      	mov	r1, sl
 800513c:	00ca      	lsls	r2, r1, #3
 800513e:	4610      	mov	r0, r2
 8005140:	4619      	mov	r1, r3
 8005142:	4603      	mov	r3, r0
 8005144:	4642      	mov	r2, r8
 8005146:	189b      	adds	r3, r3, r2
 8005148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800514c:	464b      	mov	r3, r9
 800514e:	460a      	mov	r2, r1
 8005150:	eb42 0303 	adc.w	r3, r2, r3
 8005154:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005162:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005170:	4649      	mov	r1, r9
 8005172:	008b      	lsls	r3, r1, #2
 8005174:	4641      	mov	r1, r8
 8005176:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800517a:	4641      	mov	r1, r8
 800517c:	008a      	lsls	r2, r1, #2
 800517e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005182:	f7fb fcdb 	bl	8000b3c <__aeabi_uldivmod>
 8005186:	4602      	mov	r2, r0
 8005188:	460b      	mov	r3, r1
 800518a:	4611      	mov	r1, r2
 800518c:	4b38      	ldr	r3, [pc, #224]	@ (8005270 <UART_SetConfig+0x4e4>)
 800518e:	fba3 2301 	umull	r2, r3, r3, r1
 8005192:	095b      	lsrs	r3, r3, #5
 8005194:	2264      	movs	r2, #100	@ 0x64
 8005196:	fb02 f303 	mul.w	r3, r2, r3
 800519a:	1acb      	subs	r3, r1, r3
 800519c:	011b      	lsls	r3, r3, #4
 800519e:	3332      	adds	r3, #50	@ 0x32
 80051a0:	4a33      	ldr	r2, [pc, #204]	@ (8005270 <UART_SetConfig+0x4e4>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051ac:	441c      	add	r4, r3
 80051ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b2:	2200      	movs	r2, #0
 80051b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80051b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80051b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	1891      	adds	r1, r2, r2
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	415b      	adcs	r3, r3
 80051c6:	60fb      	str	r3, [r7, #12]
 80051c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051cc:	4641      	mov	r1, r8
 80051ce:	1851      	adds	r1, r2, r1
 80051d0:	6039      	str	r1, [r7, #0]
 80051d2:	4649      	mov	r1, r9
 80051d4:	414b      	adcs	r3, r1
 80051d6:	607b      	str	r3, [r7, #4]
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051e4:	4659      	mov	r1, fp
 80051e6:	00cb      	lsls	r3, r1, #3
 80051e8:	4651      	mov	r1, sl
 80051ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051ee:	4651      	mov	r1, sl
 80051f0:	00ca      	lsls	r2, r1, #3
 80051f2:	4610      	mov	r0, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	4603      	mov	r3, r0
 80051f8:	4642      	mov	r2, r8
 80051fa:	189b      	adds	r3, r3, r2
 80051fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051fe:	464b      	mov	r3, r9
 8005200:	460a      	mov	r2, r1
 8005202:	eb42 0303 	adc.w	r3, r2, r3
 8005206:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	663b      	str	r3, [r7, #96]	@ 0x60
 8005212:	667a      	str	r2, [r7, #100]	@ 0x64
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005220:	4649      	mov	r1, r9
 8005222:	008b      	lsls	r3, r1, #2
 8005224:	4641      	mov	r1, r8
 8005226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800522a:	4641      	mov	r1, r8
 800522c:	008a      	lsls	r2, r1, #2
 800522e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005232:	f7fb fc83 	bl	8000b3c <__aeabi_uldivmod>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4b0d      	ldr	r3, [pc, #52]	@ (8005270 <UART_SetConfig+0x4e4>)
 800523c:	fba3 1302 	umull	r1, r3, r3, r2
 8005240:	095b      	lsrs	r3, r3, #5
 8005242:	2164      	movs	r1, #100	@ 0x64
 8005244:	fb01 f303 	mul.w	r3, r1, r3
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	3332      	adds	r3, #50	@ 0x32
 800524e:	4a08      	ldr	r2, [pc, #32]	@ (8005270 <UART_SetConfig+0x4e4>)
 8005250:	fba2 2303 	umull	r2, r3, r2, r3
 8005254:	095b      	lsrs	r3, r3, #5
 8005256:	f003 020f 	and.w	r2, r3, #15
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4422      	add	r2, r4
 8005262:	609a      	str	r2, [r3, #8]
}
 8005264:	bf00      	nop
 8005266:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800526a:	46bd      	mov	sp, r7
 800526c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005270:	51eb851f 	.word	0x51eb851f

08005274 <malloc>:
 8005274:	4b02      	ldr	r3, [pc, #8]	@ (8005280 <malloc+0xc>)
 8005276:	4601      	mov	r1, r0
 8005278:	6818      	ldr	r0, [r3, #0]
 800527a:	f000 b82d 	b.w	80052d8 <_malloc_r>
 800527e:	bf00      	nop
 8005280:	2000000c 	.word	0x2000000c

08005284 <free>:
 8005284:	4b02      	ldr	r3, [pc, #8]	@ (8005290 <free+0xc>)
 8005286:	4601      	mov	r1, r0
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	f000 b93d 	b.w	8005508 <_free_r>
 800528e:	bf00      	nop
 8005290:	2000000c 	.word	0x2000000c

08005294 <sbrk_aligned>:
 8005294:	b570      	push	{r4, r5, r6, lr}
 8005296:	4e0f      	ldr	r6, [pc, #60]	@ (80052d4 <sbrk_aligned+0x40>)
 8005298:	460c      	mov	r4, r1
 800529a:	6831      	ldr	r1, [r6, #0]
 800529c:	4605      	mov	r5, r0
 800529e:	b911      	cbnz	r1, 80052a6 <sbrk_aligned+0x12>
 80052a0:	f000 f8e8 	bl	8005474 <_sbrk_r>
 80052a4:	6030      	str	r0, [r6, #0]
 80052a6:	4621      	mov	r1, r4
 80052a8:	4628      	mov	r0, r5
 80052aa:	f000 f8e3 	bl	8005474 <_sbrk_r>
 80052ae:	1c43      	adds	r3, r0, #1
 80052b0:	d103      	bne.n	80052ba <sbrk_aligned+0x26>
 80052b2:	f04f 34ff 	mov.w	r4, #4294967295
 80052b6:	4620      	mov	r0, r4
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	1cc4      	adds	r4, r0, #3
 80052bc:	f024 0403 	bic.w	r4, r4, #3
 80052c0:	42a0      	cmp	r0, r4
 80052c2:	d0f8      	beq.n	80052b6 <sbrk_aligned+0x22>
 80052c4:	1a21      	subs	r1, r4, r0
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 f8d4 	bl	8005474 <_sbrk_r>
 80052cc:	3001      	adds	r0, #1
 80052ce:	d1f2      	bne.n	80052b6 <sbrk_aligned+0x22>
 80052d0:	e7ef      	b.n	80052b2 <sbrk_aligned+0x1e>
 80052d2:	bf00      	nop
 80052d4:	2000c378 	.word	0x2000c378

080052d8 <_malloc_r>:
 80052d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052dc:	1ccd      	adds	r5, r1, #3
 80052de:	f025 0503 	bic.w	r5, r5, #3
 80052e2:	3508      	adds	r5, #8
 80052e4:	2d0c      	cmp	r5, #12
 80052e6:	bf38      	it	cc
 80052e8:	250c      	movcc	r5, #12
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	4606      	mov	r6, r0
 80052ee:	db01      	blt.n	80052f4 <_malloc_r+0x1c>
 80052f0:	42a9      	cmp	r1, r5
 80052f2:	d904      	bls.n	80052fe <_malloc_r+0x26>
 80052f4:	230c      	movs	r3, #12
 80052f6:	6033      	str	r3, [r6, #0]
 80052f8:	2000      	movs	r0, #0
 80052fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80053d4 <_malloc_r+0xfc>
 8005302:	f000 f869 	bl	80053d8 <__malloc_lock>
 8005306:	f8d8 3000 	ldr.w	r3, [r8]
 800530a:	461c      	mov	r4, r3
 800530c:	bb44      	cbnz	r4, 8005360 <_malloc_r+0x88>
 800530e:	4629      	mov	r1, r5
 8005310:	4630      	mov	r0, r6
 8005312:	f7ff ffbf 	bl	8005294 <sbrk_aligned>
 8005316:	1c43      	adds	r3, r0, #1
 8005318:	4604      	mov	r4, r0
 800531a:	d158      	bne.n	80053ce <_malloc_r+0xf6>
 800531c:	f8d8 4000 	ldr.w	r4, [r8]
 8005320:	4627      	mov	r7, r4
 8005322:	2f00      	cmp	r7, #0
 8005324:	d143      	bne.n	80053ae <_malloc_r+0xd6>
 8005326:	2c00      	cmp	r4, #0
 8005328:	d04b      	beq.n	80053c2 <_malloc_r+0xea>
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	4639      	mov	r1, r7
 800532e:	4630      	mov	r0, r6
 8005330:	eb04 0903 	add.w	r9, r4, r3
 8005334:	f000 f89e 	bl	8005474 <_sbrk_r>
 8005338:	4581      	cmp	r9, r0
 800533a:	d142      	bne.n	80053c2 <_malloc_r+0xea>
 800533c:	6821      	ldr	r1, [r4, #0]
 800533e:	1a6d      	subs	r5, r5, r1
 8005340:	4629      	mov	r1, r5
 8005342:	4630      	mov	r0, r6
 8005344:	f7ff ffa6 	bl	8005294 <sbrk_aligned>
 8005348:	3001      	adds	r0, #1
 800534a:	d03a      	beq.n	80053c2 <_malloc_r+0xea>
 800534c:	6823      	ldr	r3, [r4, #0]
 800534e:	442b      	add	r3, r5
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	f8d8 3000 	ldr.w	r3, [r8]
 8005356:	685a      	ldr	r2, [r3, #4]
 8005358:	bb62      	cbnz	r2, 80053b4 <_malloc_r+0xdc>
 800535a:	f8c8 7000 	str.w	r7, [r8]
 800535e:	e00f      	b.n	8005380 <_malloc_r+0xa8>
 8005360:	6822      	ldr	r2, [r4, #0]
 8005362:	1b52      	subs	r2, r2, r5
 8005364:	d420      	bmi.n	80053a8 <_malloc_r+0xd0>
 8005366:	2a0b      	cmp	r2, #11
 8005368:	d917      	bls.n	800539a <_malloc_r+0xc2>
 800536a:	1961      	adds	r1, r4, r5
 800536c:	42a3      	cmp	r3, r4
 800536e:	6025      	str	r5, [r4, #0]
 8005370:	bf18      	it	ne
 8005372:	6059      	strne	r1, [r3, #4]
 8005374:	6863      	ldr	r3, [r4, #4]
 8005376:	bf08      	it	eq
 8005378:	f8c8 1000 	streq.w	r1, [r8]
 800537c:	5162      	str	r2, [r4, r5]
 800537e:	604b      	str	r3, [r1, #4]
 8005380:	4630      	mov	r0, r6
 8005382:	f000 f82f 	bl	80053e4 <__malloc_unlock>
 8005386:	f104 000b 	add.w	r0, r4, #11
 800538a:	1d23      	adds	r3, r4, #4
 800538c:	f020 0007 	bic.w	r0, r0, #7
 8005390:	1ac2      	subs	r2, r0, r3
 8005392:	bf1c      	itt	ne
 8005394:	1a1b      	subne	r3, r3, r0
 8005396:	50a3      	strne	r3, [r4, r2]
 8005398:	e7af      	b.n	80052fa <_malloc_r+0x22>
 800539a:	6862      	ldr	r2, [r4, #4]
 800539c:	42a3      	cmp	r3, r4
 800539e:	bf0c      	ite	eq
 80053a0:	f8c8 2000 	streq.w	r2, [r8]
 80053a4:	605a      	strne	r2, [r3, #4]
 80053a6:	e7eb      	b.n	8005380 <_malloc_r+0xa8>
 80053a8:	4623      	mov	r3, r4
 80053aa:	6864      	ldr	r4, [r4, #4]
 80053ac:	e7ae      	b.n	800530c <_malloc_r+0x34>
 80053ae:	463c      	mov	r4, r7
 80053b0:	687f      	ldr	r7, [r7, #4]
 80053b2:	e7b6      	b.n	8005322 <_malloc_r+0x4a>
 80053b4:	461a      	mov	r2, r3
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	42a3      	cmp	r3, r4
 80053ba:	d1fb      	bne.n	80053b4 <_malloc_r+0xdc>
 80053bc:	2300      	movs	r3, #0
 80053be:	6053      	str	r3, [r2, #4]
 80053c0:	e7de      	b.n	8005380 <_malloc_r+0xa8>
 80053c2:	230c      	movs	r3, #12
 80053c4:	6033      	str	r3, [r6, #0]
 80053c6:	4630      	mov	r0, r6
 80053c8:	f000 f80c 	bl	80053e4 <__malloc_unlock>
 80053cc:	e794      	b.n	80052f8 <_malloc_r+0x20>
 80053ce:	6005      	str	r5, [r0, #0]
 80053d0:	e7d6      	b.n	8005380 <_malloc_r+0xa8>
 80053d2:	bf00      	nop
 80053d4:	2000c37c 	.word	0x2000c37c

080053d8 <__malloc_lock>:
 80053d8:	4801      	ldr	r0, [pc, #4]	@ (80053e0 <__malloc_lock+0x8>)
 80053da:	f000 b885 	b.w	80054e8 <__retarget_lock_acquire_recursive>
 80053de:	bf00      	nop
 80053e0:	2000c4bc 	.word	0x2000c4bc

080053e4 <__malloc_unlock>:
 80053e4:	4801      	ldr	r0, [pc, #4]	@ (80053ec <__malloc_unlock+0x8>)
 80053e6:	f000 b880 	b.w	80054ea <__retarget_lock_release_recursive>
 80053ea:	bf00      	nop
 80053ec:	2000c4bc 	.word	0x2000c4bc

080053f0 <_vsniprintf_r>:
 80053f0:	b530      	push	{r4, r5, lr}
 80053f2:	4614      	mov	r4, r2
 80053f4:	2c00      	cmp	r4, #0
 80053f6:	b09b      	sub	sp, #108	@ 0x6c
 80053f8:	4605      	mov	r5, r0
 80053fa:	461a      	mov	r2, r3
 80053fc:	da05      	bge.n	800540a <_vsniprintf_r+0x1a>
 80053fe:	238b      	movs	r3, #139	@ 0x8b
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	f04f 30ff 	mov.w	r0, #4294967295
 8005406:	b01b      	add	sp, #108	@ 0x6c
 8005408:	bd30      	pop	{r4, r5, pc}
 800540a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800540e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005412:	bf14      	ite	ne
 8005414:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005418:	4623      	moveq	r3, r4
 800541a:	9302      	str	r3, [sp, #8]
 800541c:	9305      	str	r3, [sp, #20]
 800541e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005422:	9100      	str	r1, [sp, #0]
 8005424:	9104      	str	r1, [sp, #16]
 8005426:	f8ad 300e 	strh.w	r3, [sp, #14]
 800542a:	4669      	mov	r1, sp
 800542c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800542e:	f000 f911 	bl	8005654 <_svfiprintf_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	bfbc      	itt	lt
 8005436:	238b      	movlt	r3, #139	@ 0x8b
 8005438:	602b      	strlt	r3, [r5, #0]
 800543a:	2c00      	cmp	r4, #0
 800543c:	d0e3      	beq.n	8005406 <_vsniprintf_r+0x16>
 800543e:	9b00      	ldr	r3, [sp, #0]
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
 8005444:	e7df      	b.n	8005406 <_vsniprintf_r+0x16>
	...

08005448 <vsniprintf>:
 8005448:	b507      	push	{r0, r1, r2, lr}
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	460a      	mov	r2, r1
 8005450:	4601      	mov	r1, r0
 8005452:	4803      	ldr	r0, [pc, #12]	@ (8005460 <vsniprintf+0x18>)
 8005454:	6800      	ldr	r0, [r0, #0]
 8005456:	f7ff ffcb 	bl	80053f0 <_vsniprintf_r>
 800545a:	b003      	add	sp, #12
 800545c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005460:	2000000c 	.word	0x2000000c

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <_sbrk_r>:
 8005474:	b538      	push	{r3, r4, r5, lr}
 8005476:	4d06      	ldr	r5, [pc, #24]	@ (8005490 <_sbrk_r+0x1c>)
 8005478:	2300      	movs	r3, #0
 800547a:	4604      	mov	r4, r0
 800547c:	4608      	mov	r0, r1
 800547e:	602b      	str	r3, [r5, #0]
 8005480:	f7fc fbf0 	bl	8001c64 <_sbrk>
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d102      	bne.n	800548e <_sbrk_r+0x1a>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	b103      	cbz	r3, 800548e <_sbrk_r+0x1a>
 800548c:	6023      	str	r3, [r4, #0]
 800548e:	bd38      	pop	{r3, r4, r5, pc}
 8005490:	2000c4b8 	.word	0x2000c4b8

08005494 <__errno>:
 8005494:	4b01      	ldr	r3, [pc, #4]	@ (800549c <__errno+0x8>)
 8005496:	6818      	ldr	r0, [r3, #0]
 8005498:	4770      	bx	lr
 800549a:	bf00      	nop
 800549c:	2000000c 	.word	0x2000000c

080054a0 <__libc_init_array>:
 80054a0:	b570      	push	{r4, r5, r6, lr}
 80054a2:	4d0d      	ldr	r5, [pc, #52]	@ (80054d8 <__libc_init_array+0x38>)
 80054a4:	4c0d      	ldr	r4, [pc, #52]	@ (80054dc <__libc_init_array+0x3c>)
 80054a6:	1b64      	subs	r4, r4, r5
 80054a8:	10a4      	asrs	r4, r4, #2
 80054aa:	2600      	movs	r6, #0
 80054ac:	42a6      	cmp	r6, r4
 80054ae:	d109      	bne.n	80054c4 <__libc_init_array+0x24>
 80054b0:	4d0b      	ldr	r5, [pc, #44]	@ (80054e0 <__libc_init_array+0x40>)
 80054b2:	4c0c      	ldr	r4, [pc, #48]	@ (80054e4 <__libc_init_array+0x44>)
 80054b4:	f000 fba8 	bl	8005c08 <_init>
 80054b8:	1b64      	subs	r4, r4, r5
 80054ba:	10a4      	asrs	r4, r4, #2
 80054bc:	2600      	movs	r6, #0
 80054be:	42a6      	cmp	r6, r4
 80054c0:	d105      	bne.n	80054ce <__libc_init_array+0x2e>
 80054c2:	bd70      	pop	{r4, r5, r6, pc}
 80054c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c8:	4798      	blx	r3
 80054ca:	3601      	adds	r6, #1
 80054cc:	e7ee      	b.n	80054ac <__libc_init_array+0xc>
 80054ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d2:	4798      	blx	r3
 80054d4:	3601      	adds	r6, #1
 80054d6:	e7f2      	b.n	80054be <__libc_init_array+0x1e>
 80054d8:	08005e34 	.word	0x08005e34
 80054dc:	08005e34 	.word	0x08005e34
 80054e0:	08005e34 	.word	0x08005e34
 80054e4:	08005e38 	.word	0x08005e38

080054e8 <__retarget_lock_acquire_recursive>:
 80054e8:	4770      	bx	lr

080054ea <__retarget_lock_release_recursive>:
 80054ea:	4770      	bx	lr

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <_free_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4605      	mov	r5, r0
 800550c:	2900      	cmp	r1, #0
 800550e:	d041      	beq.n	8005594 <_free_r+0x8c>
 8005510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005514:	1f0c      	subs	r4, r1, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	bfb8      	it	lt
 800551a:	18e4      	addlt	r4, r4, r3
 800551c:	f7ff ff5c 	bl	80053d8 <__malloc_lock>
 8005520:	4a1d      	ldr	r2, [pc, #116]	@ (8005598 <_free_r+0x90>)
 8005522:	6813      	ldr	r3, [r2, #0]
 8005524:	b933      	cbnz	r3, 8005534 <_free_r+0x2c>
 8005526:	6063      	str	r3, [r4, #4]
 8005528:	6014      	str	r4, [r2, #0]
 800552a:	4628      	mov	r0, r5
 800552c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005530:	f7ff bf58 	b.w	80053e4 <__malloc_unlock>
 8005534:	42a3      	cmp	r3, r4
 8005536:	d908      	bls.n	800554a <_free_r+0x42>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	1821      	adds	r1, r4, r0
 800553c:	428b      	cmp	r3, r1
 800553e:	bf01      	itttt	eq
 8005540:	6819      	ldreq	r1, [r3, #0]
 8005542:	685b      	ldreq	r3, [r3, #4]
 8005544:	1809      	addeq	r1, r1, r0
 8005546:	6021      	streq	r1, [r4, #0]
 8005548:	e7ed      	b.n	8005526 <_free_r+0x1e>
 800554a:	461a      	mov	r2, r3
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	b10b      	cbz	r3, 8005554 <_free_r+0x4c>
 8005550:	42a3      	cmp	r3, r4
 8005552:	d9fa      	bls.n	800554a <_free_r+0x42>
 8005554:	6811      	ldr	r1, [r2, #0]
 8005556:	1850      	adds	r0, r2, r1
 8005558:	42a0      	cmp	r0, r4
 800555a:	d10b      	bne.n	8005574 <_free_r+0x6c>
 800555c:	6820      	ldr	r0, [r4, #0]
 800555e:	4401      	add	r1, r0
 8005560:	1850      	adds	r0, r2, r1
 8005562:	4283      	cmp	r3, r0
 8005564:	6011      	str	r1, [r2, #0]
 8005566:	d1e0      	bne.n	800552a <_free_r+0x22>
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6053      	str	r3, [r2, #4]
 800556e:	4408      	add	r0, r1
 8005570:	6010      	str	r0, [r2, #0]
 8005572:	e7da      	b.n	800552a <_free_r+0x22>
 8005574:	d902      	bls.n	800557c <_free_r+0x74>
 8005576:	230c      	movs	r3, #12
 8005578:	602b      	str	r3, [r5, #0]
 800557a:	e7d6      	b.n	800552a <_free_r+0x22>
 800557c:	6820      	ldr	r0, [r4, #0]
 800557e:	1821      	adds	r1, r4, r0
 8005580:	428b      	cmp	r3, r1
 8005582:	bf04      	itt	eq
 8005584:	6819      	ldreq	r1, [r3, #0]
 8005586:	685b      	ldreq	r3, [r3, #4]
 8005588:	6063      	str	r3, [r4, #4]
 800558a:	bf04      	itt	eq
 800558c:	1809      	addeq	r1, r1, r0
 800558e:	6021      	streq	r1, [r4, #0]
 8005590:	6054      	str	r4, [r2, #4]
 8005592:	e7ca      	b.n	800552a <_free_r+0x22>
 8005594:	bd38      	pop	{r3, r4, r5, pc}
 8005596:	bf00      	nop
 8005598:	2000c37c 	.word	0x2000c37c

0800559c <__ssputs_r>:
 800559c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055a0:	688e      	ldr	r6, [r1, #8]
 80055a2:	461f      	mov	r7, r3
 80055a4:	42be      	cmp	r6, r7
 80055a6:	680b      	ldr	r3, [r1, #0]
 80055a8:	4682      	mov	sl, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	4690      	mov	r8, r2
 80055ae:	d82d      	bhi.n	800560c <__ssputs_r+0x70>
 80055b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055b8:	d026      	beq.n	8005608 <__ssputs_r+0x6c>
 80055ba:	6965      	ldr	r5, [r4, #20]
 80055bc:	6909      	ldr	r1, [r1, #16]
 80055be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055c2:	eba3 0901 	sub.w	r9, r3, r1
 80055c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055ca:	1c7b      	adds	r3, r7, #1
 80055cc:	444b      	add	r3, r9
 80055ce:	106d      	asrs	r5, r5, #1
 80055d0:	429d      	cmp	r5, r3
 80055d2:	bf38      	it	cc
 80055d4:	461d      	movcc	r5, r3
 80055d6:	0553      	lsls	r3, r2, #21
 80055d8:	d527      	bpl.n	800562a <__ssputs_r+0x8e>
 80055da:	4629      	mov	r1, r5
 80055dc:	f7ff fe7c 	bl	80052d8 <_malloc_r>
 80055e0:	4606      	mov	r6, r0
 80055e2:	b360      	cbz	r0, 800563e <__ssputs_r+0xa2>
 80055e4:	6921      	ldr	r1, [r4, #16]
 80055e6:	464a      	mov	r2, r9
 80055e8:	f7ff ff80 	bl	80054ec <memcpy>
 80055ec:	89a3      	ldrh	r3, [r4, #12]
 80055ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80055f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055f6:	81a3      	strh	r3, [r4, #12]
 80055f8:	6126      	str	r6, [r4, #16]
 80055fa:	6165      	str	r5, [r4, #20]
 80055fc:	444e      	add	r6, r9
 80055fe:	eba5 0509 	sub.w	r5, r5, r9
 8005602:	6026      	str	r6, [r4, #0]
 8005604:	60a5      	str	r5, [r4, #8]
 8005606:	463e      	mov	r6, r7
 8005608:	42be      	cmp	r6, r7
 800560a:	d900      	bls.n	800560e <__ssputs_r+0x72>
 800560c:	463e      	mov	r6, r7
 800560e:	6820      	ldr	r0, [r4, #0]
 8005610:	4632      	mov	r2, r6
 8005612:	4641      	mov	r1, r8
 8005614:	f000 faa8 	bl	8005b68 <memmove>
 8005618:	68a3      	ldr	r3, [r4, #8]
 800561a:	1b9b      	subs	r3, r3, r6
 800561c:	60a3      	str	r3, [r4, #8]
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	4433      	add	r3, r6
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	2000      	movs	r0, #0
 8005626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800562a:	462a      	mov	r2, r5
 800562c:	f000 fab6 	bl	8005b9c <_realloc_r>
 8005630:	4606      	mov	r6, r0
 8005632:	2800      	cmp	r0, #0
 8005634:	d1e0      	bne.n	80055f8 <__ssputs_r+0x5c>
 8005636:	6921      	ldr	r1, [r4, #16]
 8005638:	4650      	mov	r0, sl
 800563a:	f7ff ff65 	bl	8005508 <_free_r>
 800563e:	230c      	movs	r3, #12
 8005640:	f8ca 3000 	str.w	r3, [sl]
 8005644:	89a3      	ldrh	r3, [r4, #12]
 8005646:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800564a:	81a3      	strh	r3, [r4, #12]
 800564c:	f04f 30ff 	mov.w	r0, #4294967295
 8005650:	e7e9      	b.n	8005626 <__ssputs_r+0x8a>
	...

08005654 <_svfiprintf_r>:
 8005654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005658:	4698      	mov	r8, r3
 800565a:	898b      	ldrh	r3, [r1, #12]
 800565c:	061b      	lsls	r3, r3, #24
 800565e:	b09d      	sub	sp, #116	@ 0x74
 8005660:	4607      	mov	r7, r0
 8005662:	460d      	mov	r5, r1
 8005664:	4614      	mov	r4, r2
 8005666:	d510      	bpl.n	800568a <_svfiprintf_r+0x36>
 8005668:	690b      	ldr	r3, [r1, #16]
 800566a:	b973      	cbnz	r3, 800568a <_svfiprintf_r+0x36>
 800566c:	2140      	movs	r1, #64	@ 0x40
 800566e:	f7ff fe33 	bl	80052d8 <_malloc_r>
 8005672:	6028      	str	r0, [r5, #0]
 8005674:	6128      	str	r0, [r5, #16]
 8005676:	b930      	cbnz	r0, 8005686 <_svfiprintf_r+0x32>
 8005678:	230c      	movs	r3, #12
 800567a:	603b      	str	r3, [r7, #0]
 800567c:	f04f 30ff 	mov.w	r0, #4294967295
 8005680:	b01d      	add	sp, #116	@ 0x74
 8005682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005686:	2340      	movs	r3, #64	@ 0x40
 8005688:	616b      	str	r3, [r5, #20]
 800568a:	2300      	movs	r3, #0
 800568c:	9309      	str	r3, [sp, #36]	@ 0x24
 800568e:	2320      	movs	r3, #32
 8005690:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005694:	f8cd 800c 	str.w	r8, [sp, #12]
 8005698:	2330      	movs	r3, #48	@ 0x30
 800569a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005838 <_svfiprintf_r+0x1e4>
 800569e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056a2:	f04f 0901 	mov.w	r9, #1
 80056a6:	4623      	mov	r3, r4
 80056a8:	469a      	mov	sl, r3
 80056aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ae:	b10a      	cbz	r2, 80056b4 <_svfiprintf_r+0x60>
 80056b0:	2a25      	cmp	r2, #37	@ 0x25
 80056b2:	d1f9      	bne.n	80056a8 <_svfiprintf_r+0x54>
 80056b4:	ebba 0b04 	subs.w	fp, sl, r4
 80056b8:	d00b      	beq.n	80056d2 <_svfiprintf_r+0x7e>
 80056ba:	465b      	mov	r3, fp
 80056bc:	4622      	mov	r2, r4
 80056be:	4629      	mov	r1, r5
 80056c0:	4638      	mov	r0, r7
 80056c2:	f7ff ff6b 	bl	800559c <__ssputs_r>
 80056c6:	3001      	adds	r0, #1
 80056c8:	f000 80a7 	beq.w	800581a <_svfiprintf_r+0x1c6>
 80056cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ce:	445a      	add	r2, fp
 80056d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80056d2:	f89a 3000 	ldrb.w	r3, [sl]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 809f 	beq.w	800581a <_svfiprintf_r+0x1c6>
 80056dc:	2300      	movs	r3, #0
 80056de:	f04f 32ff 	mov.w	r2, #4294967295
 80056e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80056e6:	f10a 0a01 	add.w	sl, sl, #1
 80056ea:	9304      	str	r3, [sp, #16]
 80056ec:	9307      	str	r3, [sp, #28]
 80056ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80056f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80056f4:	4654      	mov	r4, sl
 80056f6:	2205      	movs	r2, #5
 80056f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056fc:	484e      	ldr	r0, [pc, #312]	@ (8005838 <_svfiprintf_r+0x1e4>)
 80056fe:	f7fa fd8f 	bl	8000220 <memchr>
 8005702:	9a04      	ldr	r2, [sp, #16]
 8005704:	b9d8      	cbnz	r0, 800573e <_svfiprintf_r+0xea>
 8005706:	06d0      	lsls	r0, r2, #27
 8005708:	bf44      	itt	mi
 800570a:	2320      	movmi	r3, #32
 800570c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005710:	0711      	lsls	r1, r2, #28
 8005712:	bf44      	itt	mi
 8005714:	232b      	movmi	r3, #43	@ 0x2b
 8005716:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800571a:	f89a 3000 	ldrb.w	r3, [sl]
 800571e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005720:	d015      	beq.n	800574e <_svfiprintf_r+0xfa>
 8005722:	9a07      	ldr	r2, [sp, #28]
 8005724:	4654      	mov	r4, sl
 8005726:	2000      	movs	r0, #0
 8005728:	f04f 0c0a 	mov.w	ip, #10
 800572c:	4621      	mov	r1, r4
 800572e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005732:	3b30      	subs	r3, #48	@ 0x30
 8005734:	2b09      	cmp	r3, #9
 8005736:	d94b      	bls.n	80057d0 <_svfiprintf_r+0x17c>
 8005738:	b1b0      	cbz	r0, 8005768 <_svfiprintf_r+0x114>
 800573a:	9207      	str	r2, [sp, #28]
 800573c:	e014      	b.n	8005768 <_svfiprintf_r+0x114>
 800573e:	eba0 0308 	sub.w	r3, r0, r8
 8005742:	fa09 f303 	lsl.w	r3, r9, r3
 8005746:	4313      	orrs	r3, r2
 8005748:	9304      	str	r3, [sp, #16]
 800574a:	46a2      	mov	sl, r4
 800574c:	e7d2      	b.n	80056f4 <_svfiprintf_r+0xa0>
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	1d19      	adds	r1, r3, #4
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	9103      	str	r1, [sp, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	bfbb      	ittet	lt
 800575a:	425b      	neglt	r3, r3
 800575c:	f042 0202 	orrlt.w	r2, r2, #2
 8005760:	9307      	strge	r3, [sp, #28]
 8005762:	9307      	strlt	r3, [sp, #28]
 8005764:	bfb8      	it	lt
 8005766:	9204      	strlt	r2, [sp, #16]
 8005768:	7823      	ldrb	r3, [r4, #0]
 800576a:	2b2e      	cmp	r3, #46	@ 0x2e
 800576c:	d10a      	bne.n	8005784 <_svfiprintf_r+0x130>
 800576e:	7863      	ldrb	r3, [r4, #1]
 8005770:	2b2a      	cmp	r3, #42	@ 0x2a
 8005772:	d132      	bne.n	80057da <_svfiprintf_r+0x186>
 8005774:	9b03      	ldr	r3, [sp, #12]
 8005776:	1d1a      	adds	r2, r3, #4
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	9203      	str	r2, [sp, #12]
 800577c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005780:	3402      	adds	r4, #2
 8005782:	9305      	str	r3, [sp, #20]
 8005784:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005848 <_svfiprintf_r+0x1f4>
 8005788:	7821      	ldrb	r1, [r4, #0]
 800578a:	2203      	movs	r2, #3
 800578c:	4650      	mov	r0, sl
 800578e:	f7fa fd47 	bl	8000220 <memchr>
 8005792:	b138      	cbz	r0, 80057a4 <_svfiprintf_r+0x150>
 8005794:	9b04      	ldr	r3, [sp, #16]
 8005796:	eba0 000a 	sub.w	r0, r0, sl
 800579a:	2240      	movs	r2, #64	@ 0x40
 800579c:	4082      	lsls	r2, r0
 800579e:	4313      	orrs	r3, r2
 80057a0:	3401      	adds	r4, #1
 80057a2:	9304      	str	r3, [sp, #16]
 80057a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a8:	4824      	ldr	r0, [pc, #144]	@ (800583c <_svfiprintf_r+0x1e8>)
 80057aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057ae:	2206      	movs	r2, #6
 80057b0:	f7fa fd36 	bl	8000220 <memchr>
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d036      	beq.n	8005826 <_svfiprintf_r+0x1d2>
 80057b8:	4b21      	ldr	r3, [pc, #132]	@ (8005840 <_svfiprintf_r+0x1ec>)
 80057ba:	bb1b      	cbnz	r3, 8005804 <_svfiprintf_r+0x1b0>
 80057bc:	9b03      	ldr	r3, [sp, #12]
 80057be:	3307      	adds	r3, #7
 80057c0:	f023 0307 	bic.w	r3, r3, #7
 80057c4:	3308      	adds	r3, #8
 80057c6:	9303      	str	r3, [sp, #12]
 80057c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ca:	4433      	add	r3, r6
 80057cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ce:	e76a      	b.n	80056a6 <_svfiprintf_r+0x52>
 80057d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80057d4:	460c      	mov	r4, r1
 80057d6:	2001      	movs	r0, #1
 80057d8:	e7a8      	b.n	800572c <_svfiprintf_r+0xd8>
 80057da:	2300      	movs	r3, #0
 80057dc:	3401      	adds	r4, #1
 80057de:	9305      	str	r3, [sp, #20]
 80057e0:	4619      	mov	r1, r3
 80057e2:	f04f 0c0a 	mov.w	ip, #10
 80057e6:	4620      	mov	r0, r4
 80057e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80057ec:	3a30      	subs	r2, #48	@ 0x30
 80057ee:	2a09      	cmp	r2, #9
 80057f0:	d903      	bls.n	80057fa <_svfiprintf_r+0x1a6>
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d0c6      	beq.n	8005784 <_svfiprintf_r+0x130>
 80057f6:	9105      	str	r1, [sp, #20]
 80057f8:	e7c4      	b.n	8005784 <_svfiprintf_r+0x130>
 80057fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80057fe:	4604      	mov	r4, r0
 8005800:	2301      	movs	r3, #1
 8005802:	e7f0      	b.n	80057e6 <_svfiprintf_r+0x192>
 8005804:	ab03      	add	r3, sp, #12
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	462a      	mov	r2, r5
 800580a:	4b0e      	ldr	r3, [pc, #56]	@ (8005844 <_svfiprintf_r+0x1f0>)
 800580c:	a904      	add	r1, sp, #16
 800580e:	4638      	mov	r0, r7
 8005810:	f3af 8000 	nop.w
 8005814:	1c42      	adds	r2, r0, #1
 8005816:	4606      	mov	r6, r0
 8005818:	d1d6      	bne.n	80057c8 <_svfiprintf_r+0x174>
 800581a:	89ab      	ldrh	r3, [r5, #12]
 800581c:	065b      	lsls	r3, r3, #25
 800581e:	f53f af2d 	bmi.w	800567c <_svfiprintf_r+0x28>
 8005822:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005824:	e72c      	b.n	8005680 <_svfiprintf_r+0x2c>
 8005826:	ab03      	add	r3, sp, #12
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	462a      	mov	r2, r5
 800582c:	4b05      	ldr	r3, [pc, #20]	@ (8005844 <_svfiprintf_r+0x1f0>)
 800582e:	a904      	add	r1, sp, #16
 8005830:	4638      	mov	r0, r7
 8005832:	f000 f879 	bl	8005928 <_printf_i>
 8005836:	e7ed      	b.n	8005814 <_svfiprintf_r+0x1c0>
 8005838:	08005df8 	.word	0x08005df8
 800583c:	08005e02 	.word	0x08005e02
 8005840:	00000000 	.word	0x00000000
 8005844:	0800559d 	.word	0x0800559d
 8005848:	08005dfe 	.word	0x08005dfe

0800584c <_printf_common>:
 800584c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005850:	4616      	mov	r6, r2
 8005852:	4698      	mov	r8, r3
 8005854:	688a      	ldr	r2, [r1, #8]
 8005856:	690b      	ldr	r3, [r1, #16]
 8005858:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800585c:	4293      	cmp	r3, r2
 800585e:	bfb8      	it	lt
 8005860:	4613      	movlt	r3, r2
 8005862:	6033      	str	r3, [r6, #0]
 8005864:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005868:	4607      	mov	r7, r0
 800586a:	460c      	mov	r4, r1
 800586c:	b10a      	cbz	r2, 8005872 <_printf_common+0x26>
 800586e:	3301      	adds	r3, #1
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	6823      	ldr	r3, [r4, #0]
 8005874:	0699      	lsls	r1, r3, #26
 8005876:	bf42      	ittt	mi
 8005878:	6833      	ldrmi	r3, [r6, #0]
 800587a:	3302      	addmi	r3, #2
 800587c:	6033      	strmi	r3, [r6, #0]
 800587e:	6825      	ldr	r5, [r4, #0]
 8005880:	f015 0506 	ands.w	r5, r5, #6
 8005884:	d106      	bne.n	8005894 <_printf_common+0x48>
 8005886:	f104 0a19 	add.w	sl, r4, #25
 800588a:	68e3      	ldr	r3, [r4, #12]
 800588c:	6832      	ldr	r2, [r6, #0]
 800588e:	1a9b      	subs	r3, r3, r2
 8005890:	42ab      	cmp	r3, r5
 8005892:	dc26      	bgt.n	80058e2 <_printf_common+0x96>
 8005894:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	3b00      	subs	r3, #0
 800589c:	bf18      	it	ne
 800589e:	2301      	movne	r3, #1
 80058a0:	0692      	lsls	r2, r2, #26
 80058a2:	d42b      	bmi.n	80058fc <_printf_common+0xb0>
 80058a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058a8:	4641      	mov	r1, r8
 80058aa:	4638      	mov	r0, r7
 80058ac:	47c8      	blx	r9
 80058ae:	3001      	adds	r0, #1
 80058b0:	d01e      	beq.n	80058f0 <_printf_common+0xa4>
 80058b2:	6823      	ldr	r3, [r4, #0]
 80058b4:	6922      	ldr	r2, [r4, #16]
 80058b6:	f003 0306 	and.w	r3, r3, #6
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	bf02      	ittt	eq
 80058be:	68e5      	ldreq	r5, [r4, #12]
 80058c0:	6833      	ldreq	r3, [r6, #0]
 80058c2:	1aed      	subeq	r5, r5, r3
 80058c4:	68a3      	ldr	r3, [r4, #8]
 80058c6:	bf0c      	ite	eq
 80058c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058cc:	2500      	movne	r5, #0
 80058ce:	4293      	cmp	r3, r2
 80058d0:	bfc4      	itt	gt
 80058d2:	1a9b      	subgt	r3, r3, r2
 80058d4:	18ed      	addgt	r5, r5, r3
 80058d6:	2600      	movs	r6, #0
 80058d8:	341a      	adds	r4, #26
 80058da:	42b5      	cmp	r5, r6
 80058dc:	d11a      	bne.n	8005914 <_printf_common+0xc8>
 80058de:	2000      	movs	r0, #0
 80058e0:	e008      	b.n	80058f4 <_printf_common+0xa8>
 80058e2:	2301      	movs	r3, #1
 80058e4:	4652      	mov	r2, sl
 80058e6:	4641      	mov	r1, r8
 80058e8:	4638      	mov	r0, r7
 80058ea:	47c8      	blx	r9
 80058ec:	3001      	adds	r0, #1
 80058ee:	d103      	bne.n	80058f8 <_printf_common+0xac>
 80058f0:	f04f 30ff 	mov.w	r0, #4294967295
 80058f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058f8:	3501      	adds	r5, #1
 80058fa:	e7c6      	b.n	800588a <_printf_common+0x3e>
 80058fc:	18e1      	adds	r1, r4, r3
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	2030      	movs	r0, #48	@ 0x30
 8005902:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005906:	4422      	add	r2, r4
 8005908:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800590c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005910:	3302      	adds	r3, #2
 8005912:	e7c7      	b.n	80058a4 <_printf_common+0x58>
 8005914:	2301      	movs	r3, #1
 8005916:	4622      	mov	r2, r4
 8005918:	4641      	mov	r1, r8
 800591a:	4638      	mov	r0, r7
 800591c:	47c8      	blx	r9
 800591e:	3001      	adds	r0, #1
 8005920:	d0e6      	beq.n	80058f0 <_printf_common+0xa4>
 8005922:	3601      	adds	r6, #1
 8005924:	e7d9      	b.n	80058da <_printf_common+0x8e>
	...

08005928 <_printf_i>:
 8005928:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	7e0f      	ldrb	r7, [r1, #24]
 800592e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005930:	2f78      	cmp	r7, #120	@ 0x78
 8005932:	4691      	mov	r9, r2
 8005934:	4680      	mov	r8, r0
 8005936:	460c      	mov	r4, r1
 8005938:	469a      	mov	sl, r3
 800593a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800593e:	d807      	bhi.n	8005950 <_printf_i+0x28>
 8005940:	2f62      	cmp	r7, #98	@ 0x62
 8005942:	d80a      	bhi.n	800595a <_printf_i+0x32>
 8005944:	2f00      	cmp	r7, #0
 8005946:	f000 80d2 	beq.w	8005aee <_printf_i+0x1c6>
 800594a:	2f58      	cmp	r7, #88	@ 0x58
 800594c:	f000 80b9 	beq.w	8005ac2 <_printf_i+0x19a>
 8005950:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005954:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005958:	e03a      	b.n	80059d0 <_printf_i+0xa8>
 800595a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800595e:	2b15      	cmp	r3, #21
 8005960:	d8f6      	bhi.n	8005950 <_printf_i+0x28>
 8005962:	a101      	add	r1, pc, #4	@ (adr r1, 8005968 <_printf_i+0x40>)
 8005964:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005968:	080059c1 	.word	0x080059c1
 800596c:	080059d5 	.word	0x080059d5
 8005970:	08005951 	.word	0x08005951
 8005974:	08005951 	.word	0x08005951
 8005978:	08005951 	.word	0x08005951
 800597c:	08005951 	.word	0x08005951
 8005980:	080059d5 	.word	0x080059d5
 8005984:	08005951 	.word	0x08005951
 8005988:	08005951 	.word	0x08005951
 800598c:	08005951 	.word	0x08005951
 8005990:	08005951 	.word	0x08005951
 8005994:	08005ad5 	.word	0x08005ad5
 8005998:	080059ff 	.word	0x080059ff
 800599c:	08005a8f 	.word	0x08005a8f
 80059a0:	08005951 	.word	0x08005951
 80059a4:	08005951 	.word	0x08005951
 80059a8:	08005af7 	.word	0x08005af7
 80059ac:	08005951 	.word	0x08005951
 80059b0:	080059ff 	.word	0x080059ff
 80059b4:	08005951 	.word	0x08005951
 80059b8:	08005951 	.word	0x08005951
 80059bc:	08005a97 	.word	0x08005a97
 80059c0:	6833      	ldr	r3, [r6, #0]
 80059c2:	1d1a      	adds	r2, r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6032      	str	r2, [r6, #0]
 80059c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059d0:	2301      	movs	r3, #1
 80059d2:	e09d      	b.n	8005b10 <_printf_i+0x1e8>
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	6820      	ldr	r0, [r4, #0]
 80059d8:	1d19      	adds	r1, r3, #4
 80059da:	6031      	str	r1, [r6, #0]
 80059dc:	0606      	lsls	r6, r0, #24
 80059de:	d501      	bpl.n	80059e4 <_printf_i+0xbc>
 80059e0:	681d      	ldr	r5, [r3, #0]
 80059e2:	e003      	b.n	80059ec <_printf_i+0xc4>
 80059e4:	0645      	lsls	r5, r0, #25
 80059e6:	d5fb      	bpl.n	80059e0 <_printf_i+0xb8>
 80059e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059ec:	2d00      	cmp	r5, #0
 80059ee:	da03      	bge.n	80059f8 <_printf_i+0xd0>
 80059f0:	232d      	movs	r3, #45	@ 0x2d
 80059f2:	426d      	negs	r5, r5
 80059f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059f8:	4859      	ldr	r0, [pc, #356]	@ (8005b60 <_printf_i+0x238>)
 80059fa:	230a      	movs	r3, #10
 80059fc:	e011      	b.n	8005a22 <_printf_i+0xfa>
 80059fe:	6821      	ldr	r1, [r4, #0]
 8005a00:	6833      	ldr	r3, [r6, #0]
 8005a02:	0608      	lsls	r0, r1, #24
 8005a04:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a08:	d402      	bmi.n	8005a10 <_printf_i+0xe8>
 8005a0a:	0649      	lsls	r1, r1, #25
 8005a0c:	bf48      	it	mi
 8005a0e:	b2ad      	uxthmi	r5, r5
 8005a10:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a12:	4853      	ldr	r0, [pc, #332]	@ (8005b60 <_printf_i+0x238>)
 8005a14:	6033      	str	r3, [r6, #0]
 8005a16:	bf14      	ite	ne
 8005a18:	230a      	movne	r3, #10
 8005a1a:	2308      	moveq	r3, #8
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a22:	6866      	ldr	r6, [r4, #4]
 8005a24:	60a6      	str	r6, [r4, #8]
 8005a26:	2e00      	cmp	r6, #0
 8005a28:	bfa2      	ittt	ge
 8005a2a:	6821      	ldrge	r1, [r4, #0]
 8005a2c:	f021 0104 	bicge.w	r1, r1, #4
 8005a30:	6021      	strge	r1, [r4, #0]
 8005a32:	b90d      	cbnz	r5, 8005a38 <_printf_i+0x110>
 8005a34:	2e00      	cmp	r6, #0
 8005a36:	d04b      	beq.n	8005ad0 <_printf_i+0x1a8>
 8005a38:	4616      	mov	r6, r2
 8005a3a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a3e:	fb03 5711 	mls	r7, r3, r1, r5
 8005a42:	5dc7      	ldrb	r7, [r0, r7]
 8005a44:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a48:	462f      	mov	r7, r5
 8005a4a:	42bb      	cmp	r3, r7
 8005a4c:	460d      	mov	r5, r1
 8005a4e:	d9f4      	bls.n	8005a3a <_printf_i+0x112>
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d10b      	bne.n	8005a6c <_printf_i+0x144>
 8005a54:	6823      	ldr	r3, [r4, #0]
 8005a56:	07df      	lsls	r7, r3, #31
 8005a58:	d508      	bpl.n	8005a6c <_printf_i+0x144>
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	6861      	ldr	r1, [r4, #4]
 8005a5e:	4299      	cmp	r1, r3
 8005a60:	bfde      	ittt	le
 8005a62:	2330      	movle	r3, #48	@ 0x30
 8005a64:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a68:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a6c:	1b92      	subs	r2, r2, r6
 8005a6e:	6122      	str	r2, [r4, #16]
 8005a70:	f8cd a000 	str.w	sl, [sp]
 8005a74:	464b      	mov	r3, r9
 8005a76:	aa03      	add	r2, sp, #12
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4640      	mov	r0, r8
 8005a7c:	f7ff fee6 	bl	800584c <_printf_common>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d14a      	bne.n	8005b1a <_printf_i+0x1f2>
 8005a84:	f04f 30ff 	mov.w	r0, #4294967295
 8005a88:	b004      	add	sp, #16
 8005a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	f043 0320 	orr.w	r3, r3, #32
 8005a94:	6023      	str	r3, [r4, #0]
 8005a96:	4833      	ldr	r0, [pc, #204]	@ (8005b64 <_printf_i+0x23c>)
 8005a98:	2778      	movs	r7, #120	@ 0x78
 8005a9a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	6831      	ldr	r1, [r6, #0]
 8005aa2:	061f      	lsls	r7, r3, #24
 8005aa4:	f851 5b04 	ldr.w	r5, [r1], #4
 8005aa8:	d402      	bmi.n	8005ab0 <_printf_i+0x188>
 8005aaa:	065f      	lsls	r7, r3, #25
 8005aac:	bf48      	it	mi
 8005aae:	b2ad      	uxthmi	r5, r5
 8005ab0:	6031      	str	r1, [r6, #0]
 8005ab2:	07d9      	lsls	r1, r3, #31
 8005ab4:	bf44      	itt	mi
 8005ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8005aba:	6023      	strmi	r3, [r4, #0]
 8005abc:	b11d      	cbz	r5, 8005ac6 <_printf_i+0x19e>
 8005abe:	2310      	movs	r3, #16
 8005ac0:	e7ac      	b.n	8005a1c <_printf_i+0xf4>
 8005ac2:	4827      	ldr	r0, [pc, #156]	@ (8005b60 <_printf_i+0x238>)
 8005ac4:	e7e9      	b.n	8005a9a <_printf_i+0x172>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	f023 0320 	bic.w	r3, r3, #32
 8005acc:	6023      	str	r3, [r4, #0]
 8005ace:	e7f6      	b.n	8005abe <_printf_i+0x196>
 8005ad0:	4616      	mov	r6, r2
 8005ad2:	e7bd      	b.n	8005a50 <_printf_i+0x128>
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	6825      	ldr	r5, [r4, #0]
 8005ad8:	6961      	ldr	r1, [r4, #20]
 8005ada:	1d18      	adds	r0, r3, #4
 8005adc:	6030      	str	r0, [r6, #0]
 8005ade:	062e      	lsls	r6, r5, #24
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	d501      	bpl.n	8005ae8 <_printf_i+0x1c0>
 8005ae4:	6019      	str	r1, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <_printf_i+0x1c6>
 8005ae8:	0668      	lsls	r0, r5, #25
 8005aea:	d5fb      	bpl.n	8005ae4 <_printf_i+0x1bc>
 8005aec:	8019      	strh	r1, [r3, #0]
 8005aee:	2300      	movs	r3, #0
 8005af0:	6123      	str	r3, [r4, #16]
 8005af2:	4616      	mov	r6, r2
 8005af4:	e7bc      	b.n	8005a70 <_printf_i+0x148>
 8005af6:	6833      	ldr	r3, [r6, #0]
 8005af8:	1d1a      	adds	r2, r3, #4
 8005afa:	6032      	str	r2, [r6, #0]
 8005afc:	681e      	ldr	r6, [r3, #0]
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	2100      	movs	r1, #0
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7fa fb8c 	bl	8000220 <memchr>
 8005b08:	b108      	cbz	r0, 8005b0e <_printf_i+0x1e6>
 8005b0a:	1b80      	subs	r0, r0, r6
 8005b0c:	6060      	str	r0, [r4, #4]
 8005b0e:	6863      	ldr	r3, [r4, #4]
 8005b10:	6123      	str	r3, [r4, #16]
 8005b12:	2300      	movs	r3, #0
 8005b14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b18:	e7aa      	b.n	8005a70 <_printf_i+0x148>
 8005b1a:	6923      	ldr	r3, [r4, #16]
 8005b1c:	4632      	mov	r2, r6
 8005b1e:	4649      	mov	r1, r9
 8005b20:	4640      	mov	r0, r8
 8005b22:	47d0      	blx	sl
 8005b24:	3001      	adds	r0, #1
 8005b26:	d0ad      	beq.n	8005a84 <_printf_i+0x15c>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	079b      	lsls	r3, r3, #30
 8005b2c:	d413      	bmi.n	8005b56 <_printf_i+0x22e>
 8005b2e:	68e0      	ldr	r0, [r4, #12]
 8005b30:	9b03      	ldr	r3, [sp, #12]
 8005b32:	4298      	cmp	r0, r3
 8005b34:	bfb8      	it	lt
 8005b36:	4618      	movlt	r0, r3
 8005b38:	e7a6      	b.n	8005a88 <_printf_i+0x160>
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	4632      	mov	r2, r6
 8005b3e:	4649      	mov	r1, r9
 8005b40:	4640      	mov	r0, r8
 8005b42:	47d0      	blx	sl
 8005b44:	3001      	adds	r0, #1
 8005b46:	d09d      	beq.n	8005a84 <_printf_i+0x15c>
 8005b48:	3501      	adds	r5, #1
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	9903      	ldr	r1, [sp, #12]
 8005b4e:	1a5b      	subs	r3, r3, r1
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	dcf2      	bgt.n	8005b3a <_printf_i+0x212>
 8005b54:	e7eb      	b.n	8005b2e <_printf_i+0x206>
 8005b56:	2500      	movs	r5, #0
 8005b58:	f104 0619 	add.w	r6, r4, #25
 8005b5c:	e7f5      	b.n	8005b4a <_printf_i+0x222>
 8005b5e:	bf00      	nop
 8005b60:	08005e09 	.word	0x08005e09
 8005b64:	08005e1a 	.word	0x08005e1a

08005b68 <memmove>:
 8005b68:	4288      	cmp	r0, r1
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	eb01 0402 	add.w	r4, r1, r2
 8005b70:	d902      	bls.n	8005b78 <memmove+0x10>
 8005b72:	4284      	cmp	r4, r0
 8005b74:	4623      	mov	r3, r4
 8005b76:	d807      	bhi.n	8005b88 <memmove+0x20>
 8005b78:	1e43      	subs	r3, r0, #1
 8005b7a:	42a1      	cmp	r1, r4
 8005b7c:	d008      	beq.n	8005b90 <memmove+0x28>
 8005b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b86:	e7f8      	b.n	8005b7a <memmove+0x12>
 8005b88:	4402      	add	r2, r0
 8005b8a:	4601      	mov	r1, r0
 8005b8c:	428a      	cmp	r2, r1
 8005b8e:	d100      	bne.n	8005b92 <memmove+0x2a>
 8005b90:	bd10      	pop	{r4, pc}
 8005b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b9a:	e7f7      	b.n	8005b8c <memmove+0x24>

08005b9c <_realloc_r>:
 8005b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba0:	4680      	mov	r8, r0
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	460c      	mov	r4, r1
 8005ba6:	b921      	cbnz	r1, 8005bb2 <_realloc_r+0x16>
 8005ba8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bac:	4611      	mov	r1, r2
 8005bae:	f7ff bb93 	b.w	80052d8 <_malloc_r>
 8005bb2:	b92a      	cbnz	r2, 8005bc0 <_realloc_r+0x24>
 8005bb4:	f7ff fca8 	bl	8005508 <_free_r>
 8005bb8:	2400      	movs	r4, #0
 8005bba:	4620      	mov	r0, r4
 8005bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc0:	f000 f81a 	bl	8005bf8 <_malloc_usable_size_r>
 8005bc4:	4285      	cmp	r5, r0
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	d802      	bhi.n	8005bd0 <_realloc_r+0x34>
 8005bca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005bce:	d8f4      	bhi.n	8005bba <_realloc_r+0x1e>
 8005bd0:	4629      	mov	r1, r5
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	f7ff fb80 	bl	80052d8 <_malloc_r>
 8005bd8:	4607      	mov	r7, r0
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d0ec      	beq.n	8005bb8 <_realloc_r+0x1c>
 8005bde:	42b5      	cmp	r5, r6
 8005be0:	462a      	mov	r2, r5
 8005be2:	4621      	mov	r1, r4
 8005be4:	bf28      	it	cs
 8005be6:	4632      	movcs	r2, r6
 8005be8:	f7ff fc80 	bl	80054ec <memcpy>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4640      	mov	r0, r8
 8005bf0:	f7ff fc8a 	bl	8005508 <_free_r>
 8005bf4:	463c      	mov	r4, r7
 8005bf6:	e7e0      	b.n	8005bba <_realloc_r+0x1e>

08005bf8 <_malloc_usable_size_r>:
 8005bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bfc:	1f18      	subs	r0, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bfbc      	itt	lt
 8005c02:	580b      	ldrlt	r3, [r1, r0]
 8005c04:	18c0      	addlt	r0, r0, r3
 8005c06:	4770      	bx	lr

08005c08 <_init>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr

08005c14 <_fini>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr
