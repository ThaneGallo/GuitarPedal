
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f04  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000494  080070d4  080070d4  000080d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007568  08007568  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007570  08007570  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007578  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008468  20000068  080075e0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200084d0  080075e0  000094d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012363  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  0001b3fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  0001e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d07  00000000  00000000  0001f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025385  00000000  00000000  0001ffcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000153ae  00000000  00000000  00045354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b7f  00000000  00000000  0005a702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c281  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052a4  00000000  00000000  0013c2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00141568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070bc 	.word	0x080070bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080070bc 	.word	0x080070bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b96a 	b.w	8000de8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9d08      	ldr	r5, [sp, #32]
 8000b32:	460c      	mov	r4, r1
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d14e      	bne.n	8000bd6 <__udivmoddi4+0xaa>
 8000b38:	4694      	mov	ip, r2
 8000b3a:	458c      	cmp	ip, r1
 8000b3c:	4686      	mov	lr, r0
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	d962      	bls.n	8000c0a <__udivmoddi4+0xde>
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0320 	rsb	r3, r2, #32
 8000b4a:	4091      	lsls	r1, r2
 8000b4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b54:	4319      	orrs	r1, r3
 8000b56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b5e:	fa1f f68c 	uxth.w	r6, ip
 8000b62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb04 f106 	mul.w	r1, r4, r6
 8000b76:	4299      	cmp	r1, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x64>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b82:	f080 8112 	bcs.w	8000daa <__udivmoddi4+0x27e>
 8000b86:	4299      	cmp	r1, r3
 8000b88:	f240 810f 	bls.w	8000daa <__udivmoddi4+0x27e>
 8000b8c:	3c02      	subs	r4, #2
 8000b8e:	4463      	add	r3, ip
 8000b90:	1a59      	subs	r1, r3, r1
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb00 f606 	mul.w	r6, r0, r6
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x94>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb2:	f080 80fc 	bcs.w	8000dae <__udivmoddi4+0x282>
 8000bb6:	429e      	cmp	r6, r3
 8000bb8:	f240 80f9 	bls.w	8000dae <__udivmoddi4+0x282>
 8000bbc:	4463      	add	r3, ip
 8000bbe:	3802      	subs	r0, #2
 8000bc0:	1b9b      	subs	r3, r3, r6
 8000bc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	b11d      	cbz	r5, 8000bd2 <__udivmoddi4+0xa6>
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	2200      	movs	r2, #0
 8000bce:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d905      	bls.n	8000be6 <__udivmoddi4+0xba>
 8000bda:	b10d      	cbz	r5, 8000be0 <__udivmoddi4+0xb4>
 8000bdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000be0:	2100      	movs	r1, #0
 8000be2:	4608      	mov	r0, r1
 8000be4:	e7f5      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000be6:	fab3 f183 	clz	r1, r3
 8000bea:	2900      	cmp	r1, #0
 8000bec:	d146      	bne.n	8000c7c <__udivmoddi4+0x150>
 8000bee:	42a3      	cmp	r3, r4
 8000bf0:	d302      	bcc.n	8000bf8 <__udivmoddi4+0xcc>
 8000bf2:	4290      	cmp	r0, r2
 8000bf4:	f0c0 80f0 	bcc.w	8000dd8 <__udivmoddi4+0x2ac>
 8000bf8:	1a86      	subs	r6, r0, r2
 8000bfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000bfe:	2001      	movs	r0, #1
 8000c00:	2d00      	cmp	r5, #0
 8000c02:	d0e6      	beq.n	8000bd2 <__udivmoddi4+0xa6>
 8000c04:	e9c5 6300 	strd	r6, r3, [r5]
 8000c08:	e7e3      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000c0a:	2a00      	cmp	r2, #0
 8000c0c:	f040 8090 	bne.w	8000d30 <__udivmoddi4+0x204>
 8000c10:	eba1 040c 	sub.w	r4, r1, ip
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa1f f78c 	uxth.w	r7, ip
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c26:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2e:	fb07 f006 	mul.w	r0, r7, r6
 8000c32:	4298      	cmp	r0, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x11c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c3e:	d202      	bcs.n	8000c46 <__udivmoddi4+0x11a>
 8000c40:	4298      	cmp	r0, r3
 8000c42:	f200 80cd 	bhi.w	8000de0 <__udivmoddi4+0x2b4>
 8000c46:	4626      	mov	r6, r4
 8000c48:	1a1c      	subs	r4, r3, r0
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c52:	fb08 4410 	mls	r4, r8, r0, r4
 8000c56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5a:	fb00 f707 	mul.w	r7, r0, r7
 8000c5e:	429f      	cmp	r7, r3
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x148>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c6a:	d202      	bcs.n	8000c72 <__udivmoddi4+0x146>
 8000c6c:	429f      	cmp	r7, r3
 8000c6e:	f200 80b0 	bhi.w	8000dd2 <__udivmoddi4+0x2a6>
 8000c72:	4620      	mov	r0, r4
 8000c74:	1bdb      	subs	r3, r3, r7
 8000c76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7a:	e7a5      	b.n	8000bc8 <__udivmoddi4+0x9c>
 8000c7c:	f1c1 0620 	rsb	r6, r1, #32
 8000c80:	408b      	lsls	r3, r1
 8000c82:	fa22 f706 	lsr.w	r7, r2, r6
 8000c86:	431f      	orrs	r7, r3
 8000c88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c90:	ea43 030c 	orr.w	r3, r3, ip
 8000c94:	40f4      	lsrs	r4, r6
 8000c96:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9a:	0c38      	lsrs	r0, r7, #16
 8000c9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca0:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca4:	fa1f fc87 	uxth.w	ip, r7
 8000ca8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb4:	45a1      	cmp	r9, r4
 8000cb6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cba:	d90a      	bls.n	8000cd2 <__udivmoddi4+0x1a6>
 8000cbc:	193c      	adds	r4, r7, r4
 8000cbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cc2:	f080 8084 	bcs.w	8000dce <__udivmoddi4+0x2a2>
 8000cc6:	45a1      	cmp	r9, r4
 8000cc8:	f240 8081 	bls.w	8000dce <__udivmoddi4+0x2a2>
 8000ccc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd0:	443c      	add	r4, r7
 8000cd2:	eba4 0409 	sub.w	r4, r4, r9
 8000cd6:	fa1f f983 	uxth.w	r9, r3
 8000cda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cde:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cea:	45a4      	cmp	ip, r4
 8000cec:	d907      	bls.n	8000cfe <__udivmoddi4+0x1d2>
 8000cee:	193c      	adds	r4, r7, r4
 8000cf0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cf4:	d267      	bcs.n	8000dc6 <__udivmoddi4+0x29a>
 8000cf6:	45a4      	cmp	ip, r4
 8000cf8:	d965      	bls.n	8000dc6 <__udivmoddi4+0x29a>
 8000cfa:	3b02      	subs	r3, #2
 8000cfc:	443c      	add	r4, r7
 8000cfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d02:	fba0 9302 	umull	r9, r3, r0, r2
 8000d06:	eba4 040c 	sub.w	r4, r4, ip
 8000d0a:	429c      	cmp	r4, r3
 8000d0c:	46ce      	mov	lr, r9
 8000d0e:	469c      	mov	ip, r3
 8000d10:	d351      	bcc.n	8000db6 <__udivmoddi4+0x28a>
 8000d12:	d04e      	beq.n	8000db2 <__udivmoddi4+0x286>
 8000d14:	b155      	cbz	r5, 8000d2c <__udivmoddi4+0x200>
 8000d16:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d22:	40cb      	lsrs	r3, r1
 8000d24:	431e      	orrs	r6, r3
 8000d26:	40cc      	lsrs	r4, r1
 8000d28:	e9c5 6400 	strd	r6, r4, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	e750      	b.n	8000bd2 <__udivmoddi4+0xa6>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f103 	lsr.w	r1, r0, r3
 8000d38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d40:	4094      	lsls	r4, r2
 8000d42:	430c      	orrs	r4, r1
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d4c:	fa1f f78c 	uxth.w	r7, ip
 8000d50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d54:	fb08 3110 	mls	r1, r8, r0, r3
 8000d58:	0c23      	lsrs	r3, r4, #16
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb00 f107 	mul.w	r1, r0, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x24c>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d6e:	d22c      	bcs.n	8000dca <__udivmoddi4+0x29e>
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d92a      	bls.n	8000dca <__udivmoddi4+0x29e>
 8000d74:	3802      	subs	r0, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d80:	fb08 3311 	mls	r3, r8, r1, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb01 f307 	mul.w	r3, r1, r7
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x276>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d98:	d213      	bcs.n	8000dc2 <__udivmoddi4+0x296>
 8000d9a:	42a3      	cmp	r3, r4
 8000d9c:	d911      	bls.n	8000dc2 <__udivmoddi4+0x296>
 8000d9e:	3902      	subs	r1, #2
 8000da0:	4464      	add	r4, ip
 8000da2:	1ae4      	subs	r4, r4, r3
 8000da4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000da8:	e739      	b.n	8000c1e <__udivmoddi4+0xf2>
 8000daa:	4604      	mov	r4, r0
 8000dac:	e6f0      	b.n	8000b90 <__udivmoddi4+0x64>
 8000dae:	4608      	mov	r0, r1
 8000db0:	e706      	b.n	8000bc0 <__udivmoddi4+0x94>
 8000db2:	45c8      	cmp	r8, r9
 8000db4:	d2ae      	bcs.n	8000d14 <__udivmoddi4+0x1e8>
 8000db6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dbe:	3801      	subs	r0, #1
 8000dc0:	e7a8      	b.n	8000d14 <__udivmoddi4+0x1e8>
 8000dc2:	4631      	mov	r1, r6
 8000dc4:	e7ed      	b.n	8000da2 <__udivmoddi4+0x276>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	e799      	b.n	8000cfe <__udivmoddi4+0x1d2>
 8000dca:	4630      	mov	r0, r6
 8000dcc:	e7d4      	b.n	8000d78 <__udivmoddi4+0x24c>
 8000dce:	46d6      	mov	lr, sl
 8000dd0:	e77f      	b.n	8000cd2 <__udivmoddi4+0x1a6>
 8000dd2:	4463      	add	r3, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	e74d      	b.n	8000c74 <__udivmoddi4+0x148>
 8000dd8:	4606      	mov	r6, r0
 8000dda:	4623      	mov	r3, r4
 8000ddc:	4608      	mov	r0, r1
 8000dde:	e70f      	b.n	8000c00 <__udivmoddi4+0xd4>
 8000de0:	3e02      	subs	r6, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	e730      	b.n	8000c48 <__udivmoddi4+0x11c>
 8000de6:	bf00      	nop

08000de8 <__aeabi_idiv0>:
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <HAL_ADC_ConvHalfCpltCallback>:


	}

	// Called when the **first half** of the DMA buffer is filled
	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d102      	bne.n	8000e04 <HAL_ADC_ConvHalfCpltCallback+0x18>
	        process_first_half = 1;
 8000dfe:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	701a      	strb	r2, [r3, #0]
	    }
	}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40012000 	.word	0x40012000
 8000e14:	20008084 	.word	0x20008084

08000e18 <HAL_ADC_ConvCpltCallback>:

	// Called when the **second half** is filled (full transfer complete)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a05      	ldr	r2, [pc, #20]	@ (8000e3c <HAL_ADC_ConvCpltCallback+0x24>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d102      	bne.n	8000e30 <HAL_ADC_ConvCpltCallback+0x18>
	        // Process the second half of the buffer
	    	process_second_half = 1;
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_ADC_ConvCpltCallback+0x28>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
	    }
	}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	40012000 	.word	0x40012000
 8000e40:	20008085 	.word	0x20008085
 8000e44:	00000000 	.word	0x00000000

08000e48 <create_filter>:
 * @param order order number for attenuation rate
 * @param Q q-factor (if applicable (order > 1))
 * @param freq filter->cutoff frequency point
 */
void create_filter(filter *filter, enum filter_type type, uint8_t order, float Q, float freq)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08c      	sub	sp, #48	@ 0x30
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	460b      	mov	r3, r1
 8000e52:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e56:	edc7 0a00 	vstr	s1, [r7]
 8000e5a:	72fb      	strb	r3, [r7, #11]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	72bb      	strb	r3, [r7, #10]
    filter->type = type;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	7afa      	ldrb	r2, [r7, #11]
 8000e64:	701a      	strb	r2, [r3, #0]
    filter->cutoff = freq;
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
    filter->Q = Q;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	687a      	ldr	r2, [r7, #4]
 8000e70:	609a      	str	r2, [r3, #8]
    
    
    switch (order)
 8000e72:	7abb      	ldrb	r3, [r7, #10]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d002      	beq.n	8000e7e <create_filter+0x36>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d055      	beq.n	8000f28 <create_filter+0xe0>
 8000e7c:	e182      	b.n	8001184 <create_filter+0x33c>
        break;


    case 1:
        
        float tau = 1.0f / (2.0f * M_PI * freq);
 8000e7e:	6838      	ldr	r0, [r7, #0]
 8000e80:	f7ff fb82 	bl	8000588 <__aeabi_f2d>
 8000e84:	a3c6      	add	r3, pc, #792	@ (adr r3, 80011a0 <create_filter+0x358>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff fbd5 	bl	8000638 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	f04f 0000 	mov.w	r0, #0
 8000e96:	49c4      	ldr	r1, [pc, #784]	@ (80011a8 <create_filter+0x360>)
 8000e98:	f7ff fcf8 	bl	800088c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f7ff fdda 	bl	8000a5c <__aeabi_d2f>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	617b      	str	r3, [r7, #20]

        switch (type)
 8000eac:	7afb      	ldrb	r3, [r7, #11]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d002      	beq.n	8000eb8 <create_filter+0x70>
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d018      	beq.n	8000ee8 <create_filter+0xa0>
 8000eb6:	e02f      	b.n	8000f18 <create_filter+0xd0>
        {
        case LOW_PASS_FILTER:
            filter->coeff.first_order.a0 = SAMPLE_RATE / (tau + SAMPLE_RATE);
 8000eb8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000ebc:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80011ac <create_filter+0x364>
 8000ec0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000ec4:	eddf 6ab9 	vldr	s13, [pc, #740]	@ 80011ac <create_filter+0x364>
 8000ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	edc3 7a03 	vstr	s15, [r3, #12]
            filter->coeff.first_order.a1 = 1 - filter->coeff.first_order.a0;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	edd3 7a03 	vldr	s15, [r3, #12]
 8000ed8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000edc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	edc3 7a04 	vstr	s15, [r3, #16]

            break;
 8000ee6:	e01e      	b.n	8000f26 <create_filter+0xde>
        case HIGH_PASS_FILTER:
            filter->coeff.first_order.a0 = tau / (tau + SAMPLE_RATE);
 8000ee8:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eec:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80011ac <create_filter+0x364>
 8000ef0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000ef4:	edd7 6a05 	vldr	s13, [r7, #20]
 8000ef8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	edc3 7a03 	vstr	s15, [r3, #12]
            filter->coeff.first_order.a1 = 1 - filter->coeff.first_order.a0;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	edc3 7a04 	vstr	s15, [r3, #16]

            break;
 8000f16:	e006      	b.n	8000f26 <create_filter+0xde>

        default:
            printf("Unexpected Filter type: %d\n", filter->type);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	48a4      	ldr	r0, [pc, #656]	@ (80011b0 <create_filter+0x368>)
 8000f20:	f004 fba0 	bl	8005664 <iprintf>
            break;
 8000f24:	bf00      	nop
        }

        break;
 8000f26:	e134      	b.n	8001192 <create_filter+0x34a>

    case 2:


    	//if Q >= .707 it resonates
    	 switch (type)
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	2b03      	cmp	r3, #3
 8000f2c:	f200 80f5 	bhi.w	800111a <create_filter+0x2d2>
 8000f30:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <create_filter+0xf0>)
 8000f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f36:	bf00      	nop
 8000f38:	08000f49 	.word	0x08000f49
 8000f3c:	08000fc3 	.word	0x08000fc3
 8000f40:	08001041 	.word	0x08001041
 8000f44:	080010a7 	.word	0x080010a7
    		 float alpha = sinf(omega) / (2.0f * Q);
    		 float cos_omega = cosf(omega);
    		 float a0 = 1 + alpha;

    	 case LOW_PASS_FILTER:
    	     filter->coeff.second_order.b0 = ((1 - cos_omega) / 2.0f) / a0;
 8000f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f4c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f54:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000f58:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f5c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	edc3 7a06 	vstr	s15, [r3, #24]
    	     filter->coeff.second_order.b1 = (1 - cos_omega) / a0;
 8000f6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f6e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f72:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000f76:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	edc3 7a07 	vstr	s15, [r3, #28]
    	     filter->coeff.second_order.b2 = filter->coeff.second_order.b0;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	621a      	str	r2, [r3, #32]
    	     filter->coeff.second_order.a1 = (-2 * cos_omega) / a0;
 8000f8c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000f90:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8000f94:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f98:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000f9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	edc3 7a04 	vstr	s15, [r3, #16]
    	     filter->coeff.second_order.a2 = (1 - alpha) / a0;
 8000fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000faa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000fae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000fb2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000fb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	edc3 7a05 	vstr	s15, [r3, #20]
    	     break;
 8000fc0:	e0b2      	b.n	8001128 <create_filter+0x2e0>

    	 case HIGH_PASS_FILTER:
    	     filter->coeff.second_order.b0 = ((1 + cos_omega) / 2.0f) / a0;
 8000fc2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fce:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000fd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000fd6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	edc3 7a06 	vstr	s15, [r3, #24]
    	     filter->coeff.second_order.b1 = -(1 + cos_omega) / a0;
 8000fe4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8000fe8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ff0:	eef1 6a67 	vneg.f32	s13, s15
 8000ff4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	edc3 7a07 	vstr	s15, [r3, #28]
    	     filter->coeff.second_order.b2 = filter->coeff.second_order.b0;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	699a      	ldr	r2, [r3, #24]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	621a      	str	r2, [r3, #32]
    	     filter->coeff.second_order.a1 = (-2 * cos_omega) / a0;
 800100a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800100e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001012:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001016:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800101a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	edc3 7a04 	vstr	s15, [r3, #16]
    	     filter->coeff.second_order.a2 = (1 - alpha) / a0;
 8001024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001028:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800102c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001030:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001034:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	edc3 7a05 	vstr	s15, [r3, #20]
    	     break;
 800103e:	e073      	b.n	8001128 <create_filter+0x2e0>

    	 case BAND_PASS_FILTER:
    	     filter->coeff.second_order.b0 = alpha / a0;
 8001040:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001044:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a06 	vstr	s15, [r3, #24]
    	     filter->coeff.second_order.b1 = 0;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
    	     filter->coeff.second_order.b2 = -alpha / a0;
 800105a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800105e:	eef1 6a67 	vneg.f32	s13, s15
 8001062:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	edc3 7a08 	vstr	s15, [r3, #32]
    	     filter->coeff.second_order.a1 = -2 * cos_omega / a0;
 8001070:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001074:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001078:	ee67 6a87 	vmul.f32	s13, s15, s14
 800107c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	edc3 7a04 	vstr	s15, [r3, #16]
    	     filter->coeff.second_order.a2 = (1 - alpha) / a0;
 800108a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800108e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001092:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001096:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800109a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	edc3 7a05 	vstr	s15, [r3, #20]
    	     break;
 80010a4:	e040      	b.n	8001128 <create_filter+0x2e0>

    	 case BAND_STOP_FILTER:
    	     filter->coeff.second_order.b0 = 1 / a0;
 80010a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010aa:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	edc3 7a06 	vstr	s15, [r3, #24]
    	     filter->coeff.second_order.b1 = (-2 * cos_omega) / a0;
 80010b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010bc:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80010c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010c4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	edc3 7a07 	vstr	s15, [r3, #28]
    	     filter->coeff.second_order.b2 = 1 / a0;
 80010d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80010d6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	edc3 7a08 	vstr	s15, [r3, #32]
    	     filter->coeff.second_order.a1 = (-2 * cos_omega) / a0;
 80010e4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80010e8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80010ec:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010f0:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80010f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	edc3 7a04 	vstr	s15, [r3, #16]
    	     filter->coeff.second_order.a2 = (1 - alpha) / a0;
 80010fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001106:	ee77 6a67 	vsub.f32	s13, s14, s15
 800110a:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800110e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	edc3 7a05 	vstr	s15, [r3, #20]
    	     break;
 8001118:	e006      	b.n	8001128 <create_filter+0x2e0>

    	 default:

    	            printf("Unexpected Filter type: %d\n", filter->type);
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4619      	mov	r1, r3
 8001120:	4823      	ldr	r0, [pc, #140]	@ (80011b0 <create_filter+0x368>)
 8001122:	f004 fa9f 	bl	8005664 <iprintf>
    	            break;
 8001126:	bf00      	nop
    	        }


        float omega = (2 * M_PI * freq) / SAMPLE_RATE;
 8001128:	6838      	ldr	r0, [r7, #0]
 800112a:	f7ff fa2d 	bl	8000588 <__aeabi_f2d>
 800112e:	a31c      	add	r3, pc, #112	@ (adr r3, 80011a0 <create_filter+0x358>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa80 	bl	8000638 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <create_filter+0x36c>)
 8001146:	f7ff fba1 	bl	800088c <__aeabi_ddiv>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fc83 	bl	8000a5c <__aeabi_d2f>
 8001156:	4603      	mov	r3, r0
 8001158:	623b      	str	r3, [r7, #32]
        float alpha = sinf(omega) / (2 * Q);
 800115a:	ed97 0a08 	vldr	s0, [r7, #32]
 800115e:	f005 fa73 	bl	8006648 <sinf>
 8001162:	eef0 6a40 	vmov.f32	s13, s0
 8001166:	edd7 7a01 	vldr	s15, [r7, #4]
 800116a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800116e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001172:	edc7 7a07 	vstr	s15, [r7, #28]
        float cos_omega = cosf(omega);
 8001176:	ed97 0a08 	vldr	s0, [r7, #32]
 800117a:	f005 fa21 	bl	80065c0 <cosf>
 800117e:	ed87 0a06 	vstr	s0, [r7, #24]



        break;
 8001182:	e006      	b.n	8001192 <create_filter+0x34a>

    default:
        printf("Unexpected Filter Order: %d\n", filter->order);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	785b      	ldrb	r3, [r3, #1]
 8001188:	4619      	mov	r1, r3
 800118a:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <create_filter+0x370>)
 800118c:	f004 fa6a 	bl	8005664 <iprintf>
        break;
 8001190:	bf00      	nop
    }
}
 8001192:	bf00      	nop
 8001194:	3730      	adds	r7, #48	@ 0x30
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	f3af 8000 	nop.w
 80011a0:	54442d18 	.word	0x54442d18
 80011a4:	401921fb 	.word	0x401921fb
 80011a8:	3ff00000 	.word	0x3ff00000
 80011ac:	47bb8000 	.word	0x47bb8000
 80011b0:	080070d4 	.word	0x080070d4
 80011b4:	40f77000 	.word	0x40f77000
 80011b8:	080070f0 	.word	0x080070f0

080011bc <filter_data_iir>:
 * @brief filters data in time domain
 * @param data pointer to transformed signal freq response
 * @param filter filter to be used
 * @param size size of signal array
 */
void filter_data_iir(float *data, filter *filter, uint8_t size){
 80011bc:	b480      	push	{r7}
 80011be:	b089      	sub	sp, #36	@ 0x24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	4613      	mov	r3, r2
 80011c8:	71fb      	strb	r3, [r7, #7]

	  uint8_t i = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	77fb      	strb	r3, [r7, #31]



		    switch(filter->order){
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d002      	beq.n	80011dc <filter_data_iir+0x20>
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d02e      	beq.n	8001238 <filter_data_iir+0x7c>

		    	break;

		    default:

		    	break;
 80011da:	e079      	b.n	80012d0 <filter_data_iir+0x114>
		    	float previous_value = data[0];
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	61bb      	str	r3, [r7, #24]
		        for (i = 1; i < size; i++)
 80011e2:	2301      	movs	r3, #1
 80011e4:	77fb      	strb	r3, [r7, #31]
 80011e6:	e022      	b.n	800122e <filter_data_iir+0x72>
		            data[i] = filter->coeff.first_order.a0 * data[i]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	ed93 7a03 	vldr	s14, [r3, #12]
 80011ee:	7ffb      	ldrb	r3, [r7, #31]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	68fa      	ldr	r2, [r7, #12]
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ filter->coeff.first_order.a1 * previous_value;
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	edd3 6a04 	vldr	s13, [r3, #16]
 8001204:	edd7 7a06 	vldr	s15, [r7, #24]
 8001208:	ee66 7aa7 	vmul.f32	s15, s13, s15
		            data[i] = filter->coeff.first_order.a0 * data[i]
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	68fa      	ldr	r2, [r7, #12]
 8001212:	4413      	add	r3, r2
					+ filter->coeff.first_order.a1 * previous_value;
 8001214:	ee77 7a27 	vadd.f32	s15, s14, s15
		            data[i] = filter->coeff.first_order.a0 * data[i]
 8001218:	edc3 7a00 	vstr	s15, [r3]
		            previous_value = data[i];
 800121c:	7ffb      	ldrb	r3, [r7, #31]
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4413      	add	r3, r2
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	61bb      	str	r3, [r7, #24]
		        for (i = 1; i < size; i++)
 8001228:	7ffb      	ldrb	r3, [r7, #31]
 800122a:	3301      	adds	r3, #1
 800122c:	77fb      	strb	r3, [r7, #31]
 800122e:	7ffa      	ldrb	r2, [r7, #31]
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	429a      	cmp	r2, r3
 8001234:	d3d8      	bcc.n	80011e8 <filter_data_iir+0x2c>
		    	break;
 8001236:	e04b      	b.n	80012d0 <filter_data_iir+0x114>
		    		float x = data[i];
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	68fa      	ldr	r2, [r7, #12]
 800123e:	4413      	add	r3, r2
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	617b      	str	r3, [r7, #20]
		    	    float y = filter->coeff.second_order.b0 * x
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	ed93 7a06 	vldr	s14, [r3, #24]
 800124a:	edd7 7a05 	vldr	s15, [r7, #20]
 800124e:	ee27 7a27 	vmul.f32	s14, s14, s15
		    	            + filter->coeff.second_order.b1 * filter->coeff.second_order.xn_1
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	edd3 6a07 	vldr	s13, [r3, #28]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800125e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001262:	ee37 7a27 	vadd.f32	s14, s14, s15
		    	            + filter->coeff.second_order.b2 * filter->coeff.second_order.xn_2
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	edd3 6a08 	vldr	s13, [r3, #32]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001276:	ee37 7a27 	vadd.f32	s14, s14, s15
		    	            - filter->coeff.second_order.a1 * filter->coeff.second_order.yn_1
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	edd3 6a04 	vldr	s13, [r3, #16]
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001286:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800128a:	ee37 7a67 	vsub.f32	s14, s14, s15
		    	            - filter->coeff.second_order.a2 * filter->coeff.second_order.yn_2;
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	edd3 6a05 	vldr	s13, [r3, #20]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800129a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		    	    float y = filter->coeff.second_order.b0 * x
 800129e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012a2:	edc7 7a04 	vstr	s15, [r7, #16]
		    	    data[i] = y;//updates value in array
 80012a6:	7ffb      	ldrb	r3, [r7, #31]
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	601a      	str	r2, [r3, #0]
		    	    filter->coeff.second_order.xn_2 = filter->coeff.second_order.xn_1;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28
		    	    filter->coeff.second_order.xn_1 = x;
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	697a      	ldr	r2, [r7, #20]
 80012be:	625a      	str	r2, [r3, #36]	@ 0x24
		    	    filter->coeff.second_order.yn_2 = filter->coeff.second_order.yn_1;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	631a      	str	r2, [r3, #48]	@ 0x30
		    	    filter->coeff.second_order.yn_1 = y;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	62da      	str	r2, [r3, #44]	@ 0x2c
		    	break;
 80012ce:	bf00      	nop





	}
 80012d0:	bf00      	nop
 80012d2:	3724      	adds	r7, #36	@ 0x24
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 80012dc:	b40f      	push	{r0, r1, r2, r3}
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0

//	if(res == osOK){

  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012f2:	480b      	ldr	r0, [pc, #44]	@ (8001320 <myprintf+0x44>)
 80012f4:	f004 fa36 	bl	8005764 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80012f8:	4809      	ldr	r0, [pc, #36]	@ (8001320 <myprintf+0x44>)
 80012fa:	f7fe ff89 	bl	8000210 <strlen>
 80012fe:	4603      	mov	r3, r0
 8001300:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	b29a      	uxth	r2, r3
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	4905      	ldr	r1, [pc, #20]	@ (8001320 <myprintf+0x44>)
 800130c:	4805      	ldr	r0, [pc, #20]	@ (8001324 <myprintf+0x48>)
 800130e:	f003 fc75 	bl	8004bfc <HAL_UART_Transmit>

	}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr
 8001320:	20008234 	.word	0x20008234
 8001324:	200081ec 	.word	0x200081ec

08001328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800132e:	f000 fd8b 	bl	8001e48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001332:	f000 f891 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001336:	f000 fa23 	bl	8001780 <MX_GPIO_Init>
  MX_DMA_Init();
 800133a:	f000 f9eb 	bl	8001714 <MX_DMA_Init>
  MX_ADC1_Init();
 800133e:	f000 f8f7 	bl	8001530 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001342:	f000 f9bd 	bl	80016c0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001346:	f000 f96f 	bl	8001628 <MX_TIM2_Init>
  MX_DAC_Init();
 800134a:	f000 f943 	bl	80015d4 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
   uint32_t i;
   uint8_t dac = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]



   myprintf("Start of start adc\n");
 8001352:	4834      	ldr	r0, [pc, #208]	@ (8001424 <main+0xfc>)
 8001354:	f7ff ffc2 	bl	80012dc <myprintf>

   //begins filling of ADC buffer
   HAL_TIM_Base_Start(&htim2);
 8001358:	4833      	ldr	r0, [pc, #204]	@ (8001428 <main+0x100>)
 800135a:	f002 ff77 	bl	800424c <HAL_TIM_Base_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001362:	4932      	ldr	r1, [pc, #200]	@ (800142c <main+0x104>)
 8001364:	4832      	ldr	r0, [pc, #200]	@ (8001430 <main+0x108>)
 8001366:	f000 fdf5 	bl	8001f54 <HAL_ADC_Start_DMA>

   filter* lowpass_test = malloc(sizeof(filter));
 800136a:	2034      	movs	r0, #52	@ 0x34
 800136c:	f004 f802 	bl	8005374 <malloc>
 8001370:	4603      	mov	r3, r0
 8001372:	60bb      	str	r3, [r7, #8]
   filter* highpass_test = malloc(sizeof(filter));
 8001374:	2034      	movs	r0, #52	@ 0x34
 8001376:	f003 fffd 	bl	8005374 <malloc>
 800137a:	4603      	mov	r3, r0
 800137c:	607b      	str	r3, [r7, #4]
   filter* bandpass_test = malloc(sizeof(filter));
 800137e:	2034      	movs	r0, #52	@ 0x34
 8001380:	f003 fff8 	bl	8005374 <malloc>
 8001384:	4603      	mov	r3, r0
 8001386:	603b      	str	r3, [r7, #0]
   create_filter(lowpass_test, LOW_PASS_FILTER, 2, 1, 80);
 8001388:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8001434 <main+0x10c>
 800138c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001390:	2202      	movs	r2, #2
 8001392:	2100      	movs	r1, #0
 8001394:	68b8      	ldr	r0, [r7, #8]
 8001396:	f7ff fd57 	bl	8000e48 <create_filter>
   create_filter(highpass_test, HIGH_PASS_FILTER, -1, 5, 60);
 800139a:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8001438 <main+0x110>
 800139e:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80013a2:	22ff      	movs	r2, #255	@ 0xff
 80013a4:	2101      	movs	r1, #1
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd4e 	bl	8000e48 <create_filter>
   create_filter(bandpass_test, BAND_PASS_FILTER, 2, .7, 60);
 80013ac:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8001438 <main+0x110>
 80013b0:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 800143c <main+0x114>
 80013b4:	2202      	movs	r2, #2
 80013b6:	2102      	movs	r1, #2
 80013b8:	6838      	ldr	r0, [r7, #0]
 80013ba:	f7ff fd45 	bl	8000e48 <create_filter>
	   */



	  //triggers when adc buff is half full
	   	if(process_first_half == 1){
 80013be:	4b20      	ldr	r3, [pc, #128]	@ (8001440 <main+0x118>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d10d      	bne.n	80013e2 <main+0xba>


	   		filter_data_iir(adc_buf, bandpass_test, HALF_BUF_LEN);
 80013c6:	2200      	movs	r2, #0
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	4818      	ldr	r0, [pc, #96]	@ (800142c <main+0x104>)
 80013cc:	f7ff fef6 	bl	80011bc <filter_data_iir>




	   		//copies processed data into dac
	   		memcpy(dac_buf, adc_buf, (ADC_BUF_LEN * sizeof(uint16_t)) / 2);
 80013d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013d4:	4915      	ldr	r1, [pc, #84]	@ (800142c <main+0x104>)
 80013d6:	481b      	ldr	r0, [pc, #108]	@ (8001444 <main+0x11c>)
 80013d8:	f004 fa5d 	bl	8005896 <memcpy>


	   		process_first_half = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	@ (8001440 <main+0x118>)
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
	   	}
	   	//triggers once the second half is filled
	   	if(process_second_half == 1){
 80013e2:	4b19      	ldr	r3, [pc, #100]	@ (8001448 <main+0x120>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d1e9      	bne.n	80013be <main+0x96>


	   		filter_data_iir(&adc_buf[HALF_BUF_LEN], bandpass_test, HALF_BUF_LEN);
 80013ea:	2200      	movs	r2, #0
 80013ec:	6839      	ldr	r1, [r7, #0]
 80013ee:	4817      	ldr	r0, [pc, #92]	@ (800144c <main+0x124>)
 80013f0:	f7ff fee4 	bl	80011bc <filter_data_iir>

//
//	   		//fill second half of buffer
	   		memcpy(&dac_buf[ADC_BUF_LEN/2], &adc_buf[ADC_BUF_LEN/2], (ADC_BUF_LEN * sizeof(uint16_t)) / 2);
 80013f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013f8:	4914      	ldr	r1, [pc, #80]	@ (800144c <main+0x124>)
 80013fa:	4815      	ldr	r0, [pc, #84]	@ (8001450 <main+0x128>)
 80013fc:	f004 fa4b 	bl	8005896 <memcpy>


	   		if(dac == 0){
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10a      	bne.n	800141c <main+0xf4>
	   	    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)dac_buf, ADC_BUF_LEN, DAC_ALIGN_12B_R);
 8001406:	2300      	movs	r3, #0
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800140e:	4a0d      	ldr	r2, [pc, #52]	@ (8001444 <main+0x11c>)
 8001410:	2100      	movs	r1, #0
 8001412:	4810      	ldr	r0, [pc, #64]	@ (8001454 <main+0x12c>)
 8001414:	f001 fa70 	bl	80028f8 <HAL_DAC_Start_DMA>
	   		dac = 1;
 8001418:	2301      	movs	r3, #1
 800141a:	73fb      	strb	r3, [r7, #15]
	   		}

	   		process_second_half = 0;
 800141c:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <main+0x120>)
 800141e:	2200      	movs	r2, #0
 8001420:	701a      	strb	r2, [r3, #0]
	   	if(process_first_half == 1){
 8001422:	e7cc      	b.n	80013be <main+0x96>
 8001424:	08007130 	.word	0x08007130
 8001428:	200081a4 	.word	0x200081a4
 800142c:	20000084 	.word	0x20000084
 8001430:	20008088 	.word	0x20008088
 8001434:	42a00000 	.word	0x42a00000
 8001438:	42700000 	.word	0x42700000
 800143c:	3f333333 	.word	0x3f333333
 8001440:	20008084 	.word	0x20008084
 8001444:	20004084 	.word	0x20004084
 8001448:	20008085 	.word	0x20008085
 800144c:	20002084 	.word	0x20002084
 8001450:	20006084 	.word	0x20006084
 8001454:	20008130 	.word	0x20008130

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2234      	movs	r2, #52	@ 0x34
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f004 f98a 	bl	8005780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 0308 	add.w	r3, r7, #8
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	4b29      	ldr	r3, [pc, #164]	@ (8001528 <SystemClock_Config+0xd0>)
 8001482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001484:	4a28      	ldr	r2, [pc, #160]	@ (8001528 <SystemClock_Config+0xd0>)
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800148a:	6413      	str	r3, [r2, #64]	@ 0x40
 800148c:	4b26      	ldr	r3, [pc, #152]	@ (8001528 <SystemClock_Config+0xd0>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	4b23      	ldr	r3, [pc, #140]	@ (800152c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80014a4:	4a21      	ldr	r2, [pc, #132]	@ (800152c <SystemClock_Config+0xd4>)
 80014a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <SystemClock_Config+0xd4>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014b4:	603b      	str	r3, [r7, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014b8:	2302      	movs	r3, #2
 80014ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014bc:	2301      	movs	r3, #1
 80014be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014c0:	2310      	movs	r3, #16
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c4:	2302      	movs	r3, #2
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014cc:	2308      	movs	r3, #8
 80014ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014d0:	2348      	movs	r3, #72	@ 0x48
 80014d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d4:	2302      	movs	r3, #2
 80014d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014dc:	2302      	movs	r3, #2
 80014de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 031c 	add.w	r3, r7, #28
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 fbc3 	bl	8003c70 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80014f0:	f000 f972 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001500:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001504:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150a:	f107 0308 	add.w	r3, r7, #8
 800150e:	2102      	movs	r1, #2
 8001510:	4618      	mov	r0, r3
 8001512:	f002 f8b7 	bl	8003684 <HAL_RCC_ClockConfig>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800151c:	f000 f95c 	bl	80017d8 <Error_Handler>
  }
}
 8001520:	bf00      	nop
 8001522:	3750      	adds	r7, #80	@ 0x50
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	40007000 	.word	0x40007000

08001530 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001536:	463b      	mov	r3, r7
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001542:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001544:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <MX_ADC1_Init+0xa0>)
 8001546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <MX_ADC1_Init+0x9c>)
 800154a:	2200      	movs	r2, #0
 800154c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001556:	2200      	movs	r2, #0
 8001558:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_ADC1_Init+0x9c>)
 800155c:	2200      	movs	r2, #0
 800155e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001560:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_ADC1_Init+0x9c>)
 800156a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800156e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8001570:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001572:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001576:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_ADC1_Init+0x9c>)
 800157a:	2200      	movs	r2, #0
 800157c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001580:	2201      	movs	r2, #1
 8001582:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <MX_ADC1_Init+0x9c>)
 800158e:	2201      	movs	r2, #1
 8001590:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001592:	480e      	ldr	r0, [pc, #56]	@ (80015cc <MX_ADC1_Init+0x9c>)
 8001594:	f000 fc9a 	bl	8001ecc <HAL_ADC_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800159e:	f000 f91b 	bl	80017d8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015a6:	2301      	movs	r3, #1
 80015a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	@ (80015cc <MX_ADC1_Init+0x9c>)
 80015b4:	f000 fdec 	bl	8002190 <HAL_ADC_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80015be:	f000 f90b 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20008088 	.word	0x20008088
 80015d0:	40012000 	.word	0x40012000

080015d4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80015da:	463b      	mov	r3, r7
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_DAC_Init+0x4c>)
 80015e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001624 <MX_DAC_Init+0x50>)
 80015e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <MX_DAC_Init+0x4c>)
 80015ea:	f001 f963 	bl	80028b4 <HAL_DAC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80015f4:	f000 f8f0 	bl	80017d8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80015f8:	2324      	movs	r3, #36	@ 0x24
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	2200      	movs	r2, #0
 8001604:	4619      	mov	r1, r3
 8001606:	4806      	ldr	r0, [pc, #24]	@ (8001620 <MX_DAC_Init+0x4c>)
 8001608:	f001 fa54 	bl	8002ab4 <HAL_DAC_ConfigChannel>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8001612:	f000 f8e1 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20008130 	.word	0x20008130
 8001624:	40007400 	.word	0x40007400

08001628 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2200      	movs	r2, #0
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	605a      	str	r2, [r3, #4]
 8001638:	609a      	str	r2, [r3, #8]
 800163a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163c:	463b      	mov	r3, r7
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001644:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <MX_TIM2_Init+0x94>)
 8001646:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800164a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800164c:	4b1b      	ldr	r3, [pc, #108]	@ (80016bc <MX_TIM2_Init+0x94>)
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001652:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <MX_TIM2_Init+0x94>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 749;
 8001658:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <MX_TIM2_Init+0x94>)
 800165a:	f240 22ed 	movw	r2, #749	@ 0x2ed
 800165e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001660:	4b16      	ldr	r3, [pc, #88]	@ (80016bc <MX_TIM2_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <MX_TIM2_Init+0x94>)
 8001668:	2280      	movs	r2, #128	@ 0x80
 800166a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800166c:	4813      	ldr	r0, [pc, #76]	@ (80016bc <MX_TIM2_Init+0x94>)
 800166e:	f002 fd9d 	bl	80041ac <HAL_TIM_Base_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001678:	f000 f8ae 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800167c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001680:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001682:	f107 0308 	add.w	r3, r7, #8
 8001686:	4619      	mov	r1, r3
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <MX_TIM2_Init+0x94>)
 800168a:	f002 ffa7 	bl	80045dc <HAL_TIM_ConfigClockSource>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001694:	f000 f8a0 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001698:	2320      	movs	r3, #32
 800169a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a0:	463b      	mov	r3, r7
 80016a2:	4619      	mov	r1, r3
 80016a4:	4805      	ldr	r0, [pc, #20]	@ (80016bc <MX_TIM2_Init+0x94>)
 80016a6:	f003 f9c9 	bl	8004a3c <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016b0:	f000 f892 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200081a4 	.word	0x200081a4

080016c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c4:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	@ (8001710 <MX_USART2_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80016ca:	4b10      	ldr	r3, [pc, #64]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016cc:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80016d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0b      	ldr	r3, [pc, #44]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b08      	ldr	r3, [pc, #32]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f6:	4805      	ldr	r0, [pc, #20]	@ (800170c <MX_USART2_UART_Init+0x4c>)
 80016f8:	f003 fa30 	bl	8004b5c <HAL_UART_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001702:	f000 f869 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200081ec 	.word	0x200081ec
 8001710:	40004400 	.word	0x40004400

08001714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_DMA_Init+0x68>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a16      	ldr	r2, [pc, #88]	@ (800177c <MX_DMA_Init+0x68>)
 8001724:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_DMA_Init+0x68>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	603b      	str	r3, [r7, #0]
 800173a:	4b10      	ldr	r3, [pc, #64]	@ (800177c <MX_DMA_Init+0x68>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a0f      	ldr	r2, [pc, #60]	@ (800177c <MX_DMA_Init+0x68>)
 8001740:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <MX_DMA_Init+0x68>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800174e:	603b      	str	r3, [r7, #0]
 8001750:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	2010      	movs	r0, #16
 8001758:	f001 f882 	bl	8002860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800175c:	2010      	movs	r0, #16
 800175e:	f001 f89b 	bl	8002898 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2100      	movs	r1, #0
 8001766:	2038      	movs	r0, #56	@ 0x38
 8001768:	f001 f87a 	bl	8002860 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800176c:	2038      	movs	r0, #56	@ 0x38
 800176e:	f001 f893 	bl	8002898 <HAL_NVIC_EnableIRQ>

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023800 	.word	0x40023800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_GPIO_Init+0x30>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <MX_GPIO_Init+0x30>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_GPIO_Init+0x30>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800

080017b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d101      	bne.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017c6:	f000 fb61 	bl	8001e8c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <Error_Handler+0x8>

080017e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <HAL_MspInit+0x4c>)
 80017f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <HAL_MspInit+0x4c>)
 80017f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HAL_MspInit+0x4c>)
 80017fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	603b      	str	r3, [r7, #0]
 800180a:	4b09      	ldr	r3, [pc, #36]	@ (8001830 <HAL_MspInit+0x4c>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180e:	4a08      	ldr	r2, [pc, #32]	@ (8001830 <HAL_MspInit+0x4c>)
 8001810:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001814:	6413      	str	r3, [r2, #64]	@ 0x40
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <HAL_MspInit+0x4c>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800181e:	603b      	str	r3, [r7, #0]
 8001820:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800

08001834 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	@ 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a33      	ldr	r2, [pc, #204]	@ (8001920 <HAL_ADC_MspInit+0xec>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d160      	bne.n	8001918 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	4a31      	ldr	r2, [pc, #196]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001864:	6453      	str	r3, [r2, #68]	@ 0x44
 8001866:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800186a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186e:	613b      	str	r3, [r7, #16]
 8001870:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	4b2b      	ldr	r3, [pc, #172]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4a2a      	ldr	r2, [pc, #168]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 800187c:	f043 0301 	orr.w	r3, r3, #1
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4b28      	ldr	r3, [pc, #160]	@ (8001924 <HAL_ADC_MspInit+0xf0>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800188e:	2301      	movs	r3, #1
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	4821      	ldr	r0, [pc, #132]	@ (8001928 <HAL_ADC_MspInit+0xf4>)
 80018a2:	f001 fd5b 	bl	800335c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018a6:	4b21      	ldr	r3, [pc, #132]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018a8:	4a21      	ldr	r2, [pc, #132]	@ (8001930 <HAL_ADC_MspInit+0xfc>)
 80018aa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018b2:	4b1e      	ldr	r3, [pc, #120]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018b8:	4b1c      	ldr	r3, [pc, #112]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018be:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018c6:	4b19      	ldr	r3, [pc, #100]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80018cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018de:	4b13      	ldr	r3, [pc, #76]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018e4:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018e6:	2204      	movs	r2, #4
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018ea:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018ec:	2203      	movs	r2, #3
 80018ee:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80018f0:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018f6:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018fc:	480b      	ldr	r0, [pc, #44]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 80018fe:	f001 f9bd 	bl	8002c7c <HAL_DMA_Init>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8001908:	f7ff ff66 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a07      	ldr	r2, [pc, #28]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 8001910:	639a      	str	r2, [r3, #56]	@ 0x38
 8001912:	4a06      	ldr	r2, [pc, #24]	@ (800192c <HAL_ADC_MspInit+0xf8>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40012000 	.word	0x40012000
 8001924:	40023800 	.word	0x40023800
 8001928:	40020000 	.word	0x40020000
 800192c:	200080d0 	.word	0x200080d0
 8001930:	40026410 	.word	0x40026410

08001934 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08a      	sub	sp, #40	@ 0x28
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 0314 	add.w	r3, r7, #20
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a34      	ldr	r2, [pc, #208]	@ (8001a24 <HAL_DAC_MspInit+0xf0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d161      	bne.n	8001a1a <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b33      	ldr	r3, [pc, #204]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195e:	4a32      	ldr	r2, [pc, #200]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 8001960:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001964:	6413      	str	r3, [r2, #64]	@ 0x40
 8001966:	4b30      	ldr	r3, [pc, #192]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	4b2c      	ldr	r3, [pc, #176]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197a:	4a2b      	ldr	r2, [pc, #172]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	@ 0x30
 8001982:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <HAL_DAC_MspInit+0xf4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800198e:	2310      	movs	r3, #16
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001992:	2303      	movs	r3, #3
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 0314 	add.w	r3, r7, #20
 800199e:	4619      	mov	r1, r3
 80019a0:	4822      	ldr	r0, [pc, #136]	@ (8001a2c <HAL_DAC_MspInit+0xf8>)
 80019a2:	f001 fcdb 	bl	800335c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019a8:	4a22      	ldr	r2, [pc, #136]	@ (8001a34 <HAL_DAC_MspInit+0x100>)
 80019aa:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80019ac:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019ae:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80019b2:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019b6:	2240      	movs	r2, #64	@ 0x40
 80019b8:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019bc:	2200      	movs	r2, #0
 80019be:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019c6:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019ce:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019d0:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019d6:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80019d8:	4b15      	ldr	r3, [pc, #84]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019de:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80019e0:	4b13      	ldr	r3, [pc, #76]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019e6:	4b12      	ldr	r3, [pc, #72]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019e8:	2204      	movs	r2, #4
 80019ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019ec:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019ee:	2203      	movs	r2, #3
 80019f0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_SINGLE;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80019f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80019fe:	480c      	ldr	r0, [pc, #48]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 8001a00:	f001 f93c 	bl	8002c7c <HAL_DMA_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_DAC_MspInit+0xda>
    {
      Error_Handler();
 8001a0a:	f7ff fee5 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <HAL_DAC_MspInit+0xfc>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3728      	adds	r7, #40	@ 0x28
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40007400 	.word	0x40007400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	20008144 	.word	0x20008144
 8001a34:	40026088 	.word	0x40026088

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a48:	d10d      	bne.n	8001a66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b09      	ldr	r3, [pc, #36]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	4a08      	ldr	r2, [pc, #32]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <HAL_TIM_Base_MspInit+0x3c>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800

08001a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	@ (8001afc <HAL_UART_MspInit+0x84>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d12b      	bne.n	8001af2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	4b18      	ldr	r3, [pc, #96]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa2:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aaa:	4b15      	ldr	r3, [pc, #84]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001abe:	4a10      	ldr	r2, [pc, #64]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_UART_MspInit+0x88>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad2:	230c      	movs	r3, #12
 8001ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <HAL_UART_MspInit+0x8c>)
 8001aee:	f001 fc35 	bl	800335c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001af2:	bf00      	nop
 8001af4:	3728      	adds	r7, #40	@ 0x28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40004400 	.word	0x40004400
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001b14:	2300      	movs	r3, #0
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b20:	4a2d      	ldr	r2, [pc, #180]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b28:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <HAL_InitTick+0xd0>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b34:	f107 020c 	add.w	r2, r7, #12
 8001b38:	f107 0310 	add.w	r3, r7, #16
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f001 feba 	bl	80038b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b44:	f001 fea4 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8001b48:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b4c:	4a23      	ldr	r2, [pc, #140]	@ (8001bdc <HAL_InitTick+0xd4>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b58:	4b21      	ldr	r3, [pc, #132]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b5a:	4a22      	ldr	r2, [pc, #136]	@ (8001be4 <HAL_InitTick+0xdc>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a1e      	ldr	r2, [pc, #120]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b6c:	4b1c      	ldr	r3, [pc, #112]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b7e:	4818      	ldr	r0, [pc, #96]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b80:	f002 fb14 	bl	80041ac <HAL_TIM_Base_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d11b      	bne.n	8001bca <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b92:	4813      	ldr	r0, [pc, #76]	@ (8001be0 <HAL_InitTick+0xd8>)
 8001b94:	f002 fbc2 	bl	800431c <HAL_TIM_Base_Start_IT>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d111      	bne.n	8001bca <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ba6:	2019      	movs	r0, #25
 8001ba8:	f000 fe76 	bl	8002898 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b0f      	cmp	r3, #15
 8001bb0:	d808      	bhi.n	8001bc4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	2019      	movs	r0, #25
 8001bb8:	f000 fe52 	bl	8002860 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8001be8 <HAL_InitTick+0xe0>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e002      	b.n	8001bca <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	431bde83 	.word	0x431bde83
 8001be0:	20008334 	.word	0x20008334
 8001be4:	40010000 	.word	0x40010000
 8001be8:	20000004 	.word	0x20000004

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c50:	4802      	ldr	r0, [pc, #8]	@ (8001c5c <DMA1_Stream5_IRQHandler+0x10>)
 8001c52:	f001 f919 	bl	8002e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20008144 	.word	0x20008144

08001c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c64:	4802      	ldr	r0, [pc, #8]	@ (8001c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001c66:	f002 fbc9 	bl	80043fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20008334 	.word	0x20008334

08001c74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c78:	4802      	ldr	r0, [pc, #8]	@ (8001c84 <DMA2_Stream0_IRQHandler+0x10>)
 8001c7a:	f001 f905 	bl	8002e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	200080d0 	.word	0x200080d0

08001c88 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
 8001c98:	e00a      	b.n	8001cb0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c9a:	f3af 8000 	nop.w
 8001c9e:	4601      	mov	r1, r0
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	60ba      	str	r2, [r7, #8]
 8001ca6:	b2ca      	uxtb	r2, r1
 8001ca8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	3301      	adds	r3, #1
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	dbf0      	blt.n	8001c9a <_read+0x12>
  }

  return len;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	e009      	b.n	8001ce8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1c5a      	adds	r2, r3, #1
 8001cd8:	60ba      	str	r2, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	dbf1      	blt.n	8001cd4 <_write+0x12>
  }
  return len;
 8001cf0:	687b      	ldr	r3, [r7, #4]
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <_close>:

int _close(int file)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	b083      	sub	sp, #12
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d22:	605a      	str	r2, [r3, #4]
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_isatty>:

int _isatty(int file)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d3a:	2301      	movs	r3, #1
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
	...

08001d64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d6c:	4a14      	ldr	r2, [pc, #80]	@ (8001dc0 <_sbrk+0x5c>)
 8001d6e:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <_sbrk+0x60>)
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d78:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <_sbrk+0x64>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d102      	bne.n	8001d86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d80:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <_sbrk+0x64>)
 8001d82:	4a12      	ldr	r2, [pc, #72]	@ (8001dcc <_sbrk+0x68>)
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d207      	bcs.n	8001da4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d94:	f003 fd52 	bl	800583c <__errno>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	e009      	b.n	8001db8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da4:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <_sbrk+0x64>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001daa:	4b07      	ldr	r3, [pc, #28]	@ (8001dc8 <_sbrk+0x64>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4413      	add	r3, r2
 8001db2:	4a05      	ldr	r2, [pc, #20]	@ (8001dc8 <_sbrk+0x64>)
 8001db4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db6:	68fb      	ldr	r3, [r7, #12]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20020000 	.word	0x20020000
 8001dc4:	00000400 	.word	0x00000400
 8001dc8:	2000837c 	.word	0x2000837c
 8001dcc:	200084d0 	.word	0x200084d0

08001dd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <SystemInit+0x20>)
 8001dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dda:	4a05      	ldr	r2, [pc, #20]	@ (8001df0 <SystemInit+0x20>)
 8001ddc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001df4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e2c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001df8:	f7ff ffea 	bl	8001dd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dfe:	490d      	ldr	r1, [pc, #52]	@ (8001e34 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e00:	4a0d      	ldr	r2, [pc, #52]	@ (8001e38 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0a      	ldr	r2, [pc, #40]	@ (8001e3c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e14:	4c0a      	ldr	r4, [pc, #40]	@ (8001e40 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001e22:	f003 fd11 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e26:	f7ff fa7f 	bl	8001328 <main>
  bx  lr    
 8001e2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e34:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001e38:	08007578 	.word	0x08007578
  ldr r2, =_sbss
 8001e3c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001e40:	200084d0 	.word	0x200084d0

08001e44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e44:	e7fe      	b.n	8001e44 <ADC_IRQHandler>
	...

08001e48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0d      	ldr	r2, [pc, #52]	@ (8001e88 <HAL_Init+0x40>)
 8001e52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	@ (8001e88 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e88 <HAL_Init+0x40>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <HAL_Init+0x40>)
 8001e6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e70:	2003      	movs	r0, #3
 8001e72:	f000 fcea 	bl	800284a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e76:	200f      	movs	r0, #15
 8001e78:	f7ff fe46 	bl	8001b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e7c:	f7ff fcb2 	bl	80017e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e80:	2300      	movs	r3, #0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023c00 	.word	0x40023c00

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	20008380 	.word	0x20008380

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20008380 	.word	0x20008380

08001ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e033      	b.n	8001f4a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fca2 	bl	8001834 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d118      	bne.n	8001f3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f12:	f023 0302 	bic.w	r3, r3, #2
 8001f16:	f043 0202 	orr.w	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 fa68 	bl	80023f4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	f043 0201 	orr.w	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f3a:	e001      	b.n	8001f40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_ADC_Start_DMA+0x22>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e0eb      	b.n	800214e <HAL_ADC_Start_DMA+0x1fa>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d018      	beq.n	8001fbe <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	689a      	ldr	r2, [r3, #8]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0201 	orr.w	r2, r2, #1
 8001f9a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f9c:	4b6e      	ldr	r3, [pc, #440]	@ (8002158 <HAL_ADC_Start_DMA+0x204>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6e      	ldr	r2, [pc, #440]	@ (800215c <HAL_ADC_Start_DMA+0x208>)
 8001fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa6:	0c9a      	lsrs	r2, r3, #18
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001fb0:	e002      	b.n	8001fb8 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f9      	bne.n	8001fb2 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fcc:	d107      	bne.n	8001fde <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fdc:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	f040 80a3 	bne.w	8002134 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001ff6:	f023 0301 	bic.w	r3, r3, #1
 8001ffa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002018:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002024:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800202c:	d106      	bne.n	800203c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002032:	f023 0206 	bic.w	r2, r3, #6
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	645a      	str	r2, [r3, #68]	@ 0x44
 800203a:	e002      	b.n	8002042 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204a:	4b45      	ldr	r3, [pc, #276]	@ (8002160 <HAL_ADC_Start_DMA+0x20c>)
 800204c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002052:	4a44      	ldr	r2, [pc, #272]	@ (8002164 <HAL_ADC_Start_DMA+0x210>)
 8002054:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800205a:	4a43      	ldr	r2, [pc, #268]	@ (8002168 <HAL_ADC_Start_DMA+0x214>)
 800205c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002062:	4a42      	ldr	r2, [pc, #264]	@ (800216c <HAL_ADC_Start_DMA+0x218>)
 8002064:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800206e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800207e:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	689a      	ldr	r2, [r3, #8]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800208e:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	334c      	adds	r3, #76	@ 0x4c
 800209a:	4619      	mov	r1, r3
 800209c:	68ba      	ldr	r2, [r7, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f000 fe9a 	bl	8002dd8 <HAL_DMA_Start_IT>
 80020a4:	4603      	mov	r3, r0
 80020a6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d12a      	bne.n	800210a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <HAL_ADC_Start_DMA+0x21c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d015      	beq.n	80020ea <HAL_ADC_Start_DMA+0x196>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002174 <HAL_ADC_Start_DMA+0x220>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d105      	bne.n	80020d4 <HAL_ADC_Start_DMA+0x180>
 80020c8:	4b25      	ldr	r3, [pc, #148]	@ (8002160 <HAL_ADC_Start_DMA+0x20c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00a      	beq.n	80020ea <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <HAL_ADC_Start_DMA+0x224>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d136      	bne.n	800214c <HAL_ADC_Start_DMA+0x1f8>
 80020de:	4b20      	ldr	r3, [pc, #128]	@ (8002160 <HAL_ADC_Start_DMA+0x20c>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d130      	bne.n	800214c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d129      	bne.n	800214c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	e020      	b.n	800214c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a18      	ldr	r2, [pc, #96]	@ (8002170 <HAL_ADC_Start_DMA+0x21c>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d11b      	bne.n	800214c <HAL_ADC_Start_DMA+0x1f8>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d114      	bne.n	800214c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	e00b      	b.n	800214c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0210 	orr.w	r2, r3, #16
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0201 	orr.w	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800214c:	7ffb      	ldrb	r3, [r7, #31]
}
 800214e:	4618      	mov	r0, r3
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000000 	.word	0x20000000
 800215c:	431bde83 	.word	0x431bde83
 8002160:	40012300 	.word	0x40012300
 8002164:	080025ed 	.word	0x080025ed
 8002168:	080026a7 	.word	0x080026a7
 800216c:	080026c3 	.word	0x080026c3
 8002170:	40012000 	.word	0x40012000
 8002174:	40012100 	.word	0x40012100
 8002178:	40012200 	.word	0x40012200

0800217c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1c>
 80021a8:	2302      	movs	r3, #2
 80021aa:	e113      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x244>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b09      	cmp	r3, #9
 80021ba:	d925      	bls.n	8002208 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	461a      	mov	r2, r3
 80021ca:	4613      	mov	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3b1e      	subs	r3, #30
 80021d2:	2207      	movs	r2, #7
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43da      	mvns	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	400a      	ands	r2, r1
 80021e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68d9      	ldr	r1, [r3, #12]
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	4603      	mov	r3, r0
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	4403      	add	r3, r0
 80021fa:	3b1e      	subs	r3, #30
 80021fc:	409a      	lsls	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	e022      	b.n	800224e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	6919      	ldr	r1, [r3, #16]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4613      	mov	r3, r2
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	4413      	add	r3, r2
 800221c:	2207      	movs	r2, #7
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	400a      	ands	r2, r1
 800222a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6919      	ldr	r1, [r3, #16]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	689a      	ldr	r2, [r3, #8]
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	4603      	mov	r3, r0
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4403      	add	r3, r0
 8002244:	409a      	lsls	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b06      	cmp	r3, #6
 8002254:	d824      	bhi.n	80022a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	3b05      	subs	r3, #5
 8002268:	221f      	movs	r2, #31
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43da      	mvns	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	400a      	ands	r2, r1
 8002276:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	b29b      	uxth	r3, r3
 8002284:	4618      	mov	r0, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	3b05      	subs	r3, #5
 8002292:	fa00 f203 	lsl.w	r2, r0, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	635a      	str	r2, [r3, #52]	@ 0x34
 800229e:	e04c      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	d824      	bhi.n	80022f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	3b23      	subs	r3, #35	@ 0x23
 80022ba:	221f      	movs	r2, #31
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43da      	mvns	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	400a      	ands	r2, r1
 80022c8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	4618      	mov	r0, r3
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	3b23      	subs	r3, #35	@ 0x23
 80022e4:	fa00 f203 	lsl.w	r2, r0, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	430a      	orrs	r2, r1
 80022ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80022f0:	e023      	b.n	800233a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	4613      	mov	r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	4413      	add	r3, r2
 8002302:	3b41      	subs	r3, #65	@ 0x41
 8002304:	221f      	movs	r2, #31
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43da      	mvns	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	400a      	ands	r2, r1
 8002312:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	b29b      	uxth	r3, r3
 8002320:	4618      	mov	r0, r3
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	3b41      	subs	r3, #65	@ 0x41
 800232e:	fa00 f203 	lsl.w	r2, r0, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800233a:	4b29      	ldr	r3, [pc, #164]	@ (80023e0 <HAL_ADC_ConfigChannel+0x250>)
 800233c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a28      	ldr	r2, [pc, #160]	@ (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d10f      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b12      	cmp	r3, #18
 800234e:	d10b      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a1d      	ldr	r2, [pc, #116]	@ (80023e4 <HAL_ADC_ConfigChannel+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d12b      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d003      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x1f4>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b11      	cmp	r3, #17
 8002382:	d122      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_ADC_ConfigChannel+0x258>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d111      	bne.n	80023ca <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023a6:	4b11      	ldr	r3, [pc, #68]	@ (80023ec <HAL_ADC_ConfigChannel+0x25c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_ADC_ConfigChannel+0x260>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	0c9a      	lsrs	r2, r3, #18
 80023b2:	4613      	mov	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023bc:	e002      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f9      	bne.n	80023be <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3714      	adds	r7, #20
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40012300 	.word	0x40012300
 80023e4:	40012000 	.word	0x40012000
 80023e8:	10000012 	.word	0x10000012
 80023ec:	20000000 	.word	0x20000000
 80023f0:	431bde83 	.word	0x431bde83

080023f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023fc:	4b79      	ldr	r3, [pc, #484]	@ (80025e4 <ADC_Init+0x1f0>)
 80023fe:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	431a      	orrs	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002428:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	021a      	lsls	r2, r3, #8
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800244c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6859      	ldr	r1, [r3, #4]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800246e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6899      	ldr	r1, [r3, #8]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002486:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <ADC_Init+0x1f4>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689a      	ldr	r2, [r3, #8]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800249a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	6899      	ldr	r1, [r3, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689a      	ldr	r2, [r3, #8]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6899      	ldr	r1, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	e00f      	b.n	80024f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024f0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0202 	bic.w	r2, r2, #2
 8002500:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6899      	ldr	r1, [r3, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	7e1b      	ldrb	r3, [r3, #24]
 800250c:	005a      	lsls	r2, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	430a      	orrs	r2, r1
 8002514:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d01b      	beq.n	8002558 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800252e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800253e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6859      	ldr	r1, [r3, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254a:	3b01      	subs	r3, #1
 800254c:	035a      	lsls	r2, r3, #13
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	e007      	b.n	8002568 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002566:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002576:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	3b01      	subs	r3, #1
 8002584:	051a      	lsls	r2, r3, #20
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800259c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6899      	ldr	r1, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80025aa:	025a      	lsls	r2, r3, #9
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6899      	ldr	r1, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	029a      	lsls	r2, r3, #10
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	609a      	str	r2, [r3, #8]
}
 80025d8:	bf00      	nop
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	40012300 	.word	0x40012300
 80025e8:	0f000001 	.word	0x0f000001

080025ec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002602:	2b00      	cmp	r3, #0
 8002604:	d13c      	bne.n	8002680 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d12b      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002624:	2b00      	cmp	r3, #0
 8002626:	d127      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800262e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002632:	2b00      	cmp	r3, #0
 8002634:	d006      	beq.n	8002644 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685a      	ldr	r2, [r3, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0220 	bic.w	r2, r2, #32
 8002652:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002658:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d105      	bne.n	8002678 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7fe fbcd 	bl	8000e18 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800267e:	e00e      	b.n	800269e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	d003      	beq.n	8002694 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7ff fd75 	bl	800217c <HAL_ADC_ErrorCallback>
}
 8002692:	e004      	b.n	800269e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	4798      	blx	r3
}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b084      	sub	sp, #16
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f7fe fb99 	bl	8000dec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b084      	sub	sp, #16
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026ce:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff fd4a 	bl	800217c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b085      	sub	sp, #20
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f003 0307 	and.w	r3, r3, #7
 80026fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800270c:	4013      	ands	r3, r2
 800270e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800271c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002722:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <__NVIC_SetPriorityGrouping+0x44>)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	60d3      	str	r3, [r2, #12]
}
 8002728:	bf00      	nop
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__NVIC_GetPriorityGrouping+0x18>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	0a1b      	lsrs	r3, r3, #8
 8002742:	f003 0307 	and.w	r3, r3, #7
}
 8002746:	4618      	mov	r0, r3
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800275e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002762:	2b00      	cmp	r3, #0
 8002764:	db0b      	blt.n	800277e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	f003 021f 	and.w	r2, r3, #31
 800276c:	4907      	ldr	r1, [pc, #28]	@ (800278c <__NVIC_EnableIRQ+0x38>)
 800276e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002772:	095b      	lsrs	r3, r3, #5
 8002774:	2001      	movs	r0, #1
 8002776:	fa00 f202 	lsl.w	r2, r0, r2
 800277a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	e000e100 	.word	0xe000e100

08002790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	4603      	mov	r3, r0
 8002798:	6039      	str	r1, [r7, #0]
 800279a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	db0a      	blt.n	80027ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	490c      	ldr	r1, [pc, #48]	@ (80027dc <__NVIC_SetPriority+0x4c>)
 80027aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ae:	0112      	lsls	r2, r2, #4
 80027b0:	b2d2      	uxtb	r2, r2
 80027b2:	440b      	add	r3, r1
 80027b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027b8:	e00a      	b.n	80027d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4908      	ldr	r1, [pc, #32]	@ (80027e0 <__NVIC_SetPriority+0x50>)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3b04      	subs	r3, #4
 80027c8:	0112      	lsls	r2, r2, #4
 80027ca:	b2d2      	uxtb	r2, r2
 80027cc:	440b      	add	r3, r1
 80027ce:	761a      	strb	r2, [r3, #24]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000e100 	.word	0xe000e100
 80027e0:	e000ed00 	.word	0xe000ed00

080027e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f1c3 0307 	rsb	r3, r3, #7
 80027fe:	2b04      	cmp	r3, #4
 8002800:	bf28      	it	cs
 8002802:	2304      	movcs	r3, #4
 8002804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3304      	adds	r3, #4
 800280a:	2b06      	cmp	r3, #6
 800280c:	d902      	bls.n	8002814 <NVIC_EncodePriority+0x30>
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3b03      	subs	r3, #3
 8002812:	e000      	b.n	8002816 <NVIC_EncodePriority+0x32>
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002818:	f04f 32ff 	mov.w	r2, #4294967295
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	401a      	ands	r2, r3
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800282c:	f04f 31ff 	mov.w	r1, #4294967295
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	fa01 f303 	lsl.w	r3, r1, r3
 8002836:	43d9      	mvns	r1, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	4313      	orrs	r3, r2
         );
}
 800283e:	4618      	mov	r0, r3
 8002840:	3724      	adds	r7, #36	@ 0x24
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff ff4c 	bl	80026f0 <__NVIC_SetPriorityGrouping>
}
 8002858:	bf00      	nop
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002872:	f7ff ff61 	bl	8002738 <__NVIC_GetPriorityGrouping>
 8002876:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68b9      	ldr	r1, [r7, #8]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7ff ffb1 	bl	80027e4 <NVIC_EncodePriority>
 8002882:	4602      	mov	r2, r0
 8002884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff ff80 	bl	8002790 <__NVIC_SetPriority>
}
 8002890:	bf00      	nop
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff54 	bl	8002754 <__NVIC_EnableIRQ>
}
 80028ac:	bf00      	nop
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e014      	b.n	80028f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	791b      	ldrb	r3, [r3, #4]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff f82c 	bl	8001934 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2202      	movs	r2, #2
 80028e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80028ee:	2300      	movs	r3, #0
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
#endif /* DAC_CHANNEL2_SUPPORT */
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d101      	bne.n	8002910 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e0a2      	b.n	8002a56 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	795b      	ldrb	r3, [r3, #5]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_DAC_Start_DMA+0x24>
 8002918:	2302      	movs	r3, #2
 800291a:	e09c      	b.n	8002a56 <HAL_DAC_Start_DMA+0x15e>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2201      	movs	r2, #1
 8002920:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2202      	movs	r2, #2
 8002926:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d129      	bne.n	8002982 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	4a4b      	ldr	r2, [pc, #300]	@ (8002a60 <HAL_DAC_Start_DMA+0x168>)
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	4a4a      	ldr	r2, [pc, #296]	@ (8002a64 <HAL_DAC_Start_DMA+0x16c>)
 800293c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4a49      	ldr	r2, [pc, #292]	@ (8002a68 <HAL_DAC_Start_DMA+0x170>)
 8002944:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002954:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_DAC_Start_DMA+0x6c>
 800295c:	6a3b      	ldr	r3, [r7, #32]
 800295e:	2b04      	cmp	r3, #4
 8002960:	d005      	beq.n	800296e <HAL_DAC_Start_DMA+0x76>
 8002962:	e009      	b.n	8002978 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	3308      	adds	r3, #8
 800296a:	613b      	str	r3, [r7, #16]
        break;
 800296c:	e033      	b.n	80029d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	330c      	adds	r3, #12
 8002974:	613b      	str	r3, [r7, #16]
        break;
 8002976:	e02e      	b.n	80029d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3310      	adds	r3, #16
 800297e:	613b      	str	r3, [r7, #16]
        break;
 8002980:	e029      	b.n	80029d6 <HAL_DAC_Start_DMA+0xde>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	4a39      	ldr	r2, [pc, #228]	@ (8002a6c <HAL_DAC_Start_DMA+0x174>)
 8002988:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	4a38      	ldr	r2, [pc, #224]	@ (8002a70 <HAL_DAC_Start_DMA+0x178>)
 8002990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	4a37      	ldr	r2, [pc, #220]	@ (8002a74 <HAL_DAC_Start_DMA+0x17c>)
 8002998:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_DAC_Start_DMA+0xc0>
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d005      	beq.n	80029c2 <HAL_DAC_Start_DMA+0xca>
 80029b6:	e009      	b.n	80029cc <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	3314      	adds	r3, #20
 80029be:	613b      	str	r3, [r7, #16]
        break;
 80029c0:	e009      	b.n	80029d6 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3318      	adds	r3, #24
 80029c8:	613b      	str	r3, [r7, #16]
        break;
 80029ca:	e004      	b.n	80029d6 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	331c      	adds	r3, #28
 80029d2:	613b      	str	r3, [r7, #16]
        break;
 80029d4:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d111      	bne.n	8002a00 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6898      	ldr	r0, [r3, #8]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	693a      	ldr	r2, [r7, #16]
 80029f6:	f000 f9ef 	bl	8002dd8 <HAL_DMA_Start_IT>
 80029fa:	4603      	mov	r3, r0
 80029fc:	75fb      	strb	r3, [r7, #23]
 80029fe:	e010      	b.n	8002a22 <HAL_DAC_Start_DMA+0x12a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 5200 	orr.w	r2, r2, #536870912	@ 0x20000000
 8002a0e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68d8      	ldr	r0, [r3, #12]
 8002a14:	6879      	ldr	r1, [r7, #4]
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	f000 f9dd 	bl	8002dd8 <HAL_DMA_Start_IT>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10c      	bne.n	8002a48 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	409a      	lsls	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	e005      	b.n	8002a54 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f043 0204 	orr.w	r2, r3, #4
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8002a54:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08002b67 	.word	0x08002b67
 8002a64:	08002b89 	.word	0x08002b89
 8002a68:	08002ba5 	.word	0x08002ba5
 8002a6c:	08002c0f 	.word	0x08002c0f
 8002a70:	08002c31 	.word	0x08002c31
 8002a74:	08002c4d 	.word	0x08002c4d

08002a78 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b089      	sub	sp, #36	@ 0x24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d002      	beq.n	8002ad0 <HAL_DAC_ConfigChannel+0x1c>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e042      	b.n	8002b5a <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	795b      	ldrb	r3, [r3, #5]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d101      	bne.n	8002ae0 <HAL_DAC_ConfigChannel+0x2c>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e03c      	b.n	8002b5a <HAL_DAC_ConfigChannel+0xa6>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 0310 	and.w	r3, r3, #16
 8002afa:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002b02:	43db      	mvns	r3, r3
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	4013      	ands	r3, r2
 8002b08:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f003 0310 	and.w	r3, r3, #16
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	22c0      	movs	r2, #192	@ 0xc0
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8002b58:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3724      	adds	r7, #36	@ 0x24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b084      	sub	sp, #16
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff7f 	bl	8002a78 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	711a      	strb	r2, [r3, #4]
}
 8002b80:	bf00      	nop
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b94:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f7ff ff78 	bl	8002a8c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002b9c:	bf00      	nop
 8002b9e:	3710      	adds	r7, #16
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b084      	sub	sp, #16
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bb0:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f043 0204 	orr.w	r2, r3, #4
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff ff6e 	bl	8002aa0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	711a      	strb	r2, [r3, #4]
}
 8002bca:	bf00      	nop
 8002bcc:	3710      	adds	r7, #16
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff ffd8 	bl	8002bd2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2201      	movs	r2, #1
 8002c26:	711a      	strb	r2, [r3, #4]
}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f7ff ffd1 	bl	8002be6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f043 0204 	orr.w	r2, r3, #4
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ffc7 	bl	8002bfa <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	711a      	strb	r2, [r3, #4]
}
 8002c72:	bf00      	nop
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
	...

08002c7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c88:	f7ff f914 	bl	8001eb4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e099      	b.n	8002dcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb8:	e00f      	b.n	8002cda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cba:	f7ff f8fb 	bl	8001eb4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d908      	bls.n	8002cda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e078      	b.n	8002dcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d1e8      	bne.n	8002cba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <HAL_DMA_Init+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	691b      	ldr	r3, [r3, #16]
 8002d0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	2b04      	cmp	r3, #4
 8002d32:	d107      	bne.n	8002d44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d117      	bne.n	8002d9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00e      	beq.n	8002d9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 fa6f 	bl	8003264 <DMA_CheckFifoParam>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2240      	movs	r2, #64	@ 0x40
 8002d90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e016      	b.n	8002dcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa26 	bl	80031f8 <DMA_CalcBaseAndBitshift>
 8002dac:	4603      	mov	r3, r0
 8002dae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db4:	223f      	movs	r2, #63	@ 0x3f
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	f010803f 	.word	0xf010803f

08002dd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b086      	sub	sp, #24
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
 8002de4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d101      	bne.n	8002dfe <HAL_DMA_Start_IT+0x26>
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	e040      	b.n	8002e80 <HAL_DMA_Start_IT+0xa8>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d12f      	bne.n	8002e72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2202      	movs	r2, #2
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f9b8 	bl	800319c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	223f      	movs	r2, #63	@ 0x3f
 8002e32:	409a      	lsls	r2, r3
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0216 	orr.w	r2, r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d007      	beq.n	8002e60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0208 	orr.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e005      	b.n	8002e7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3718      	adds	r7, #24
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e94:	4b8e      	ldr	r3, [pc, #568]	@ (80030d0 <HAL_DMA_IRQHandler+0x248>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a8e      	ldr	r2, [pc, #568]	@ (80030d4 <HAL_DMA_IRQHandler+0x24c>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	0a9b      	lsrs	r3, r3, #10
 8002ea0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb2:	2208      	movs	r2, #8
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d01a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ee0:	2208      	movs	r2, #8
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	f043 0201 	orr.w	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef8:	2201      	movs	r2, #1
 8002efa:	409a      	lsls	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	4013      	ands	r3, r2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d012      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00b      	beq.n	8002f2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f043 0202 	orr.w	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f2e:	2204      	movs	r2, #4
 8002f30:	409a      	lsls	r2, r3
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4013      	ands	r3, r2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d012      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f4c:	2204      	movs	r2, #4
 8002f4e:	409a      	lsls	r2, r3
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f58:	f043 0204 	orr.w	r2, r3, #4
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f64:	2210      	movs	r2, #16
 8002f66:	409a      	lsls	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d043      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d03c      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	2210      	movs	r2, #16
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d018      	beq.n	8002fca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d024      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
 8002fb6:	e01f      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
 8002fc8:	e016      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d107      	bne.n	8002fe8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f022 0208 	bic.w	r2, r2, #8
 8002fe6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	409a      	lsls	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	f000 808f 	beq.w	8003128 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 8087 	beq.w	8003128 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800301e:	2220      	movs	r2, #32
 8003020:	409a      	lsls	r2, r3
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b05      	cmp	r3, #5
 8003030:	d136      	bne.n	80030a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 0216 	bic.w	r2, r2, #22
 8003040:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695a      	ldr	r2, [r3, #20]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003050:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d103      	bne.n	8003062 <HAL_DMA_IRQHandler+0x1da>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800305e:	2b00      	cmp	r3, #0
 8003060:	d007      	beq.n	8003072 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0208 	bic.w	r2, r2, #8
 8003070:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	223f      	movs	r2, #63	@ 0x3f
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003092:	2b00      	cmp	r3, #0
 8003094:	d07e      	beq.n	8003194 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
        }
        return;
 800309e:	e079      	b.n	8003194 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d01d      	beq.n	80030ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10d      	bne.n	80030d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d031      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	4798      	blx	r3
 80030cc:	e02c      	b.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
 80030ce:	bf00      	nop
 80030d0:	20000000 	.word	0x20000000
 80030d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d023      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	4798      	blx	r3
 80030e8:	e01e      	b.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0210 	bic.w	r2, r2, #16
 8003106:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d003      	beq.n	8003128 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	2b00      	cmp	r3, #0
 800312e:	d032      	beq.n	8003196 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003134:	f003 0301 	and.w	r3, r3, #1
 8003138:	2b00      	cmp	r3, #0
 800313a:	d022      	beq.n	8003182 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2205      	movs	r2, #5
 8003140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	3301      	adds	r3, #1
 8003158:	60bb      	str	r3, [r7, #8]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	d307      	bcc.n	8003170 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f2      	bne.n	8003154 <HAL_DMA_IRQHandler+0x2cc>
 800316e:	e000      	b.n	8003172 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003170:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	4798      	blx	r3
 8003192:	e000      	b.n	8003196 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003194:	bf00      	nop
    }
  }
}
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b40      	cmp	r3, #64	@ 0x40
 80031c8:	d108      	bne.n	80031dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031da:	e007      	b.n	80031ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	60da      	str	r2, [r3, #12]
}
 80031ec:	bf00      	nop
 80031ee:	3714      	adds	r7, #20
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	3b10      	subs	r3, #16
 8003208:	4a14      	ldr	r2, [pc, #80]	@ (800325c <DMA_CalcBaseAndBitshift+0x64>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	091b      	lsrs	r3, r3, #4
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003212:	4a13      	ldr	r2, [pc, #76]	@ (8003260 <DMA_CalcBaseAndBitshift+0x68>)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	461a      	mov	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b03      	cmp	r3, #3
 8003224:	d909      	bls.n	800323a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800322e:	f023 0303 	bic.w	r3, r3, #3
 8003232:	1d1a      	adds	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	659a      	str	r2, [r3, #88]	@ 0x58
 8003238:	e007      	b.n	800324a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003242:	f023 0303 	bic.w	r3, r3, #3
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800324e:	4618      	mov	r0, r3
 8003250:	3714      	adds	r7, #20
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	aaaaaaab 	.word	0xaaaaaaab
 8003260:	0800715c 	.word	0x0800715c

08003264 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d11f      	bne.n	80032be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b03      	cmp	r3, #3
 8003282:	d856      	bhi.n	8003332 <DMA_CheckFifoParam+0xce>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <DMA_CheckFifoParam+0x28>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	0800329d 	.word	0x0800329d
 8003290:	080032af 	.word	0x080032af
 8003294:	0800329d 	.word	0x0800329d
 8003298:	08003333 	.word	0x08003333
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d046      	beq.n	8003336 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ac:	e043      	b.n	8003336 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032b6:	d140      	bne.n	800333a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032bc:	e03d      	b.n	800333a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032c6:	d121      	bne.n	800330c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b03      	cmp	r3, #3
 80032cc:	d837      	bhi.n	800333e <DMA_CheckFifoParam+0xda>
 80032ce:	a201      	add	r2, pc, #4	@ (adr r2, 80032d4 <DMA_CheckFifoParam+0x70>)
 80032d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d4:	080032e5 	.word	0x080032e5
 80032d8:	080032eb 	.word	0x080032eb
 80032dc:	080032e5 	.word	0x080032e5
 80032e0:	080032fd 	.word	0x080032fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
      break;
 80032e8:	e030      	b.n	800334c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d025      	beq.n	8003342 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fa:	e022      	b.n	8003342 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003300:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003304:	d11f      	bne.n	8003346 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800330a:	e01c      	b.n	8003346 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d903      	bls.n	800331a <DMA_CheckFifoParam+0xb6>
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d003      	beq.n	8003320 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003318:	e018      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
      break;
 800331e:	e015      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d00e      	beq.n	800334a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	73fb      	strb	r3, [r7, #15]
      break;
 8003330:	e00b      	b.n	800334a <DMA_CheckFifoParam+0xe6>
      break;
 8003332:	bf00      	nop
 8003334:	e00a      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 8003336:	bf00      	nop
 8003338:	e008      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800333a:	bf00      	nop
 800333c:	e006      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800333e:	bf00      	nop
 8003340:	e004      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 8003342:	bf00      	nop
 8003344:	e002      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;   
 8003346:	bf00      	nop
 8003348:	e000      	b.n	800334c <DMA_CheckFifoParam+0xe8>
      break;
 800334a:	bf00      	nop
    }
  } 
  
  return status; 
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3714      	adds	r7, #20
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop

0800335c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800335c:	b480      	push	{r7}
 800335e:	b089      	sub	sp, #36	@ 0x24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e165      	b.n	8003644 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003378:	2201      	movs	r2, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	429a      	cmp	r2, r3
 8003392:	f040 8154 	bne.w	800363e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d005      	beq.n	80033ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d130      	bne.n	8003410 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4013      	ands	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033e4:	2201      	movs	r2, #1
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	43db      	mvns	r3, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4013      	ands	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	091b      	lsrs	r3, r3, #4
 80033fa:	f003 0201 	and.w	r2, r3, #1
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0303 	and.w	r3, r3, #3
 8003418:	2b03      	cmp	r3, #3
 800341a:	d017      	beq.n	800344c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	689a      	ldr	r2, [r3, #8]
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4313      	orrs	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d123      	bne.n	80034a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	f003 0307 	and.w	r3, r3, #7
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	220f      	movs	r2, #15
 8003470:	fa02 f303 	lsl.w	r3, r2, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4013      	ands	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	f003 0307 	and.w	r3, r3, #7
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	08da      	lsrs	r2, r3, #3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3208      	adds	r2, #8
 800349a:	69b9      	ldr	r1, [r7, #24]
 800349c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2203      	movs	r2, #3
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f003 0203 	and.w	r2, r3, #3
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80ae 	beq.w	800363e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	4b5d      	ldr	r3, [pc, #372]	@ (800365c <HAL_GPIO_Init+0x300>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	4a5c      	ldr	r2, [pc, #368]	@ (800365c <HAL_GPIO_Init+0x300>)
 80034ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034f2:	4b5a      	ldr	r3, [pc, #360]	@ (800365c <HAL_GPIO_Init+0x300>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fe:	4a58      	ldr	r2, [pc, #352]	@ (8003660 <HAL_GPIO_Init+0x304>)
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	089b      	lsrs	r3, r3, #2
 8003504:	3302      	adds	r3, #2
 8003506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800350a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	220f      	movs	r2, #15
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43db      	mvns	r3, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4013      	ands	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4f      	ldr	r2, [pc, #316]	@ (8003664 <HAL_GPIO_Init+0x308>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d025      	beq.n	8003576 <HAL_GPIO_Init+0x21a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a4e      	ldr	r2, [pc, #312]	@ (8003668 <HAL_GPIO_Init+0x30c>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01f      	beq.n	8003572 <HAL_GPIO_Init+0x216>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a4d      	ldr	r2, [pc, #308]	@ (800366c <HAL_GPIO_Init+0x310>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d019      	beq.n	800356e <HAL_GPIO_Init+0x212>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a4c      	ldr	r2, [pc, #304]	@ (8003670 <HAL_GPIO_Init+0x314>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d013      	beq.n	800356a <HAL_GPIO_Init+0x20e>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4b      	ldr	r2, [pc, #300]	@ (8003674 <HAL_GPIO_Init+0x318>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00d      	beq.n	8003566 <HAL_GPIO_Init+0x20a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4a      	ldr	r2, [pc, #296]	@ (8003678 <HAL_GPIO_Init+0x31c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d007      	beq.n	8003562 <HAL_GPIO_Init+0x206>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a49      	ldr	r2, [pc, #292]	@ (800367c <HAL_GPIO_Init+0x320>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d101      	bne.n	800355e <HAL_GPIO_Init+0x202>
 800355a:	2306      	movs	r3, #6
 800355c:	e00c      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 800355e:	2307      	movs	r3, #7
 8003560:	e00a      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 8003562:	2305      	movs	r3, #5
 8003564:	e008      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 8003566:	2304      	movs	r3, #4
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 800356a:	2303      	movs	r3, #3
 800356c:	e004      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 800356e:	2302      	movs	r3, #2
 8003570:	e002      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_GPIO_Init+0x21c>
 8003576:	2300      	movs	r3, #0
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f002 0203 	and.w	r2, r2, #3
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	4093      	lsls	r3, r2
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003588:	4935      	ldr	r1, [pc, #212]	@ (8003660 <HAL_GPIO_Init+0x304>)
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	3302      	adds	r3, #2
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003596:	4b3a      	ldr	r3, [pc, #232]	@ (8003680 <HAL_GPIO_Init+0x324>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	43db      	mvns	r3, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4013      	ands	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d003      	beq.n	80035ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035ba:	4a31      	ldr	r2, [pc, #196]	@ (8003680 <HAL_GPIO_Init+0x324>)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003680 <HAL_GPIO_Init+0x324>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e4:	4a26      	ldr	r2, [pc, #152]	@ (8003680 <HAL_GPIO_Init+0x324>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ea:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <HAL_GPIO_Init+0x324>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4013      	ands	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <HAL_GPIO_Init+0x324>)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003614:	4b1a      	ldr	r3, [pc, #104]	@ (8003680 <HAL_GPIO_Init+0x324>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003638:	4a11      	ldr	r2, [pc, #68]	@ (8003680 <HAL_GPIO_Init+0x324>)
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3301      	adds	r3, #1
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b0f      	cmp	r3, #15
 8003648:	f67f ae96 	bls.w	8003378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3724      	adds	r7, #36	@ 0x24
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800
 8003660:	40013800 	.word	0x40013800
 8003664:	40020000 	.word	0x40020000
 8003668:	40020400 	.word	0x40020400
 800366c:	40020800 	.word	0x40020800
 8003670:	40020c00 	.word	0x40020c00
 8003674:	40021000 	.word	0x40021000
 8003678:	40021400 	.word	0x40021400
 800367c:	40021800 	.word	0x40021800
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fe fb9e 	bl	8001eb4 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fb9a 	bl	8001eb4 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	@ (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f887 	bl	800391c <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	@ (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	@ (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe f96c 	bl	8001b08 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	08007144 	.word	0x08007144
 8003848:	20000000 	.word	0x20000000
 800384c:	20000004 	.word	0x20000004

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	@ (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000000 	.word	0x20000000

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	@ (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	08007154 	.word	0x08007154

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	@ (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	08007154 	.word	0x08007154

080038b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	220f      	movs	r2, #15
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038c8:	4b12      	ldr	r3, [pc, #72]	@ (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80038ec:	4b09      	ldr	r3, [pc, #36]	@ (8003914 <HAL_RCC_GetClockConfig+0x5c>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	08db      	lsrs	r3, r3, #3
 80038f2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <HAL_RCC_GetClockConfig+0x60>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 020f 	and.w	r2, r3, #15
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	601a      	str	r2, [r3, #0]
}
 8003906:	bf00      	nop
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	40023800 	.word	0x40023800
 8003918:	40023c00 	.word	0x40023c00

0800391c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800391c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003920:	b0a6      	sub	sp, #152	@ 0x98
 8003922:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003930:	2300      	movs	r3, #0
 8003932:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003936:	2300      	movs	r3, #0
 8003938:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003942:	4bc8      	ldr	r3, [pc, #800]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b0c      	cmp	r3, #12
 800394c:	f200 817e 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x330>
 8003950:	a201      	add	r2, pc, #4	@ (adr r2, 8003958 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003956:	bf00      	nop
 8003958:	0800398d 	.word	0x0800398d
 800395c:	08003c4d 	.word	0x08003c4d
 8003960:	08003c4d 	.word	0x08003c4d
 8003964:	08003c4d 	.word	0x08003c4d
 8003968:	08003995 	.word	0x08003995
 800396c:	08003c4d 	.word	0x08003c4d
 8003970:	08003c4d 	.word	0x08003c4d
 8003974:	08003c4d 	.word	0x08003c4d
 8003978:	0800399d 	.word	0x0800399d
 800397c:	08003c4d 	.word	0x08003c4d
 8003980:	08003c4d 	.word	0x08003c4d
 8003984:	08003c4d 	.word	0x08003c4d
 8003988:	08003b07 	.word	0x08003b07
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800398c:	4bb6      	ldr	r3, [pc, #728]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x34c>)
 800398e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003992:	e15f      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003994:	4bb5      	ldr	r3, [pc, #724]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003996:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800399a:	e15b      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800399c:	4bb1      	ldr	r3, [pc, #708]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a8:	4bae      	ldr	r3, [pc, #696]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d031      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b4:	4bab      	ldr	r3, [pc, #684]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	2200      	movs	r2, #0
 80039bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	663b      	str	r3, [r7, #96]	@ 0x60
 80039c8:	2300      	movs	r3, #0
 80039ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80039cc:	4ba7      	ldr	r3, [pc, #668]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x350>)
 80039ce:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039d2:	462a      	mov	r2, r5
 80039d4:	fb03 f202 	mul.w	r2, r3, r2
 80039d8:	2300      	movs	r3, #0
 80039da:	4621      	mov	r1, r4
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	4aa2      	ldr	r2, [pc, #648]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x350>)
 80039e4:	4621      	mov	r1, r4
 80039e6:	fba1 1202 	umull	r1, r2, r1, r2
 80039ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039ec:	460a      	mov	r2, r1
 80039ee:	67ba      	str	r2, [r7, #120]	@ 0x78
 80039f0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039f2:	4413      	add	r3, r2
 80039f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fa:	2200      	movs	r2, #0
 80039fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039fe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a04:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a08:	f7fd f878 	bl	8000afc <__aeabi_uldivmod>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4613      	mov	r3, r2
 8003a12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a16:	e064      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a18:	4b92      	ldr	r3, [pc, #584]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	099b      	lsrs	r3, r3, #6
 8003a1e:	2200      	movs	r2, #0
 8003a20:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a22:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a30:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a34:	4622      	mov	r2, r4
 8003a36:	462b      	mov	r3, r5
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	0159      	lsls	r1, r3, #5
 8003a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a46:	0150      	lsls	r0, r2, #5
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	1a51      	subs	r1, r2, r1
 8003a50:	6139      	str	r1, [r7, #16]
 8003a52:	4629      	mov	r1, r5
 8003a54:	eb63 0301 	sbc.w	r3, r3, r1
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a66:	4659      	mov	r1, fp
 8003a68:	018b      	lsls	r3, r1, #6
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a70:	4651      	mov	r1, sl
 8003a72:	018a      	lsls	r2, r1, #6
 8003a74:	4651      	mov	r1, sl
 8003a76:	ebb2 0801 	subs.w	r8, r2, r1
 8003a7a:	4659      	mov	r1, fp
 8003a7c:	eb63 0901 	sbc.w	r9, r3, r1
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a8c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a90:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a94:	4690      	mov	r8, r2
 8003a96:	4699      	mov	r9, r3
 8003a98:	4623      	mov	r3, r4
 8003a9a:	eb18 0303 	adds.w	r3, r8, r3
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	eb49 0303 	adc.w	r3, r9, r3
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab4:	4629      	mov	r1, r5
 8003ab6:	028b      	lsls	r3, r1, #10
 8003ab8:	4621      	mov	r1, r4
 8003aba:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abe:	4621      	mov	r1, r4
 8003ac0:	028a      	lsls	r2, r1, #10
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003aca:	2200      	movs	r2, #0
 8003acc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ace:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ad0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad4:	f7fd f812 	bl	8000afc <__aeabi_uldivmod>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	460b      	mov	r3, r1
 8003adc:	4613      	mov	r3, r2
 8003ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ae2:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	0c1b      	lsrs	r3, r3, #16
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	3301      	adds	r3, #1
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003af4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003af8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b04:	e0a6      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b06:	4b57      	ldr	r3, [pc, #348]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b12:	4b54      	ldr	r3, [pc, #336]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d02a      	beq.n	8003b74 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1e:	4b51      	ldr	r3, [pc, #324]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	099b      	lsrs	r3, r3, #6
 8003b24:	2200      	movs	r2, #0
 8003b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b30:	2100      	movs	r1, #0
 8003b32:	4b4e      	ldr	r3, [pc, #312]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003b34:	fb03 f201 	mul.w	r2, r3, r1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	fb00 f303 	mul.w	r3, r0, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	4a4a      	ldr	r2, [pc, #296]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x350>)
 8003b42:	fba0 1202 	umull	r1, r2, r0, r2
 8003b46:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b48:	460a      	mov	r2, r1
 8003b4a:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b4c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b4e:	4413      	add	r3, r2
 8003b50:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b56:	2200      	movs	r2, #0
 8003b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b5c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b60:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b64:	f7fc ffca 	bl	8000afc <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b72:	e05b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b74:	4b3b      	ldr	r3, [pc, #236]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	099b      	lsrs	r3, r3, #6
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b8c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	0159      	lsls	r1, r3, #5
 8003b9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba2:	0150      	lsls	r0, r2, #5
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4641      	mov	r1, r8
 8003baa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bae:	4649      	mov	r1, r9
 8003bb0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb4:	f04f 0200 	mov.w	r2, #0
 8003bb8:	f04f 0300 	mov.w	r3, #0
 8003bbc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bc8:	ebb2 040a 	subs.w	r4, r2, sl
 8003bcc:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	00eb      	lsls	r3, r5, #3
 8003bda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bde:	00e2      	lsls	r2, r4, #3
 8003be0:	4614      	mov	r4, r2
 8003be2:	461d      	mov	r5, r3
 8003be4:	4643      	mov	r3, r8
 8003be6:	18e3      	adds	r3, r4, r3
 8003be8:	603b      	str	r3, [r7, #0]
 8003bea:	464b      	mov	r3, r9
 8003bec:	eb45 0303 	adc.w	r3, r5, r3
 8003bf0:	607b      	str	r3, [r7, #4]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bfe:	4629      	mov	r1, r5
 8003c00:	028b      	lsls	r3, r1, #10
 8003c02:	4621      	mov	r1, r4
 8003c04:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c08:	4621      	mov	r1, r4
 8003c0a:	028a      	lsls	r2, r1, #10
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c14:	2200      	movs	r2, #0
 8003c16:	61bb      	str	r3, [r7, #24]
 8003c18:	61fa      	str	r2, [r7, #28]
 8003c1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c1e:	f7fc ff6d 	bl	8000afc <__aeabi_uldivmod>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4613      	mov	r3, r2
 8003c28:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c64 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003c3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c4a:	e003      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b06      	ldr	r3, [pc, #24]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c52:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3798      	adds	r7, #152	@ 0x98
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	40023800 	.word	0x40023800
 8003c68:	00f42400 	.word	0x00f42400
 8003c6c:	017d7840 	.word	0x017d7840

08003c70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e28d      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f000 8083 	beq.w	8003d96 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c90:	4b94      	ldr	r3, [pc, #592]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d019      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003c9c:	4b91      	ldr	r3, [pc, #580]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ca8:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb4:	d00c      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb6:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	d112      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc2:	4b88      	ldr	r3, [pc, #544]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cce:	d10b      	bne.n	8003ce8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	4b84      	ldr	r3, [pc, #528]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d05b      	beq.n	8003d94 <HAL_RCC_OscConfig+0x124>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d157      	bne.n	8003d94 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e25a      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCC_OscConfig+0x90>
 8003cf2:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7b      	ldr	r2, [pc, #492]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
 8003cfe:	e01d      	b.n	8003d3c <HAL_RCC_OscConfig+0xcc>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d08:	d10c      	bne.n	8003d24 <HAL_RCC_OscConfig+0xb4>
 8003d0a:	4b76      	ldr	r3, [pc, #472]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a75      	ldr	r2, [pc, #468]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	4b73      	ldr	r3, [pc, #460]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a72      	ldr	r2, [pc, #456]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e00b      	b.n	8003d3c <HAL_RCC_OscConfig+0xcc>
 8003d24:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d013      	beq.n	8003d6c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe f8b6 	bl	8001eb4 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe f8b2 	bl	8001eb4 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	@ 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e21f      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5e:	4b61      	ldr	r3, [pc, #388]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0f0      	beq.n	8003d4c <HAL_RCC_OscConfig+0xdc>
 8003d6a:	e014      	b.n	8003d96 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f8a2 	bl	8001eb4 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d74:	f7fe f89e 	bl	8001eb4 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b64      	cmp	r3, #100	@ 0x64
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e20b      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d86:	4b57      	ldr	r3, [pc, #348]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x104>
 8003d92:	e000      	b.n	8003d96 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d06f      	beq.n	8003e82 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003da2:	4b50      	ldr	r3, [pc, #320]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dae:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 030c 	and.w	r3, r3, #12
        || \
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d105      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dba:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00b      	beq.n	8003dde <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dc6:	4b47      	ldr	r3, [pc, #284]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d11c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd2:	4b44      	ldr	r3, [pc, #272]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d116      	bne.n	8003e0c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dde:	4b41      	ldr	r3, [pc, #260]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d005      	beq.n	8003df6 <HAL_RCC_OscConfig+0x186>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d001      	beq.n	8003df6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e1d3      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	4937      	ldr	r1, [pc, #220]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0a:	e03a      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d020      	beq.n	8003e56 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e14:	4b34      	ldr	r3, [pc, #208]	@ (8003ee8 <HAL_RCC_OscConfig+0x278>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe f84b 	bl	8001eb4 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fe f847 	bl	8001eb4 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1b4      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e34:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b28      	ldr	r3, [pc, #160]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4925      	ldr	r1, [pc, #148]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	600b      	str	r3, [r1, #0]
 8003e54:	e015      	b.n	8003e82 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b24      	ldr	r3, [pc, #144]	@ (8003ee8 <HAL_RCC_OscConfig+0x278>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f82a 	bl	8001eb4 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e64:	f7fe f826 	bl	8001eb4 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e193      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e76:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d036      	beq.n	8003efc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d016      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e96:	4b15      	ldr	r3, [pc, #84]	@ (8003eec <HAL_RCC_OscConfig+0x27c>)
 8003e98:	2201      	movs	r2, #1
 8003e9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9c:	f7fe f80a 	bl	8001eb4 <HAL_GetTick>
 8003ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea2:	e008      	b.n	8003eb6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea4:	f7fe f806 	bl	8001eb4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e173      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee4 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0f0      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x234>
 8003ec2:	e01b      	b.n	8003efc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec4:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_RCC_OscConfig+0x27c>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eca:	f7fd fff3 	bl	8001eb4 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	e00e      	b.n	8003ef0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed2:	f7fd ffef 	bl	8001eb4 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d907      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e15c      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	42470000 	.word	0x42470000
 8003eec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	4b8a      	ldr	r3, [pc, #552]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1ea      	bne.n	8003ed2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 8097 	beq.w	8004038 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f0e:	4b83      	ldr	r3, [pc, #524]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10f      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
 8003f1e:	4b7f      	ldr	r3, [pc, #508]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f22:	4a7e      	ldr	r2, [pc, #504]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2a:	4b7c      	ldr	r3, [pc, #496]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f32:	60bb      	str	r3, [r7, #8]
 8003f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f36:	2301      	movs	r3, #1
 8003f38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3a:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d118      	bne.n	8003f78 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f46:	4b76      	ldr	r3, [pc, #472]	@ (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a75      	ldr	r2, [pc, #468]	@ (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f52:	f7fd ffaf 	bl	8001eb4 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5a:	f7fd ffab 	bl	8001eb4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e118      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6c:	4b6c      	ldr	r3, [pc, #432]	@ (8004120 <HAL_RCC_OscConfig+0x4b0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d0f0      	beq.n	8003f5a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCC_OscConfig+0x31e>
 8003f80:	4b66      	ldr	r3, [pc, #408]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f84:	4a65      	ldr	r2, [pc, #404]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	f043 0301 	orr.w	r3, r3, #1
 8003f8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8c:	e01c      	b.n	8003fc8 <HAL_RCC_OscConfig+0x358>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x340>
 8003f96:	4b61      	ldr	r3, [pc, #388]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	4a60      	ldr	r2, [pc, #384]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa2:	4b5e      	ldr	r3, [pc, #376]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa6:	4a5d      	ldr	r2, [pc, #372]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x358>
 8003fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a59      	ldr	r2, [pc, #356]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbc:	4b57      	ldr	r3, [pc, #348]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc0:	4a56      	ldr	r2, [pc, #344]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd0:	f7fd ff70 	bl	8001eb4 <HAL_GetTick>
 8003fd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd6:	e00a      	b.n	8003fee <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd8:	f7fd ff6c 	bl	8001eb4 <HAL_GetTick>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e0d7      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fee:	4b4b      	ldr	r3, [pc, #300]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff2:	f003 0302 	and.w	r3, r3, #2
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0ee      	beq.n	8003fd8 <HAL_RCC_OscConfig+0x368>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fd ff5a 	bl	8001eb4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fd ff56 	bl	8001eb4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e0c1      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401a:	4b40      	ldr	r3, [pc, #256]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1ee      	bne.n	8004004 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b01      	cmp	r3, #1
 800402a:	d105      	bne.n	8004038 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402c:	4b3b      	ldr	r3, [pc, #236]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 800402e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004030:	4a3a      	ldr	r2, [pc, #232]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004036:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80ad 	beq.w	800419c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004042:	4b36      	ldr	r3, [pc, #216]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b08      	cmp	r3, #8
 800404c:	d060      	beq.n	8004110 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d145      	bne.n	80040e2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004056:	4b33      	ldr	r3, [pc, #204]	@ (8004124 <HAL_RCC_OscConfig+0x4b4>)
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd ff2a 	bl	8001eb4 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004064:	f7fd ff26 	bl	8001eb4 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b02      	cmp	r3, #2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e093      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004076:	4b29      	ldr	r3, [pc, #164]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	019b      	lsls	r3, r3, #6
 8004092:	431a      	orrs	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004098:	085b      	lsrs	r3, r3, #1
 800409a:	3b01      	subs	r3, #1
 800409c:	041b      	lsls	r3, r3, #16
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a4:	061b      	lsls	r3, r3, #24
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	071b      	lsls	r3, r3, #28
 80040ae:	491b      	ldr	r1, [pc, #108]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b4:	4b1b      	ldr	r3, [pc, #108]	@ (8004124 <HAL_RCC_OscConfig+0x4b4>)
 80040b6:	2201      	movs	r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ba:	f7fd fefb 	bl	8001eb4 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c2:	f7fd fef7 	bl	8001eb4 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e064      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d4:	4b11      	ldr	r3, [pc, #68]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x452>
 80040e0:	e05c      	b.n	800419c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <HAL_RCC_OscConfig+0x4b4>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e8:	f7fd fee4 	bl	8001eb4 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f0:	f7fd fee0 	bl	8001eb4 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e04d      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004102:	4b06      	ldr	r3, [pc, #24]	@ (800411c <HAL_RCC_OscConfig+0x4ac>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x480>
 800410e:	e045      	b.n	800419c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b01      	cmp	r3, #1
 8004116:	d107      	bne.n	8004128 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e040      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
 800411c:	40023800 	.word	0x40023800
 8004120:	40007000 	.word	0x40007000
 8004124:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004128:	4b1f      	ldr	r3, [pc, #124]	@ (80041a8 <HAL_RCC_OscConfig+0x538>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d030      	beq.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d129      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	429a      	cmp	r2, r3
 8004150:	d122      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004158:	4013      	ands	r3, r2
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800415e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004160:	4293      	cmp	r3, r2
 8004162:	d119      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800416e:	085b      	lsrs	r3, r3, #1
 8004170:	3b01      	subs	r3, #1
 8004172:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004174:	429a      	cmp	r2, r3
 8004176:	d10f      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004182:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40023800 	.word	0x40023800

080041ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e041      	b.n	8004242 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd fc30 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 fae6 	bl	80047bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b085      	sub	sp, #20
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b01      	cmp	r3, #1
 800425e:	d001      	beq.n	8004264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e046      	b.n	80042f2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a23      	ldr	r2, [pc, #140]	@ (8004300 <HAL_TIM_Base_Start+0xb4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d022      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d01d      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a1f      	ldr	r2, [pc, #124]	@ (8004304 <HAL_TIM_Base_Start+0xb8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d018      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a1e      	ldr	r2, [pc, #120]	@ (8004308 <HAL_TIM_Base_Start+0xbc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d013      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a1c      	ldr	r2, [pc, #112]	@ (800430c <HAL_TIM_Base_Start+0xc0>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d00e      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004310 <HAL_TIM_Base_Start+0xc4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d009      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	@ (8004314 <HAL_TIM_Base_Start+0xc8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d004      	beq.n	80042bc <HAL_TIM_Base_Start+0x70>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_TIM_Base_Start+0xcc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d111      	bne.n	80042e0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b06      	cmp	r3, #6
 80042cc:	d010      	beq.n	80042f0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f042 0201 	orr.w	r2, r2, #1
 80042dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	e007      	b.n	80042f0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40001800 	.word	0x40001800

0800431c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432a:	b2db      	uxtb	r3, r3
 800432c:	2b01      	cmp	r3, #1
 800432e:	d001      	beq.n	8004334 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e04e      	b.n	80043d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a23      	ldr	r2, [pc, #140]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435e:	d01d      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1f      	ldr	r2, [pc, #124]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1e      	ldr	r2, [pc, #120]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1c      	ldr	r2, [pc, #112]	@ (80043ec <HAL_TIM_Base_Start_IT+0xd0>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1b      	ldr	r2, [pc, #108]	@ (80043f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a19      	ldr	r2, [pc, #100]	@ (80043f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_TIM_Base_Start_IT+0x80>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a18      	ldr	r2, [pc, #96]	@ (80043f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d111      	bne.n	80043c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b06      	cmp	r3, #6
 80043ac:	d010      	beq.n	80043d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	e007      	b.n	80043d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3714      	adds	r7, #20
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
 80043de:	bf00      	nop
 80043e0:	40010000 	.word	0x40010000
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40000800 	.word	0x40000800
 80043ec:	40000c00 	.word	0x40000c00
 80043f0:	40010400 	.word	0x40010400
 80043f4:	40014000 	.word	0x40014000
 80043f8:	40001800 	.word	0x40001800

080043fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0302 	and.w	r3, r3, #2
 800441a:	2b00      	cmp	r3, #0
 800441c:	d020      	beq.n	8004460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0302 	and.w	r3, r3, #2
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01b      	beq.n	8004460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0202 	mvn.w	r2, #2
 8004430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d003      	beq.n	800444e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f999 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 800444c:	e005      	b.n	800445a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f98b 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 f99c 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d020      	beq.n	80044ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d01b      	beq.n	80044ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0204 	mvn.w	r2, #4
 800447c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f973 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004498:	e005      	b.n	80044a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f965 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f976 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0308 	and.w	r3, r3, #8
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d020      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f003 0308 	and.w	r3, r3, #8
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d01b      	beq.n	80044f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f06f 0208 	mvn.w	r2, #8
 80044c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2204      	movs	r2, #4
 80044ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d003      	beq.n	80044e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f94d 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 80044e4:	e005      	b.n	80044f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f93f 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f950 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d020      	beq.n	8004544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d01b      	beq.n	8004544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f06f 0210 	mvn.w	r2, #16
 8004514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2208      	movs	r2, #8
 800451a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f927 	bl	800477e <HAL_TIM_IC_CaptureCallback>
 8004530:	e005      	b.n	800453e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f919 	bl	800476a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f92a 	bl	8004792 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	d007      	beq.n	8004568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f06f 0201 	mvn.w	r2, #1
 8004560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fd f926 	bl	80017b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 fade 	bl	8004b48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00c      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d007      	beq.n	80045b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f8fb 	bl	80047a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f06f 0220 	mvn.w	r2, #32
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fab0 	bl	8004b34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d4:	bf00      	nop
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIM_ConfigClockSource+0x1c>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0b4      	b.n	8004762 <HAL_TIM_ConfigClockSource+0x186>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800461e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004630:	d03e      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0xd4>
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004636:	f200 8087 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800463e:	f000 8086 	beq.w	800474e <HAL_TIM_ConfigClockSource+0x172>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004646:	d87f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004648:	2b70      	cmp	r3, #112	@ 0x70
 800464a:	d01a      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xa6>
 800464c:	2b70      	cmp	r3, #112	@ 0x70
 800464e:	d87b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b60      	cmp	r3, #96	@ 0x60
 8004652:	d050      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x11a>
 8004654:	2b60      	cmp	r3, #96	@ 0x60
 8004656:	d877      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b50      	cmp	r3, #80	@ 0x50
 800465a:	d03c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0xfa>
 800465c:	2b50      	cmp	r3, #80	@ 0x50
 800465e:	d873      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	d058      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x13a>
 8004664:	2b40      	cmp	r3, #64	@ 0x40
 8004666:	d86f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b30      	cmp	r3, #48	@ 0x30
 800466a:	d064      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15a>
 800466c:	2b30      	cmp	r3, #48	@ 0x30
 800466e:	d86b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b20      	cmp	r3, #32
 8004672:	d060      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d867      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b10      	cmp	r3, #16
 800467e:	d05a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x15a>
 8004680:	e062      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004692:	f000 f9b3 	bl	80049fc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	609a      	str	r2, [r3, #8]
      break;
 80046ae:	e04f      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c0:	f000 f99c 	bl	80049fc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e03c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 f910 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2150      	movs	r1, #80	@ 0x50
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 f969 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 80046f4:	e02c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004702:	461a      	mov	r2, r3
 8004704:	f000 f92f 	bl	8004966 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2160      	movs	r1, #96	@ 0x60
 800470e:	4618      	mov	r0, r3
 8004710:	f000 f959 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 8004714:	e01c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004722:	461a      	mov	r2, r3
 8004724:	f000 f8f0 	bl	8004908 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2140      	movs	r1, #64	@ 0x40
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f949 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 8004734:	e00c      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f000 f940 	bl	80049c6 <TIM_ITRx_SetConfig>
      break;
 8004746:	e003      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	73fb      	strb	r3, [r7, #15]
      break;
 800474c:	e000      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800474e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}

0800476a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004772:	bf00      	nop
 8004774:	370c      	adds	r7, #12
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ae:	bf00      	nop
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a43      	ldr	r2, [pc, #268]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047da:	d00f      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a40      	ldr	r2, [pc, #256]	@ (80048e0 <TIM_Base_SetConfig+0x124>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a3f      	ldr	r2, [pc, #252]	@ (80048e4 <TIM_Base_SetConfig+0x128>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3e      	ldr	r2, [pc, #248]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x40>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a3d      	ldr	r2, [pc, #244]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a32      	ldr	r2, [pc, #200]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d02b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800481c:	d027      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a2f      	ldr	r2, [pc, #188]	@ (80048e0 <TIM_Base_SetConfig+0x124>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d023      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <TIM_Base_SetConfig+0x128>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <TIM_Base_SetConfig+0x12c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2c      	ldr	r2, [pc, #176]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d017      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2b      	ldr	r2, [pc, #172]	@ (80048f0 <TIM_Base_SetConfig+0x134>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d013      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2a      	ldr	r2, [pc, #168]	@ (80048f4 <TIM_Base_SetConfig+0x138>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00f      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a29      	ldr	r2, [pc, #164]	@ (80048f8 <TIM_Base_SetConfig+0x13c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d00b      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a28      	ldr	r2, [pc, #160]	@ (80048fc <TIM_Base_SetConfig+0x140>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d007      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a27      	ldr	r2, [pc, #156]	@ (8004900 <TIM_Base_SetConfig+0x144>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d003      	beq.n	800486e <TIM_Base_SetConfig+0xb2>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a26      	ldr	r2, [pc, #152]	@ (8004904 <TIM_Base_SetConfig+0x148>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d108      	bne.n	8004880 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004874:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	4313      	orrs	r3, r2
 800487e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	689a      	ldr	r2, [r3, #8]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a0e      	ldr	r2, [pc, #56]	@ (80048dc <TIM_Base_SetConfig+0x120>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d003      	beq.n	80048ae <TIM_Base_SetConfig+0xf2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a10      	ldr	r2, [pc, #64]	@ (80048ec <TIM_Base_SetConfig+0x130>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d103      	bne.n	80048b6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691a      	ldr	r2, [r3, #16]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f043 0204 	orr.w	r2, r3, #4
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40000400 	.word	0x40000400
 80048e4:	40000800 	.word	0x40000800
 80048e8:	40000c00 	.word	0x40000c00
 80048ec:	40010400 	.word	0x40010400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800
 80048fc:	40001800 	.word	0x40001800
 8004900:	40001c00 	.word	0x40001c00
 8004904:	40002000 	.word	0x40002000

08004908 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	f023 0201 	bic.w	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	4313      	orrs	r3, r2
 800493c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f023 030a 	bic.w	r3, r3, #10
 8004944:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4313      	orrs	r3, r2
 800494c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	621a      	str	r2, [r3, #32]
}
 800495a:	bf00      	nop
 800495c:	371c      	adds	r7, #28
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004966:	b480      	push	{r7}
 8004968:	b087      	sub	sp, #28
 800496a:	af00      	add	r7, sp, #0
 800496c:	60f8      	str	r0, [r7, #12]
 800496e:	60b9      	str	r1, [r7, #8]
 8004970:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f023 0210 	bic.w	r2, r3, #16
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80049a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	693a      	ldr	r2, [r7, #16]
 80049b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049de:	683a      	ldr	r2, [r7, #0]
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	f043 0307 	orr.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
}
 80049f0:	bf00      	nop
 80049f2:	3714      	adds	r7, #20
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b087      	sub	sp, #28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a16:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	697a      	ldr	r2, [r7, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d101      	bne.n	8004a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a50:	2302      	movs	r3, #2
 8004a52:	e05a      	b.n	8004b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	68fa      	ldr	r2, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a21      	ldr	r2, [pc, #132]	@ (8004b18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aa0:	d01d      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a1a      	ldr	r2, [pc, #104]	@ (8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a18      	ldr	r2, [pc, #96]	@ (8004b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a17      	ldr	r2, [pc, #92]	@ (8004b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a15      	ldr	r2, [pc, #84]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d10c      	bne.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3714      	adds	r7, #20
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40010400 	.word	0x40010400
 8004b2c:	40014000 	.word	0x40014000
 8004b30:	40001800 	.word	0x40001800

08004b34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e042      	b.n	8004bf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fc ff78 	bl	8001a78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2224      	movs	r2, #36	@ 0x24
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68da      	ldr	r2, [r3, #12]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f973 	bl	8004e8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	691a      	ldr	r2, [r3, #16]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695a      	ldr	r2, [r3, #20]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004bc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68da      	ldr	r2, [r3, #12]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004bd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b08a      	sub	sp, #40	@ 0x28
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	603b      	str	r3, [r7, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b20      	cmp	r3, #32
 8004c1a:	d175      	bne.n	8004d08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <HAL_UART_Transmit+0x2c>
 8004c22:	88fb      	ldrh	r3, [r7, #6]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d101      	bne.n	8004c2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e06e      	b.n	8004d0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2221      	movs	r2, #33	@ 0x21
 8004c36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c3a:	f7fd f93b 	bl	8001eb4 <HAL_GetTick>
 8004c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	88fa      	ldrh	r2, [r7, #6]
 8004c44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	88fa      	ldrh	r2, [r7, #6]
 8004c4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c54:	d108      	bne.n	8004c68 <HAL_UART_Transmit+0x6c>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d104      	bne.n	8004c68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	e003      	b.n	8004c70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c70:	e02e      	b.n	8004cd0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2180      	movs	r1, #128	@ 0x80
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f848 	bl	8004d12 <UART_WaitOnFlagUntilTimeout>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d005      	beq.n	8004c94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e03a      	b.n	8004d0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10b      	bne.n	8004cb2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	3302      	adds	r3, #2
 8004cae:	61bb      	str	r3, [r7, #24]
 8004cb0:	e007      	b.n	8004cc2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	781a      	ldrb	r2, [r3, #0]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1cb      	bne.n	8004c72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2140      	movs	r1, #64	@ 0x40
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f814 	bl	8004d12 <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e006      	b.n	8004d0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3720      	adds	r7, #32
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b086      	sub	sp, #24
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	603b      	str	r3, [r7, #0]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d22:	e03b      	b.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2a:	d037      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2c:	f7fd f8c2 	bl	8001eb4 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e03a      	b.n	8004dbc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d023      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b80      	cmp	r3, #128	@ 0x80
 8004d58:	d020      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b40      	cmp	r3, #64	@ 0x40
 8004d5e:	d01d      	beq.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d116      	bne.n	8004d9c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	617b      	str	r3, [r7, #20]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f81d 	bl	8004dc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2208      	movs	r2, #8
 8004d8e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e00f      	b.n	8004dbc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	4013      	ands	r3, r2
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d0b4      	beq.n	8004d24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b095      	sub	sp, #84	@ 0x54
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004dec:	643a      	str	r2, [r7, #64]	@ 0x40
 8004dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004df2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e08:	6a3b      	ldr	r3, [r7, #32]
 8004e0a:	e853 3f00 	ldrex	r3, [r3]
 8004e0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f023 0301 	bic.w	r3, r3, #1
 8004e16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3314      	adds	r3, #20
 8004e1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e28:	e841 2300 	strex	r3, r2, [r1]
 8004e2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e5      	bne.n	8004e00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d119      	bne.n	8004e70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	e853 3f00 	ldrex	r3, [r3]
 8004e4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f023 0310 	bic.w	r3, r3, #16
 8004e52:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	330c      	adds	r3, #12
 8004e5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e5c:	61ba      	str	r2, [r7, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e60:	6979      	ldr	r1, [r7, #20]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	e841 2300 	strex	r3, r2, [r1]
 8004e68:	613b      	str	r3, [r7, #16]
   return(result);
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1e5      	bne.n	8004e3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2220      	movs	r2, #32
 8004e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e7e:	bf00      	nop
 8004e80:	3754      	adds	r7, #84	@ 0x54
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
	...

08004e8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e90:	b0c0      	sub	sp, #256	@ 0x100
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea8:	68d9      	ldr	r1, [r3, #12]
 8004eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	ea40 0301 	orr.w	r3, r0, r1
 8004eb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004ee4:	f021 010c 	bic.w	r1, r1, #12
 8004ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ef2:	430b      	orrs	r3, r1
 8004ef4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f06:	6999      	ldr	r1, [r3, #24]
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	ea40 0301 	orr.w	r3, r0, r1
 8004f12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	4b8f      	ldr	r3, [pc, #572]	@ (8005158 <UART_SetConfig+0x2cc>)
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d005      	beq.n	8004f2c <UART_SetConfig+0xa0>
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4b8d      	ldr	r3, [pc, #564]	@ (800515c <UART_SetConfig+0x2d0>)
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d104      	bne.n	8004f36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f2c:	f7fe fcb0 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8004f30:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f34:	e003      	b.n	8004f3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f36:	f7fe fc97 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 8004f3a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f48:	f040 810c 	bne.w	8005164 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f50:	2200      	movs	r2, #0
 8004f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f56:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004f5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004f5e:	4622      	mov	r2, r4
 8004f60:	462b      	mov	r3, r5
 8004f62:	1891      	adds	r1, r2, r2
 8004f64:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004f66:	415b      	adcs	r3, r3
 8004f68:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004f6e:	4621      	mov	r1, r4
 8004f70:	eb12 0801 	adds.w	r8, r2, r1
 8004f74:	4629      	mov	r1, r5
 8004f76:	eb43 0901 	adc.w	r9, r3, r1
 8004f7a:	f04f 0200 	mov.w	r2, #0
 8004f7e:	f04f 0300 	mov.w	r3, #0
 8004f82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f8e:	4690      	mov	r8, r2
 8004f90:	4699      	mov	r9, r3
 8004f92:	4623      	mov	r3, r4
 8004f94:	eb18 0303 	adds.w	r3, r8, r3
 8004f98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004f9c:	462b      	mov	r3, r5
 8004f9e:	eb49 0303 	adc.w	r3, r9, r3
 8004fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004fb2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004fb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004fba:	460b      	mov	r3, r1
 8004fbc:	18db      	adds	r3, r3, r3
 8004fbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	eb42 0303 	adc.w	r3, r2, r3
 8004fc6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004fc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004fcc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004fd0:	f7fb fd94 	bl	8000afc <__aeabi_uldivmod>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4b61      	ldr	r3, [pc, #388]	@ (8005160 <UART_SetConfig+0x2d4>)
 8004fda:	fba3 2302 	umull	r2, r3, r3, r2
 8004fde:	095b      	lsrs	r3, r3, #5
 8004fe0:	011c      	lsls	r4, r3, #4
 8004fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004fec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004ff0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004ff4:	4642      	mov	r2, r8
 8004ff6:	464b      	mov	r3, r9
 8004ff8:	1891      	adds	r1, r2, r2
 8004ffa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ffc:	415b      	adcs	r3, r3
 8004ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005000:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005004:	4641      	mov	r1, r8
 8005006:	eb12 0a01 	adds.w	sl, r2, r1
 800500a:	4649      	mov	r1, r9
 800500c:	eb43 0b01 	adc.w	fp, r3, r1
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	f04f 0300 	mov.w	r3, #0
 8005018:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800501c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005024:	4692      	mov	sl, r2
 8005026:	469b      	mov	fp, r3
 8005028:	4643      	mov	r3, r8
 800502a:	eb1a 0303 	adds.w	r3, sl, r3
 800502e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005032:	464b      	mov	r3, r9
 8005034:	eb4b 0303 	adc.w	r3, fp, r3
 8005038:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005048:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800504c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	643b      	str	r3, [r7, #64]	@ 0x40
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	647b      	str	r3, [r7, #68]	@ 0x44
 800505e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005062:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005066:	f7fb fd49 	bl	8000afc <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4611      	mov	r1, r2
 8005070:	4b3b      	ldr	r3, [pc, #236]	@ (8005160 <UART_SetConfig+0x2d4>)
 8005072:	fba3 2301 	umull	r2, r3, r3, r1
 8005076:	095b      	lsrs	r3, r3, #5
 8005078:	2264      	movs	r2, #100	@ 0x64
 800507a:	fb02 f303 	mul.w	r3, r2, r3
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005086:	4b36      	ldr	r3, [pc, #216]	@ (8005160 <UART_SetConfig+0x2d4>)
 8005088:	fba3 2302 	umull	r2, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	005b      	lsls	r3, r3, #1
 8005090:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005094:	441c      	add	r4, r3
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050b0:	415b      	adcs	r3, r3
 80050b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005104:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800510c:	460b      	mov	r3, r1
 800510e:	18db      	adds	r3, r3, r3
 8005110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005112:	4613      	mov	r3, r2
 8005114:	eb42 0303 	adc.w	r3, r2, r3
 8005118:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800511a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800511e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005122:	f7fb fceb 	bl	8000afc <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4b0d      	ldr	r3, [pc, #52]	@ (8005160 <UART_SetConfig+0x2d4>)
 800512c:	fba3 1302 	umull	r1, r3, r3, r2
 8005130:	095b      	lsrs	r3, r3, #5
 8005132:	2164      	movs	r1, #100	@ 0x64
 8005134:	fb01 f303 	mul.w	r3, r1, r3
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	00db      	lsls	r3, r3, #3
 800513c:	3332      	adds	r3, #50	@ 0x32
 800513e:	4a08      	ldr	r2, [pc, #32]	@ (8005160 <UART_SetConfig+0x2d4>)
 8005140:	fba2 2303 	umull	r2, r3, r2, r3
 8005144:	095b      	lsrs	r3, r3, #5
 8005146:	f003 0207 	and.w	r2, r3, #7
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4422      	add	r2, r4
 8005152:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005154:	e106      	b.n	8005364 <UART_SetConfig+0x4d8>
 8005156:	bf00      	nop
 8005158:	40011000 	.word	0x40011000
 800515c:	40011400 	.word	0x40011400
 8005160:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005164:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005168:	2200      	movs	r2, #0
 800516a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800516e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005172:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005176:	4642      	mov	r2, r8
 8005178:	464b      	mov	r3, r9
 800517a:	1891      	adds	r1, r2, r2
 800517c:	6239      	str	r1, [r7, #32]
 800517e:	415b      	adcs	r3, r3
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
 8005182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005186:	4641      	mov	r1, r8
 8005188:	1854      	adds	r4, r2, r1
 800518a:	4649      	mov	r1, r9
 800518c:	eb43 0501 	adc.w	r5, r3, r1
 8005190:	f04f 0200 	mov.w	r2, #0
 8005194:	f04f 0300 	mov.w	r3, #0
 8005198:	00eb      	lsls	r3, r5, #3
 800519a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800519e:	00e2      	lsls	r2, r4, #3
 80051a0:	4614      	mov	r4, r2
 80051a2:	461d      	mov	r5, r3
 80051a4:	4643      	mov	r3, r8
 80051a6:	18e3      	adds	r3, r4, r3
 80051a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051ac:	464b      	mov	r3, r9
 80051ae:	eb45 0303 	adc.w	r3, r5, r3
 80051b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80051c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80051d2:	4629      	mov	r1, r5
 80051d4:	008b      	lsls	r3, r1, #2
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051dc:	4621      	mov	r1, r4
 80051de:	008a      	lsls	r2, r1, #2
 80051e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80051e4:	f7fb fc8a 	bl	8000afc <__aeabi_uldivmod>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4b60      	ldr	r3, [pc, #384]	@ (8005370 <UART_SetConfig+0x4e4>)
 80051ee:	fba3 2302 	umull	r2, r3, r3, r2
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	011c      	lsls	r4, r3, #4
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005200:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005204:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	61b9      	str	r1, [r7, #24]
 8005210:	415b      	adcs	r3, r3
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6139      	str	r1, [r7, #16]
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800524c:	464b      	mov	r3, r9
 800524e:	460a      	mov	r2, r1
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005262:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005270:	4649      	mov	r1, r9
 8005272:	008b      	lsls	r3, r1, #2
 8005274:	4641      	mov	r1, r8
 8005276:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800527a:	4641      	mov	r1, r8
 800527c:	008a      	lsls	r2, r1, #2
 800527e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005282:	f7fb fc3b 	bl	8000afc <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4611      	mov	r1, r2
 800528c:	4b38      	ldr	r3, [pc, #224]	@ (8005370 <UART_SetConfig+0x4e4>)
 800528e:	fba3 2301 	umull	r2, r3, r3, r1
 8005292:	095b      	lsrs	r3, r3, #5
 8005294:	2264      	movs	r2, #100	@ 0x64
 8005296:	fb02 f303 	mul.w	r3, r2, r3
 800529a:	1acb      	subs	r3, r1, r3
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	3332      	adds	r3, #50	@ 0x32
 80052a0:	4a33      	ldr	r2, [pc, #204]	@ (8005370 <UART_SetConfig+0x4e4>)
 80052a2:	fba2 2303 	umull	r2, r3, r2, r3
 80052a6:	095b      	lsrs	r3, r3, #5
 80052a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052ac:	441c      	add	r4, r3
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b2:	2200      	movs	r2, #0
 80052b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80052b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80052b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80052bc:	4642      	mov	r2, r8
 80052be:	464b      	mov	r3, r9
 80052c0:	1891      	adds	r1, r2, r2
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	415b      	adcs	r3, r3
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052cc:	4641      	mov	r1, r8
 80052ce:	1851      	adds	r1, r2, r1
 80052d0:	6039      	str	r1, [r7, #0]
 80052d2:	4649      	mov	r1, r9
 80052d4:	414b      	adcs	r3, r1
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	f04f 0200 	mov.w	r2, #0
 80052dc:	f04f 0300 	mov.w	r3, #0
 80052e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052e4:	4659      	mov	r1, fp
 80052e6:	00cb      	lsls	r3, r1, #3
 80052e8:	4651      	mov	r1, sl
 80052ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ee:	4651      	mov	r1, sl
 80052f0:	00ca      	lsls	r2, r1, #3
 80052f2:	4610      	mov	r0, r2
 80052f4:	4619      	mov	r1, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	4642      	mov	r2, r8
 80052fa:	189b      	adds	r3, r3, r2
 80052fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80052fe:	464b      	mov	r3, r9
 8005300:	460a      	mov	r2, r1
 8005302:	eb42 0303 	adc.w	r3, r2, r3
 8005306:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	663b      	str	r3, [r7, #96]	@ 0x60
 8005312:	667a      	str	r2, [r7, #100]	@ 0x64
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005320:	4649      	mov	r1, r9
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	4641      	mov	r1, r8
 8005326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532a:	4641      	mov	r1, r8
 800532c:	008a      	lsls	r2, r1, #2
 800532e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005332:	f7fb fbe3 	bl	8000afc <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4b0d      	ldr	r3, [pc, #52]	@ (8005370 <UART_SetConfig+0x4e4>)
 800533c:	fba3 1302 	umull	r1, r3, r3, r2
 8005340:	095b      	lsrs	r3, r3, #5
 8005342:	2164      	movs	r1, #100	@ 0x64
 8005344:	fb01 f303 	mul.w	r3, r1, r3
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	3332      	adds	r3, #50	@ 0x32
 800534e:	4a08      	ldr	r2, [pc, #32]	@ (8005370 <UART_SetConfig+0x4e4>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	095b      	lsrs	r3, r3, #5
 8005356:	f003 020f 	and.w	r2, r3, #15
 800535a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4422      	add	r2, r4
 8005362:	609a      	str	r2, [r3, #8]
}
 8005364:	bf00      	nop
 8005366:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800536a:	46bd      	mov	sp, r7
 800536c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005370:	51eb851f 	.word	0x51eb851f

08005374 <malloc>:
 8005374:	4b02      	ldr	r3, [pc, #8]	@ (8005380 <malloc+0xc>)
 8005376:	4601      	mov	r1, r0
 8005378:	6818      	ldr	r0, [r3, #0]
 800537a:	f000 b825 	b.w	80053c8 <_malloc_r>
 800537e:	bf00      	nop
 8005380:	20000018 	.word	0x20000018

08005384 <sbrk_aligned>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4e0f      	ldr	r6, [pc, #60]	@ (80053c4 <sbrk_aligned+0x40>)
 8005388:	460c      	mov	r4, r1
 800538a:	6831      	ldr	r1, [r6, #0]
 800538c:	4605      	mov	r5, r0
 800538e:	b911      	cbnz	r1, 8005396 <sbrk_aligned+0x12>
 8005390:	f000 fa32 	bl	80057f8 <_sbrk_r>
 8005394:	6030      	str	r0, [r6, #0]
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
 800539a:	f000 fa2d 	bl	80057f8 <_sbrk_r>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d103      	bne.n	80053aa <sbrk_aligned+0x26>
 80053a2:	f04f 34ff 	mov.w	r4, #4294967295
 80053a6:	4620      	mov	r0, r4
 80053a8:	bd70      	pop	{r4, r5, r6, pc}
 80053aa:	1cc4      	adds	r4, r0, #3
 80053ac:	f024 0403 	bic.w	r4, r4, #3
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d0f8      	beq.n	80053a6 <sbrk_aligned+0x22>
 80053b4:	1a21      	subs	r1, r4, r0
 80053b6:	4628      	mov	r0, r5
 80053b8:	f000 fa1e 	bl	80057f8 <_sbrk_r>
 80053bc:	3001      	adds	r0, #1
 80053be:	d1f2      	bne.n	80053a6 <sbrk_aligned+0x22>
 80053c0:	e7ef      	b.n	80053a2 <sbrk_aligned+0x1e>
 80053c2:	bf00      	nop
 80053c4:	20008384 	.word	0x20008384

080053c8 <_malloc_r>:
 80053c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053cc:	1ccd      	adds	r5, r1, #3
 80053ce:	f025 0503 	bic.w	r5, r5, #3
 80053d2:	3508      	adds	r5, #8
 80053d4:	2d0c      	cmp	r5, #12
 80053d6:	bf38      	it	cc
 80053d8:	250c      	movcc	r5, #12
 80053da:	2d00      	cmp	r5, #0
 80053dc:	4606      	mov	r6, r0
 80053de:	db01      	blt.n	80053e4 <_malloc_r+0x1c>
 80053e0:	42a9      	cmp	r1, r5
 80053e2:	d904      	bls.n	80053ee <_malloc_r+0x26>
 80053e4:	230c      	movs	r3, #12
 80053e6:	6033      	str	r3, [r6, #0]
 80053e8:	2000      	movs	r0, #0
 80053ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054c4 <_malloc_r+0xfc>
 80053f2:	f000 f869 	bl	80054c8 <__malloc_lock>
 80053f6:	f8d8 3000 	ldr.w	r3, [r8]
 80053fa:	461c      	mov	r4, r3
 80053fc:	bb44      	cbnz	r4, 8005450 <_malloc_r+0x88>
 80053fe:	4629      	mov	r1, r5
 8005400:	4630      	mov	r0, r6
 8005402:	f7ff ffbf 	bl	8005384 <sbrk_aligned>
 8005406:	1c43      	adds	r3, r0, #1
 8005408:	4604      	mov	r4, r0
 800540a:	d158      	bne.n	80054be <_malloc_r+0xf6>
 800540c:	f8d8 4000 	ldr.w	r4, [r8]
 8005410:	4627      	mov	r7, r4
 8005412:	2f00      	cmp	r7, #0
 8005414:	d143      	bne.n	800549e <_malloc_r+0xd6>
 8005416:	2c00      	cmp	r4, #0
 8005418:	d04b      	beq.n	80054b2 <_malloc_r+0xea>
 800541a:	6823      	ldr	r3, [r4, #0]
 800541c:	4639      	mov	r1, r7
 800541e:	4630      	mov	r0, r6
 8005420:	eb04 0903 	add.w	r9, r4, r3
 8005424:	f000 f9e8 	bl	80057f8 <_sbrk_r>
 8005428:	4581      	cmp	r9, r0
 800542a:	d142      	bne.n	80054b2 <_malloc_r+0xea>
 800542c:	6821      	ldr	r1, [r4, #0]
 800542e:	1a6d      	subs	r5, r5, r1
 8005430:	4629      	mov	r1, r5
 8005432:	4630      	mov	r0, r6
 8005434:	f7ff ffa6 	bl	8005384 <sbrk_aligned>
 8005438:	3001      	adds	r0, #1
 800543a:	d03a      	beq.n	80054b2 <_malloc_r+0xea>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	442b      	add	r3, r5
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	f8d8 3000 	ldr.w	r3, [r8]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	bb62      	cbnz	r2, 80054a4 <_malloc_r+0xdc>
 800544a:	f8c8 7000 	str.w	r7, [r8]
 800544e:	e00f      	b.n	8005470 <_malloc_r+0xa8>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	1b52      	subs	r2, r2, r5
 8005454:	d420      	bmi.n	8005498 <_malloc_r+0xd0>
 8005456:	2a0b      	cmp	r2, #11
 8005458:	d917      	bls.n	800548a <_malloc_r+0xc2>
 800545a:	1961      	adds	r1, r4, r5
 800545c:	42a3      	cmp	r3, r4
 800545e:	6025      	str	r5, [r4, #0]
 8005460:	bf18      	it	ne
 8005462:	6059      	strne	r1, [r3, #4]
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	bf08      	it	eq
 8005468:	f8c8 1000 	streq.w	r1, [r8]
 800546c:	5162      	str	r2, [r4, r5]
 800546e:	604b      	str	r3, [r1, #4]
 8005470:	4630      	mov	r0, r6
 8005472:	f000 f82f 	bl	80054d4 <__malloc_unlock>
 8005476:	f104 000b 	add.w	r0, r4, #11
 800547a:	1d23      	adds	r3, r4, #4
 800547c:	f020 0007 	bic.w	r0, r0, #7
 8005480:	1ac2      	subs	r2, r0, r3
 8005482:	bf1c      	itt	ne
 8005484:	1a1b      	subne	r3, r3, r0
 8005486:	50a3      	strne	r3, [r4, r2]
 8005488:	e7af      	b.n	80053ea <_malloc_r+0x22>
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	42a3      	cmp	r3, r4
 800548e:	bf0c      	ite	eq
 8005490:	f8c8 2000 	streq.w	r2, [r8]
 8005494:	605a      	strne	r2, [r3, #4]
 8005496:	e7eb      	b.n	8005470 <_malloc_r+0xa8>
 8005498:	4623      	mov	r3, r4
 800549a:	6864      	ldr	r4, [r4, #4]
 800549c:	e7ae      	b.n	80053fc <_malloc_r+0x34>
 800549e:	463c      	mov	r4, r7
 80054a0:	687f      	ldr	r7, [r7, #4]
 80054a2:	e7b6      	b.n	8005412 <_malloc_r+0x4a>
 80054a4:	461a      	mov	r2, r3
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	d1fb      	bne.n	80054a4 <_malloc_r+0xdc>
 80054ac:	2300      	movs	r3, #0
 80054ae:	6053      	str	r3, [r2, #4]
 80054b0:	e7de      	b.n	8005470 <_malloc_r+0xa8>
 80054b2:	230c      	movs	r3, #12
 80054b4:	6033      	str	r3, [r6, #0]
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 f80c 	bl	80054d4 <__malloc_unlock>
 80054bc:	e794      	b.n	80053e8 <_malloc_r+0x20>
 80054be:	6005      	str	r5, [r0, #0]
 80054c0:	e7d6      	b.n	8005470 <_malloc_r+0xa8>
 80054c2:	bf00      	nop
 80054c4:	20008388 	.word	0x20008388

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	@ (80054d0 <__malloc_lock+0x8>)
 80054ca:	f000 b9e2 	b.w	8005892 <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	200084cc 	.word	0x200084cc

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	@ (80054dc <__malloc_unlock+0x8>)
 80054d6:	f000 b9dd 	b.w	8005894 <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	200084cc 	.word	0x200084cc

080054e0 <std>:
 80054e0:	2300      	movs	r3, #0
 80054e2:	b510      	push	{r4, lr}
 80054e4:	4604      	mov	r4, r0
 80054e6:	e9c0 3300 	strd	r3, r3, [r0]
 80054ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80054ee:	6083      	str	r3, [r0, #8]
 80054f0:	8181      	strh	r1, [r0, #12]
 80054f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80054f4:	81c2      	strh	r2, [r0, #14]
 80054f6:	6183      	str	r3, [r0, #24]
 80054f8:	4619      	mov	r1, r3
 80054fa:	2208      	movs	r2, #8
 80054fc:	305c      	adds	r0, #92	@ 0x5c
 80054fe:	f000 f93f 	bl	8005780 <memset>
 8005502:	4b0d      	ldr	r3, [pc, #52]	@ (8005538 <std+0x58>)
 8005504:	6263      	str	r3, [r4, #36]	@ 0x24
 8005506:	4b0d      	ldr	r3, [pc, #52]	@ (800553c <std+0x5c>)
 8005508:	62a3      	str	r3, [r4, #40]	@ 0x28
 800550a:	4b0d      	ldr	r3, [pc, #52]	@ (8005540 <std+0x60>)
 800550c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <std+0x64>)
 8005510:	6323      	str	r3, [r4, #48]	@ 0x30
 8005512:	4b0d      	ldr	r3, [pc, #52]	@ (8005548 <std+0x68>)
 8005514:	6224      	str	r4, [r4, #32]
 8005516:	429c      	cmp	r4, r3
 8005518:	d006      	beq.n	8005528 <std+0x48>
 800551a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800551e:	4294      	cmp	r4, r2
 8005520:	d002      	beq.n	8005528 <std+0x48>
 8005522:	33d0      	adds	r3, #208	@ 0xd0
 8005524:	429c      	cmp	r4, r3
 8005526:	d105      	bne.n	8005534 <std+0x54>
 8005528:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800552c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005530:	f000 b9ae 	b.w	8005890 <__retarget_lock_init_recursive>
 8005534:	bd10      	pop	{r4, pc}
 8005536:	bf00      	nop
 8005538:	08005689 	.word	0x08005689
 800553c:	080056ab 	.word	0x080056ab
 8005540:	080056e3 	.word	0x080056e3
 8005544:	08005707 	.word	0x08005707
 8005548:	2000838c 	.word	0x2000838c

0800554c <stdio_exit_handler>:
 800554c:	4a02      	ldr	r2, [pc, #8]	@ (8005558 <stdio_exit_handler+0xc>)
 800554e:	4903      	ldr	r1, [pc, #12]	@ (800555c <stdio_exit_handler+0x10>)
 8005550:	4803      	ldr	r0, [pc, #12]	@ (8005560 <stdio_exit_handler+0x14>)
 8005552:	f000 b869 	b.w	8005628 <_fwalk_sglue>
 8005556:	bf00      	nop
 8005558:	2000000c 	.word	0x2000000c
 800555c:	080062a1 	.word	0x080062a1
 8005560:	2000001c 	.word	0x2000001c

08005564 <cleanup_stdio>:
 8005564:	6841      	ldr	r1, [r0, #4]
 8005566:	4b0c      	ldr	r3, [pc, #48]	@ (8005598 <cleanup_stdio+0x34>)
 8005568:	4299      	cmp	r1, r3
 800556a:	b510      	push	{r4, lr}
 800556c:	4604      	mov	r4, r0
 800556e:	d001      	beq.n	8005574 <cleanup_stdio+0x10>
 8005570:	f000 fe96 	bl	80062a0 <_fflush_r>
 8005574:	68a1      	ldr	r1, [r4, #8]
 8005576:	4b09      	ldr	r3, [pc, #36]	@ (800559c <cleanup_stdio+0x38>)
 8005578:	4299      	cmp	r1, r3
 800557a:	d002      	beq.n	8005582 <cleanup_stdio+0x1e>
 800557c:	4620      	mov	r0, r4
 800557e:	f000 fe8f 	bl	80062a0 <_fflush_r>
 8005582:	68e1      	ldr	r1, [r4, #12]
 8005584:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <cleanup_stdio+0x3c>)
 8005586:	4299      	cmp	r1, r3
 8005588:	d004      	beq.n	8005594 <cleanup_stdio+0x30>
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005590:	f000 be86 	b.w	80062a0 <_fflush_r>
 8005594:	bd10      	pop	{r4, pc}
 8005596:	bf00      	nop
 8005598:	2000838c 	.word	0x2000838c
 800559c:	200083f4 	.word	0x200083f4
 80055a0:	2000845c 	.word	0x2000845c

080055a4 <global_stdio_init.part.0>:
 80055a4:	b510      	push	{r4, lr}
 80055a6:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <global_stdio_init.part.0+0x30>)
 80055a8:	4c0b      	ldr	r4, [pc, #44]	@ (80055d8 <global_stdio_init.part.0+0x34>)
 80055aa:	4a0c      	ldr	r2, [pc, #48]	@ (80055dc <global_stdio_init.part.0+0x38>)
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	4620      	mov	r0, r4
 80055b0:	2200      	movs	r2, #0
 80055b2:	2104      	movs	r1, #4
 80055b4:	f7ff ff94 	bl	80054e0 <std>
 80055b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055bc:	2201      	movs	r2, #1
 80055be:	2109      	movs	r1, #9
 80055c0:	f7ff ff8e 	bl	80054e0 <std>
 80055c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80055c8:	2202      	movs	r2, #2
 80055ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055ce:	2112      	movs	r1, #18
 80055d0:	f7ff bf86 	b.w	80054e0 <std>
 80055d4:	200084c4 	.word	0x200084c4
 80055d8:	2000838c 	.word	0x2000838c
 80055dc:	0800554d 	.word	0x0800554d

080055e0 <__sfp_lock_acquire>:
 80055e0:	4801      	ldr	r0, [pc, #4]	@ (80055e8 <__sfp_lock_acquire+0x8>)
 80055e2:	f000 b956 	b.w	8005892 <__retarget_lock_acquire_recursive>
 80055e6:	bf00      	nop
 80055e8:	200084cd 	.word	0x200084cd

080055ec <__sfp_lock_release>:
 80055ec:	4801      	ldr	r0, [pc, #4]	@ (80055f4 <__sfp_lock_release+0x8>)
 80055ee:	f000 b951 	b.w	8005894 <__retarget_lock_release_recursive>
 80055f2:	bf00      	nop
 80055f4:	200084cd 	.word	0x200084cd

080055f8 <__sinit>:
 80055f8:	b510      	push	{r4, lr}
 80055fa:	4604      	mov	r4, r0
 80055fc:	f7ff fff0 	bl	80055e0 <__sfp_lock_acquire>
 8005600:	6a23      	ldr	r3, [r4, #32]
 8005602:	b11b      	cbz	r3, 800560c <__sinit+0x14>
 8005604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005608:	f7ff bff0 	b.w	80055ec <__sfp_lock_release>
 800560c:	4b04      	ldr	r3, [pc, #16]	@ (8005620 <__sinit+0x28>)
 800560e:	6223      	str	r3, [r4, #32]
 8005610:	4b04      	ldr	r3, [pc, #16]	@ (8005624 <__sinit+0x2c>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1f5      	bne.n	8005604 <__sinit+0xc>
 8005618:	f7ff ffc4 	bl	80055a4 <global_stdio_init.part.0>
 800561c:	e7f2      	b.n	8005604 <__sinit+0xc>
 800561e:	bf00      	nop
 8005620:	08005565 	.word	0x08005565
 8005624:	200084c4 	.word	0x200084c4

08005628 <_fwalk_sglue>:
 8005628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800562c:	4607      	mov	r7, r0
 800562e:	4688      	mov	r8, r1
 8005630:	4614      	mov	r4, r2
 8005632:	2600      	movs	r6, #0
 8005634:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005638:	f1b9 0901 	subs.w	r9, r9, #1
 800563c:	d505      	bpl.n	800564a <_fwalk_sglue+0x22>
 800563e:	6824      	ldr	r4, [r4, #0]
 8005640:	2c00      	cmp	r4, #0
 8005642:	d1f7      	bne.n	8005634 <_fwalk_sglue+0xc>
 8005644:	4630      	mov	r0, r6
 8005646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d907      	bls.n	8005660 <_fwalk_sglue+0x38>
 8005650:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005654:	3301      	adds	r3, #1
 8005656:	d003      	beq.n	8005660 <_fwalk_sglue+0x38>
 8005658:	4629      	mov	r1, r5
 800565a:	4638      	mov	r0, r7
 800565c:	47c0      	blx	r8
 800565e:	4306      	orrs	r6, r0
 8005660:	3568      	adds	r5, #104	@ 0x68
 8005662:	e7e9      	b.n	8005638 <_fwalk_sglue+0x10>

08005664 <iprintf>:
 8005664:	b40f      	push	{r0, r1, r2, r3}
 8005666:	b507      	push	{r0, r1, r2, lr}
 8005668:	4906      	ldr	r1, [pc, #24]	@ (8005684 <iprintf+0x20>)
 800566a:	ab04      	add	r3, sp, #16
 800566c:	6808      	ldr	r0, [r1, #0]
 800566e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005672:	6881      	ldr	r1, [r0, #8]
 8005674:	9301      	str	r3, [sp, #4]
 8005676:	f000 fae9 	bl	8005c4c <_vfiprintf_r>
 800567a:	b003      	add	sp, #12
 800567c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005680:	b004      	add	sp, #16
 8005682:	4770      	bx	lr
 8005684:	20000018 	.word	0x20000018

08005688 <__sread>:
 8005688:	b510      	push	{r4, lr}
 800568a:	460c      	mov	r4, r1
 800568c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005690:	f000 f8a0 	bl	80057d4 <_read_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	bfab      	itete	ge
 8005698:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800569a:	89a3      	ldrhlt	r3, [r4, #12]
 800569c:	181b      	addge	r3, r3, r0
 800569e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056a2:	bfac      	ite	ge
 80056a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056a6:	81a3      	strhlt	r3, [r4, #12]
 80056a8:	bd10      	pop	{r4, pc}

080056aa <__swrite>:
 80056aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056ae:	461f      	mov	r7, r3
 80056b0:	898b      	ldrh	r3, [r1, #12]
 80056b2:	05db      	lsls	r3, r3, #23
 80056b4:	4605      	mov	r5, r0
 80056b6:	460c      	mov	r4, r1
 80056b8:	4616      	mov	r6, r2
 80056ba:	d505      	bpl.n	80056c8 <__swrite+0x1e>
 80056bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056c0:	2302      	movs	r3, #2
 80056c2:	2200      	movs	r2, #0
 80056c4:	f000 f874 	bl	80057b0 <_lseek_r>
 80056c8:	89a3      	ldrh	r3, [r4, #12]
 80056ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80056ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	4632      	mov	r2, r6
 80056d6:	463b      	mov	r3, r7
 80056d8:	4628      	mov	r0, r5
 80056da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056de:	f000 b89b 	b.w	8005818 <_write_r>

080056e2 <__sseek>:
 80056e2:	b510      	push	{r4, lr}
 80056e4:	460c      	mov	r4, r1
 80056e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056ea:	f000 f861 	bl	80057b0 <_lseek_r>
 80056ee:	1c43      	adds	r3, r0, #1
 80056f0:	89a3      	ldrh	r3, [r4, #12]
 80056f2:	bf15      	itete	ne
 80056f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80056f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80056fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80056fe:	81a3      	strheq	r3, [r4, #12]
 8005700:	bf18      	it	ne
 8005702:	81a3      	strhne	r3, [r4, #12]
 8005704:	bd10      	pop	{r4, pc}

08005706 <__sclose>:
 8005706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800570a:	f000 b841 	b.w	8005790 <_close_r>

0800570e <_vsniprintf_r>:
 800570e:	b530      	push	{r4, r5, lr}
 8005710:	4614      	mov	r4, r2
 8005712:	2c00      	cmp	r4, #0
 8005714:	b09b      	sub	sp, #108	@ 0x6c
 8005716:	4605      	mov	r5, r0
 8005718:	461a      	mov	r2, r3
 800571a:	da05      	bge.n	8005728 <_vsniprintf_r+0x1a>
 800571c:	238b      	movs	r3, #139	@ 0x8b
 800571e:	6003      	str	r3, [r0, #0]
 8005720:	f04f 30ff 	mov.w	r0, #4294967295
 8005724:	b01b      	add	sp, #108	@ 0x6c
 8005726:	bd30      	pop	{r4, r5, pc}
 8005728:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800572c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005730:	bf14      	ite	ne
 8005732:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005736:	4623      	moveq	r3, r4
 8005738:	9302      	str	r3, [sp, #8]
 800573a:	9305      	str	r3, [sp, #20]
 800573c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005740:	9100      	str	r1, [sp, #0]
 8005742:	9104      	str	r1, [sp, #16]
 8005744:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005748:	4669      	mov	r1, sp
 800574a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800574c:	f000 f958 	bl	8005a00 <_svfiprintf_r>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	bfbc      	itt	lt
 8005754:	238b      	movlt	r3, #139	@ 0x8b
 8005756:	602b      	strlt	r3, [r5, #0]
 8005758:	2c00      	cmp	r4, #0
 800575a:	d0e3      	beq.n	8005724 <_vsniprintf_r+0x16>
 800575c:	9b00      	ldr	r3, [sp, #0]
 800575e:	2200      	movs	r2, #0
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	e7df      	b.n	8005724 <_vsniprintf_r+0x16>

08005764 <vsniprintf>:
 8005764:	b507      	push	{r0, r1, r2, lr}
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	4613      	mov	r3, r2
 800576a:	460a      	mov	r2, r1
 800576c:	4601      	mov	r1, r0
 800576e:	4803      	ldr	r0, [pc, #12]	@ (800577c <vsniprintf+0x18>)
 8005770:	6800      	ldr	r0, [r0, #0]
 8005772:	f7ff ffcc 	bl	800570e <_vsniprintf_r>
 8005776:	b003      	add	sp, #12
 8005778:	f85d fb04 	ldr.w	pc, [sp], #4
 800577c:	20000018 	.word	0x20000018

08005780 <memset>:
 8005780:	4402      	add	r2, r0
 8005782:	4603      	mov	r3, r0
 8005784:	4293      	cmp	r3, r2
 8005786:	d100      	bne.n	800578a <memset+0xa>
 8005788:	4770      	bx	lr
 800578a:	f803 1b01 	strb.w	r1, [r3], #1
 800578e:	e7f9      	b.n	8005784 <memset+0x4>

08005790 <_close_r>:
 8005790:	b538      	push	{r3, r4, r5, lr}
 8005792:	4d06      	ldr	r5, [pc, #24]	@ (80057ac <_close_r+0x1c>)
 8005794:	2300      	movs	r3, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	602b      	str	r3, [r5, #0]
 800579c:	f7fc faad 	bl	8001cfa <_close>
 80057a0:	1c43      	adds	r3, r0, #1
 80057a2:	d102      	bne.n	80057aa <_close_r+0x1a>
 80057a4:	682b      	ldr	r3, [r5, #0]
 80057a6:	b103      	cbz	r3, 80057aa <_close_r+0x1a>
 80057a8:	6023      	str	r3, [r4, #0]
 80057aa:	bd38      	pop	{r3, r4, r5, pc}
 80057ac:	200084c8 	.word	0x200084c8

080057b0 <_lseek_r>:
 80057b0:	b538      	push	{r3, r4, r5, lr}
 80057b2:	4d07      	ldr	r5, [pc, #28]	@ (80057d0 <_lseek_r+0x20>)
 80057b4:	4604      	mov	r4, r0
 80057b6:	4608      	mov	r0, r1
 80057b8:	4611      	mov	r1, r2
 80057ba:	2200      	movs	r2, #0
 80057bc:	602a      	str	r2, [r5, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f7fc fac2 	bl	8001d48 <_lseek>
 80057c4:	1c43      	adds	r3, r0, #1
 80057c6:	d102      	bne.n	80057ce <_lseek_r+0x1e>
 80057c8:	682b      	ldr	r3, [r5, #0]
 80057ca:	b103      	cbz	r3, 80057ce <_lseek_r+0x1e>
 80057cc:	6023      	str	r3, [r4, #0]
 80057ce:	bd38      	pop	{r3, r4, r5, pc}
 80057d0:	200084c8 	.word	0x200084c8

080057d4 <_read_r>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	4d07      	ldr	r5, [pc, #28]	@ (80057f4 <_read_r+0x20>)
 80057d8:	4604      	mov	r4, r0
 80057da:	4608      	mov	r0, r1
 80057dc:	4611      	mov	r1, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	602a      	str	r2, [r5, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7fc fa50 	bl	8001c88 <_read>
 80057e8:	1c43      	adds	r3, r0, #1
 80057ea:	d102      	bne.n	80057f2 <_read_r+0x1e>
 80057ec:	682b      	ldr	r3, [r5, #0]
 80057ee:	b103      	cbz	r3, 80057f2 <_read_r+0x1e>
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	bd38      	pop	{r3, r4, r5, pc}
 80057f4:	200084c8 	.word	0x200084c8

080057f8 <_sbrk_r>:
 80057f8:	b538      	push	{r3, r4, r5, lr}
 80057fa:	4d06      	ldr	r5, [pc, #24]	@ (8005814 <_sbrk_r+0x1c>)
 80057fc:	2300      	movs	r3, #0
 80057fe:	4604      	mov	r4, r0
 8005800:	4608      	mov	r0, r1
 8005802:	602b      	str	r3, [r5, #0]
 8005804:	f7fc faae 	bl	8001d64 <_sbrk>
 8005808:	1c43      	adds	r3, r0, #1
 800580a:	d102      	bne.n	8005812 <_sbrk_r+0x1a>
 800580c:	682b      	ldr	r3, [r5, #0]
 800580e:	b103      	cbz	r3, 8005812 <_sbrk_r+0x1a>
 8005810:	6023      	str	r3, [r4, #0]
 8005812:	bd38      	pop	{r3, r4, r5, pc}
 8005814:	200084c8 	.word	0x200084c8

08005818 <_write_r>:
 8005818:	b538      	push	{r3, r4, r5, lr}
 800581a:	4d07      	ldr	r5, [pc, #28]	@ (8005838 <_write_r+0x20>)
 800581c:	4604      	mov	r4, r0
 800581e:	4608      	mov	r0, r1
 8005820:	4611      	mov	r1, r2
 8005822:	2200      	movs	r2, #0
 8005824:	602a      	str	r2, [r5, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f7fc fa4b 	bl	8001cc2 <_write>
 800582c:	1c43      	adds	r3, r0, #1
 800582e:	d102      	bne.n	8005836 <_write_r+0x1e>
 8005830:	682b      	ldr	r3, [r5, #0]
 8005832:	b103      	cbz	r3, 8005836 <_write_r+0x1e>
 8005834:	6023      	str	r3, [r4, #0]
 8005836:	bd38      	pop	{r3, r4, r5, pc}
 8005838:	200084c8 	.word	0x200084c8

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	@ (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000018 	.word	0x20000018

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	@ (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	@ (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	@ (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	@ (800588c <__libc_init_array+0x44>)
 800585c:	f001 fc2e 	bl	80070bc <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	08007570 	.word	0x08007570
 8005884:	08007570 	.word	0x08007570
 8005888:	08007570 	.word	0x08007570
 800588c:	08007574 	.word	0x08007574

08005890 <__retarget_lock_init_recursive>:
 8005890:	4770      	bx	lr

08005892 <__retarget_lock_acquire_recursive>:
 8005892:	4770      	bx	lr

08005894 <__retarget_lock_release_recursive>:
 8005894:	4770      	bx	lr

08005896 <memcpy>:
 8005896:	440a      	add	r2, r1
 8005898:	4291      	cmp	r1, r2
 800589a:	f100 33ff 	add.w	r3, r0, #4294967295
 800589e:	d100      	bne.n	80058a2 <memcpy+0xc>
 80058a0:	4770      	bx	lr
 80058a2:	b510      	push	{r4, lr}
 80058a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058ac:	4291      	cmp	r1, r2
 80058ae:	d1f9      	bne.n	80058a4 <memcpy+0xe>
 80058b0:	bd10      	pop	{r4, pc}
	...

080058b4 <_free_r>:
 80058b4:	b538      	push	{r3, r4, r5, lr}
 80058b6:	4605      	mov	r5, r0
 80058b8:	2900      	cmp	r1, #0
 80058ba:	d041      	beq.n	8005940 <_free_r+0x8c>
 80058bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c0:	1f0c      	subs	r4, r1, #4
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bfb8      	it	lt
 80058c6:	18e4      	addlt	r4, r4, r3
 80058c8:	f7ff fdfe 	bl	80054c8 <__malloc_lock>
 80058cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005944 <_free_r+0x90>)
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x2c>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	4628      	mov	r0, r5
 80058d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058dc:	f7ff bdfa 	b.w	80054d4 <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x42>
 80058e4:	6820      	ldr	r0, [r4, #0]
 80058e6:	1821      	adds	r1, r4, r0
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1809      	addeq	r1, r1, r0
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x1e>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x4c>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x42>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1850      	adds	r0, r2, r1
 8005904:	42a0      	cmp	r0, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x6c>
 8005908:	6820      	ldr	r0, [r4, #0]
 800590a:	4401      	add	r1, r0
 800590c:	1850      	adds	r0, r2, r1
 800590e:	4283      	cmp	r3, r0
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x22>
 8005914:	6818      	ldr	r0, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	4408      	add	r0, r1
 800591c:	6010      	str	r0, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x22>
 8005920:	d902      	bls.n	8005928 <_free_r+0x74>
 8005922:	230c      	movs	r3, #12
 8005924:	602b      	str	r3, [r5, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x22>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	1821      	adds	r1, r4, r0
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1809      	addeq	r1, r1, r0
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x22>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	bf00      	nop
 8005944:	20008388 	.word	0x20008388

08005948 <__ssputs_r>:
 8005948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800594c:	688e      	ldr	r6, [r1, #8]
 800594e:	461f      	mov	r7, r3
 8005950:	42be      	cmp	r6, r7
 8005952:	680b      	ldr	r3, [r1, #0]
 8005954:	4682      	mov	sl, r0
 8005956:	460c      	mov	r4, r1
 8005958:	4690      	mov	r8, r2
 800595a:	d82d      	bhi.n	80059b8 <__ssputs_r+0x70>
 800595c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005960:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005964:	d026      	beq.n	80059b4 <__ssputs_r+0x6c>
 8005966:	6965      	ldr	r5, [r4, #20]
 8005968:	6909      	ldr	r1, [r1, #16]
 800596a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800596e:	eba3 0901 	sub.w	r9, r3, r1
 8005972:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005976:	1c7b      	adds	r3, r7, #1
 8005978:	444b      	add	r3, r9
 800597a:	106d      	asrs	r5, r5, #1
 800597c:	429d      	cmp	r5, r3
 800597e:	bf38      	it	cc
 8005980:	461d      	movcc	r5, r3
 8005982:	0553      	lsls	r3, r2, #21
 8005984:	d527      	bpl.n	80059d6 <__ssputs_r+0x8e>
 8005986:	4629      	mov	r1, r5
 8005988:	f7ff fd1e 	bl	80053c8 <_malloc_r>
 800598c:	4606      	mov	r6, r0
 800598e:	b360      	cbz	r0, 80059ea <__ssputs_r+0xa2>
 8005990:	6921      	ldr	r1, [r4, #16]
 8005992:	464a      	mov	r2, r9
 8005994:	f7ff ff7f 	bl	8005896 <memcpy>
 8005998:	89a3      	ldrh	r3, [r4, #12]
 800599a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800599e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059a2:	81a3      	strh	r3, [r4, #12]
 80059a4:	6126      	str	r6, [r4, #16]
 80059a6:	6165      	str	r5, [r4, #20]
 80059a8:	444e      	add	r6, r9
 80059aa:	eba5 0509 	sub.w	r5, r5, r9
 80059ae:	6026      	str	r6, [r4, #0]
 80059b0:	60a5      	str	r5, [r4, #8]
 80059b2:	463e      	mov	r6, r7
 80059b4:	42be      	cmp	r6, r7
 80059b6:	d900      	bls.n	80059ba <__ssputs_r+0x72>
 80059b8:	463e      	mov	r6, r7
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	4632      	mov	r2, r6
 80059be:	4641      	mov	r1, r8
 80059c0:	f000 fd2a 	bl	8006418 <memmove>
 80059c4:	68a3      	ldr	r3, [r4, #8]
 80059c6:	1b9b      	subs	r3, r3, r6
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	6823      	ldr	r3, [r4, #0]
 80059cc:	4433      	add	r3, r6
 80059ce:	6023      	str	r3, [r4, #0]
 80059d0:	2000      	movs	r0, #0
 80059d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059d6:	462a      	mov	r2, r5
 80059d8:	f000 fd38 	bl	800644c <_realloc_r>
 80059dc:	4606      	mov	r6, r0
 80059de:	2800      	cmp	r0, #0
 80059e0:	d1e0      	bne.n	80059a4 <__ssputs_r+0x5c>
 80059e2:	6921      	ldr	r1, [r4, #16]
 80059e4:	4650      	mov	r0, sl
 80059e6:	f7ff ff65 	bl	80058b4 <_free_r>
 80059ea:	230c      	movs	r3, #12
 80059ec:	f8ca 3000 	str.w	r3, [sl]
 80059f0:	89a3      	ldrh	r3, [r4, #12]
 80059f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059f6:	81a3      	strh	r3, [r4, #12]
 80059f8:	f04f 30ff 	mov.w	r0, #4294967295
 80059fc:	e7e9      	b.n	80059d2 <__ssputs_r+0x8a>
	...

08005a00 <_svfiprintf_r>:
 8005a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a04:	4698      	mov	r8, r3
 8005a06:	898b      	ldrh	r3, [r1, #12]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	b09d      	sub	sp, #116	@ 0x74
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	460d      	mov	r5, r1
 8005a10:	4614      	mov	r4, r2
 8005a12:	d510      	bpl.n	8005a36 <_svfiprintf_r+0x36>
 8005a14:	690b      	ldr	r3, [r1, #16]
 8005a16:	b973      	cbnz	r3, 8005a36 <_svfiprintf_r+0x36>
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	f7ff fcd5 	bl	80053c8 <_malloc_r>
 8005a1e:	6028      	str	r0, [r5, #0]
 8005a20:	6128      	str	r0, [r5, #16]
 8005a22:	b930      	cbnz	r0, 8005a32 <_svfiprintf_r+0x32>
 8005a24:	230c      	movs	r3, #12
 8005a26:	603b      	str	r3, [r7, #0]
 8005a28:	f04f 30ff 	mov.w	r0, #4294967295
 8005a2c:	b01d      	add	sp, #116	@ 0x74
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	2340      	movs	r3, #64	@ 0x40
 8005a34:	616b      	str	r3, [r5, #20]
 8005a36:	2300      	movs	r3, #0
 8005a38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a3a:	2320      	movs	r3, #32
 8005a3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a44:	2330      	movs	r3, #48	@ 0x30
 8005a46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005be4 <_svfiprintf_r+0x1e4>
 8005a4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005a4e:	f04f 0901 	mov.w	r9, #1
 8005a52:	4623      	mov	r3, r4
 8005a54:	469a      	mov	sl, r3
 8005a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a5a:	b10a      	cbz	r2, 8005a60 <_svfiprintf_r+0x60>
 8005a5c:	2a25      	cmp	r2, #37	@ 0x25
 8005a5e:	d1f9      	bne.n	8005a54 <_svfiprintf_r+0x54>
 8005a60:	ebba 0b04 	subs.w	fp, sl, r4
 8005a64:	d00b      	beq.n	8005a7e <_svfiprintf_r+0x7e>
 8005a66:	465b      	mov	r3, fp
 8005a68:	4622      	mov	r2, r4
 8005a6a:	4629      	mov	r1, r5
 8005a6c:	4638      	mov	r0, r7
 8005a6e:	f7ff ff6b 	bl	8005948 <__ssputs_r>
 8005a72:	3001      	adds	r0, #1
 8005a74:	f000 80a7 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a7a:	445a      	add	r2, fp
 8005a7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 809f 	beq.w	8005bc6 <_svfiprintf_r+0x1c6>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a92:	f10a 0a01 	add.w	sl, sl, #1
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005aa0:	4654      	mov	r4, sl
 8005aa2:	2205      	movs	r2, #5
 8005aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa8:	484e      	ldr	r0, [pc, #312]	@ (8005be4 <_svfiprintf_r+0x1e4>)
 8005aaa:	f7fa fbb9 	bl	8000220 <memchr>
 8005aae:	9a04      	ldr	r2, [sp, #16]
 8005ab0:	b9d8      	cbnz	r0, 8005aea <_svfiprintf_r+0xea>
 8005ab2:	06d0      	lsls	r0, r2, #27
 8005ab4:	bf44      	itt	mi
 8005ab6:	2320      	movmi	r3, #32
 8005ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005abc:	0711      	lsls	r1, r2, #28
 8005abe:	bf44      	itt	mi
 8005ac0:	232b      	movmi	r3, #43	@ 0x2b
 8005ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8005aca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005acc:	d015      	beq.n	8005afa <_svfiprintf_r+0xfa>
 8005ace:	9a07      	ldr	r2, [sp, #28]
 8005ad0:	4654      	mov	r4, sl
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f04f 0c0a 	mov.w	ip, #10
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ade:	3b30      	subs	r3, #48	@ 0x30
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	d94b      	bls.n	8005b7c <_svfiprintf_r+0x17c>
 8005ae4:	b1b0      	cbz	r0, 8005b14 <_svfiprintf_r+0x114>
 8005ae6:	9207      	str	r2, [sp, #28]
 8005ae8:	e014      	b.n	8005b14 <_svfiprintf_r+0x114>
 8005aea:	eba0 0308 	sub.w	r3, r0, r8
 8005aee:	fa09 f303 	lsl.w	r3, r9, r3
 8005af2:	4313      	orrs	r3, r2
 8005af4:	9304      	str	r3, [sp, #16]
 8005af6:	46a2      	mov	sl, r4
 8005af8:	e7d2      	b.n	8005aa0 <_svfiprintf_r+0xa0>
 8005afa:	9b03      	ldr	r3, [sp, #12]
 8005afc:	1d19      	adds	r1, r3, #4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	9103      	str	r1, [sp, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	bfbb      	ittet	lt
 8005b06:	425b      	neglt	r3, r3
 8005b08:	f042 0202 	orrlt.w	r2, r2, #2
 8005b0c:	9307      	strge	r3, [sp, #28]
 8005b0e:	9307      	strlt	r3, [sp, #28]
 8005b10:	bfb8      	it	lt
 8005b12:	9204      	strlt	r2, [sp, #16]
 8005b14:	7823      	ldrb	r3, [r4, #0]
 8005b16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b18:	d10a      	bne.n	8005b30 <_svfiprintf_r+0x130>
 8005b1a:	7863      	ldrb	r3, [r4, #1]
 8005b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b1e:	d132      	bne.n	8005b86 <_svfiprintf_r+0x186>
 8005b20:	9b03      	ldr	r3, [sp, #12]
 8005b22:	1d1a      	adds	r2, r3, #4
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	9203      	str	r2, [sp, #12]
 8005b28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005b2c:	3402      	adds	r4, #2
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005bf4 <_svfiprintf_r+0x1f4>
 8005b34:	7821      	ldrb	r1, [r4, #0]
 8005b36:	2203      	movs	r2, #3
 8005b38:	4650      	mov	r0, sl
 8005b3a:	f7fa fb71 	bl	8000220 <memchr>
 8005b3e:	b138      	cbz	r0, 8005b50 <_svfiprintf_r+0x150>
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	eba0 000a 	sub.w	r0, r0, sl
 8005b46:	2240      	movs	r2, #64	@ 0x40
 8005b48:	4082      	lsls	r2, r0
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	3401      	adds	r4, #1
 8005b4e:	9304      	str	r3, [sp, #16]
 8005b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b54:	4824      	ldr	r0, [pc, #144]	@ (8005be8 <_svfiprintf_r+0x1e8>)
 8005b56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005b5a:	2206      	movs	r2, #6
 8005b5c:	f7fa fb60 	bl	8000220 <memchr>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	d036      	beq.n	8005bd2 <_svfiprintf_r+0x1d2>
 8005b64:	4b21      	ldr	r3, [pc, #132]	@ (8005bec <_svfiprintf_r+0x1ec>)
 8005b66:	bb1b      	cbnz	r3, 8005bb0 <_svfiprintf_r+0x1b0>
 8005b68:	9b03      	ldr	r3, [sp, #12]
 8005b6a:	3307      	adds	r3, #7
 8005b6c:	f023 0307 	bic.w	r3, r3, #7
 8005b70:	3308      	adds	r3, #8
 8005b72:	9303      	str	r3, [sp, #12]
 8005b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b76:	4433      	add	r3, r6
 8005b78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7a:	e76a      	b.n	8005a52 <_svfiprintf_r+0x52>
 8005b7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b80:	460c      	mov	r4, r1
 8005b82:	2001      	movs	r0, #1
 8005b84:	e7a8      	b.n	8005ad8 <_svfiprintf_r+0xd8>
 8005b86:	2300      	movs	r3, #0
 8005b88:	3401      	adds	r4, #1
 8005b8a:	9305      	str	r3, [sp, #20]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	f04f 0c0a 	mov.w	ip, #10
 8005b92:	4620      	mov	r0, r4
 8005b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b98:	3a30      	subs	r2, #48	@ 0x30
 8005b9a:	2a09      	cmp	r2, #9
 8005b9c:	d903      	bls.n	8005ba6 <_svfiprintf_r+0x1a6>
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0c6      	beq.n	8005b30 <_svfiprintf_r+0x130>
 8005ba2:	9105      	str	r1, [sp, #20]
 8005ba4:	e7c4      	b.n	8005b30 <_svfiprintf_r+0x130>
 8005ba6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005baa:	4604      	mov	r4, r0
 8005bac:	2301      	movs	r3, #1
 8005bae:	e7f0      	b.n	8005b92 <_svfiprintf_r+0x192>
 8005bb0:	ab03      	add	r3, sp, #12
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	462a      	mov	r2, r5
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005bf0 <_svfiprintf_r+0x1f0>)
 8005bb8:	a904      	add	r1, sp, #16
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f3af 8000 	nop.w
 8005bc0:	1c42      	adds	r2, r0, #1
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	d1d6      	bne.n	8005b74 <_svfiprintf_r+0x174>
 8005bc6:	89ab      	ldrh	r3, [r5, #12]
 8005bc8:	065b      	lsls	r3, r3, #25
 8005bca:	f53f af2d 	bmi.w	8005a28 <_svfiprintf_r+0x28>
 8005bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005bd0:	e72c      	b.n	8005a2c <_svfiprintf_r+0x2c>
 8005bd2:	ab03      	add	r3, sp, #12
 8005bd4:	9300      	str	r3, [sp, #0]
 8005bd6:	462a      	mov	r2, r5
 8005bd8:	4b05      	ldr	r3, [pc, #20]	@ (8005bf0 <_svfiprintf_r+0x1f0>)
 8005bda:	a904      	add	r1, sp, #16
 8005bdc:	4638      	mov	r0, r7
 8005bde:	f000 f9bb 	bl	8005f58 <_printf_i>
 8005be2:	e7ed      	b.n	8005bc0 <_svfiprintf_r+0x1c0>
 8005be4:	08007164 	.word	0x08007164
 8005be8:	0800716e 	.word	0x0800716e
 8005bec:	00000000 	.word	0x00000000
 8005bf0:	08005949 	.word	0x08005949
 8005bf4:	0800716a 	.word	0x0800716a

08005bf8 <__sfputc_r>:
 8005bf8:	6893      	ldr	r3, [r2, #8]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	b410      	push	{r4}
 8005c00:	6093      	str	r3, [r2, #8]
 8005c02:	da08      	bge.n	8005c16 <__sfputc_r+0x1e>
 8005c04:	6994      	ldr	r4, [r2, #24]
 8005c06:	42a3      	cmp	r3, r4
 8005c08:	db01      	blt.n	8005c0e <__sfputc_r+0x16>
 8005c0a:	290a      	cmp	r1, #10
 8005c0c:	d103      	bne.n	8005c16 <__sfputc_r+0x1e>
 8005c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c12:	f000 bb6d 	b.w	80062f0 <__swbuf_r>
 8005c16:	6813      	ldr	r3, [r2, #0]
 8005c18:	1c58      	adds	r0, r3, #1
 8005c1a:	6010      	str	r0, [r2, #0]
 8005c1c:	7019      	strb	r1, [r3, #0]
 8005c1e:	4608      	mov	r0, r1
 8005c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <__sfputs_r>:
 8005c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c28:	4606      	mov	r6, r0
 8005c2a:	460f      	mov	r7, r1
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	18d5      	adds	r5, r2, r3
 8005c30:	42ac      	cmp	r4, r5
 8005c32:	d101      	bne.n	8005c38 <__sfputs_r+0x12>
 8005c34:	2000      	movs	r0, #0
 8005c36:	e007      	b.n	8005c48 <__sfputs_r+0x22>
 8005c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c3c:	463a      	mov	r2, r7
 8005c3e:	4630      	mov	r0, r6
 8005c40:	f7ff ffda 	bl	8005bf8 <__sfputc_r>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d1f3      	bne.n	8005c30 <__sfputs_r+0xa>
 8005c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c4c <_vfiprintf_r>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	460d      	mov	r5, r1
 8005c52:	b09d      	sub	sp, #116	@ 0x74
 8005c54:	4614      	mov	r4, r2
 8005c56:	4698      	mov	r8, r3
 8005c58:	4606      	mov	r6, r0
 8005c5a:	b118      	cbz	r0, 8005c64 <_vfiprintf_r+0x18>
 8005c5c:	6a03      	ldr	r3, [r0, #32]
 8005c5e:	b90b      	cbnz	r3, 8005c64 <_vfiprintf_r+0x18>
 8005c60:	f7ff fcca 	bl	80055f8 <__sinit>
 8005c64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c66:	07d9      	lsls	r1, r3, #31
 8005c68:	d405      	bmi.n	8005c76 <_vfiprintf_r+0x2a>
 8005c6a:	89ab      	ldrh	r3, [r5, #12]
 8005c6c:	059a      	lsls	r2, r3, #22
 8005c6e:	d402      	bmi.n	8005c76 <_vfiprintf_r+0x2a>
 8005c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c72:	f7ff fe0e 	bl	8005892 <__retarget_lock_acquire_recursive>
 8005c76:	89ab      	ldrh	r3, [r5, #12]
 8005c78:	071b      	lsls	r3, r3, #28
 8005c7a:	d501      	bpl.n	8005c80 <_vfiprintf_r+0x34>
 8005c7c:	692b      	ldr	r3, [r5, #16]
 8005c7e:	b99b      	cbnz	r3, 8005ca8 <_vfiprintf_r+0x5c>
 8005c80:	4629      	mov	r1, r5
 8005c82:	4630      	mov	r0, r6
 8005c84:	f000 fb72 	bl	800636c <__swsetup_r>
 8005c88:	b170      	cbz	r0, 8005ca8 <_vfiprintf_r+0x5c>
 8005c8a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c8c:	07dc      	lsls	r4, r3, #31
 8005c8e:	d504      	bpl.n	8005c9a <_vfiprintf_r+0x4e>
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	b01d      	add	sp, #116	@ 0x74
 8005c96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c9a:	89ab      	ldrh	r3, [r5, #12]
 8005c9c:	0598      	lsls	r0, r3, #22
 8005c9e:	d4f7      	bmi.n	8005c90 <_vfiprintf_r+0x44>
 8005ca0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ca2:	f7ff fdf7 	bl	8005894 <__retarget_lock_release_recursive>
 8005ca6:	e7f3      	b.n	8005c90 <_vfiprintf_r+0x44>
 8005ca8:	2300      	movs	r3, #0
 8005caa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cac:	2320      	movs	r3, #32
 8005cae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005cb2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005cb6:	2330      	movs	r3, #48	@ 0x30
 8005cb8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e68 <_vfiprintf_r+0x21c>
 8005cbc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cc0:	f04f 0901 	mov.w	r9, #1
 8005cc4:	4623      	mov	r3, r4
 8005cc6:	469a      	mov	sl, r3
 8005cc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ccc:	b10a      	cbz	r2, 8005cd2 <_vfiprintf_r+0x86>
 8005cce:	2a25      	cmp	r2, #37	@ 0x25
 8005cd0:	d1f9      	bne.n	8005cc6 <_vfiprintf_r+0x7a>
 8005cd2:	ebba 0b04 	subs.w	fp, sl, r4
 8005cd6:	d00b      	beq.n	8005cf0 <_vfiprintf_r+0xa4>
 8005cd8:	465b      	mov	r3, fp
 8005cda:	4622      	mov	r2, r4
 8005cdc:	4629      	mov	r1, r5
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ffa1 	bl	8005c26 <__sfputs_r>
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f000 80a7 	beq.w	8005e38 <_vfiprintf_r+0x1ec>
 8005cea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cec:	445a      	add	r2, fp
 8005cee:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cf0:	f89a 3000 	ldrb.w	r3, [sl]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 809f 	beq.w	8005e38 <_vfiprintf_r+0x1ec>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d04:	f10a 0a01 	add.w	sl, sl, #1
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d10:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d12:	4654      	mov	r4, sl
 8005d14:	2205      	movs	r2, #5
 8005d16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1a:	4853      	ldr	r0, [pc, #332]	@ (8005e68 <_vfiprintf_r+0x21c>)
 8005d1c:	f7fa fa80 	bl	8000220 <memchr>
 8005d20:	9a04      	ldr	r2, [sp, #16]
 8005d22:	b9d8      	cbnz	r0, 8005d5c <_vfiprintf_r+0x110>
 8005d24:	06d1      	lsls	r1, r2, #27
 8005d26:	bf44      	itt	mi
 8005d28:	2320      	movmi	r3, #32
 8005d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d2e:	0713      	lsls	r3, r2, #28
 8005d30:	bf44      	itt	mi
 8005d32:	232b      	movmi	r3, #43	@ 0x2b
 8005d34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d38:	f89a 3000 	ldrb.w	r3, [sl]
 8005d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d3e:	d015      	beq.n	8005d6c <_vfiprintf_r+0x120>
 8005d40:	9a07      	ldr	r2, [sp, #28]
 8005d42:	4654      	mov	r4, sl
 8005d44:	2000      	movs	r0, #0
 8005d46:	f04f 0c0a 	mov.w	ip, #10
 8005d4a:	4621      	mov	r1, r4
 8005d4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d50:	3b30      	subs	r3, #48	@ 0x30
 8005d52:	2b09      	cmp	r3, #9
 8005d54:	d94b      	bls.n	8005dee <_vfiprintf_r+0x1a2>
 8005d56:	b1b0      	cbz	r0, 8005d86 <_vfiprintf_r+0x13a>
 8005d58:	9207      	str	r2, [sp, #28]
 8005d5a:	e014      	b.n	8005d86 <_vfiprintf_r+0x13a>
 8005d5c:	eba0 0308 	sub.w	r3, r0, r8
 8005d60:	fa09 f303 	lsl.w	r3, r9, r3
 8005d64:	4313      	orrs	r3, r2
 8005d66:	9304      	str	r3, [sp, #16]
 8005d68:	46a2      	mov	sl, r4
 8005d6a:	e7d2      	b.n	8005d12 <_vfiprintf_r+0xc6>
 8005d6c:	9b03      	ldr	r3, [sp, #12]
 8005d6e:	1d19      	adds	r1, r3, #4
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	9103      	str	r1, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	bfbb      	ittet	lt
 8005d78:	425b      	neglt	r3, r3
 8005d7a:	f042 0202 	orrlt.w	r2, r2, #2
 8005d7e:	9307      	strge	r3, [sp, #28]
 8005d80:	9307      	strlt	r3, [sp, #28]
 8005d82:	bfb8      	it	lt
 8005d84:	9204      	strlt	r2, [sp, #16]
 8005d86:	7823      	ldrb	r3, [r4, #0]
 8005d88:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d8a:	d10a      	bne.n	8005da2 <_vfiprintf_r+0x156>
 8005d8c:	7863      	ldrb	r3, [r4, #1]
 8005d8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d90:	d132      	bne.n	8005df8 <_vfiprintf_r+0x1ac>
 8005d92:	9b03      	ldr	r3, [sp, #12]
 8005d94:	1d1a      	adds	r2, r3, #4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	9203      	str	r2, [sp, #12]
 8005d9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d9e:	3402      	adds	r4, #2
 8005da0:	9305      	str	r3, [sp, #20]
 8005da2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e78 <_vfiprintf_r+0x22c>
 8005da6:	7821      	ldrb	r1, [r4, #0]
 8005da8:	2203      	movs	r2, #3
 8005daa:	4650      	mov	r0, sl
 8005dac:	f7fa fa38 	bl	8000220 <memchr>
 8005db0:	b138      	cbz	r0, 8005dc2 <_vfiprintf_r+0x176>
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	eba0 000a 	sub.w	r0, r0, sl
 8005db8:	2240      	movs	r2, #64	@ 0x40
 8005dba:	4082      	lsls	r2, r0
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	3401      	adds	r4, #1
 8005dc0:	9304      	str	r3, [sp, #16]
 8005dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dc6:	4829      	ldr	r0, [pc, #164]	@ (8005e6c <_vfiprintf_r+0x220>)
 8005dc8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dcc:	2206      	movs	r2, #6
 8005dce:	f7fa fa27 	bl	8000220 <memchr>
 8005dd2:	2800      	cmp	r0, #0
 8005dd4:	d03f      	beq.n	8005e56 <_vfiprintf_r+0x20a>
 8005dd6:	4b26      	ldr	r3, [pc, #152]	@ (8005e70 <_vfiprintf_r+0x224>)
 8005dd8:	bb1b      	cbnz	r3, 8005e22 <_vfiprintf_r+0x1d6>
 8005dda:	9b03      	ldr	r3, [sp, #12]
 8005ddc:	3307      	adds	r3, #7
 8005dde:	f023 0307 	bic.w	r3, r3, #7
 8005de2:	3308      	adds	r3, #8
 8005de4:	9303      	str	r3, [sp, #12]
 8005de6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005de8:	443b      	add	r3, r7
 8005dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dec:	e76a      	b.n	8005cc4 <_vfiprintf_r+0x78>
 8005dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8005df2:	460c      	mov	r4, r1
 8005df4:	2001      	movs	r0, #1
 8005df6:	e7a8      	b.n	8005d4a <_vfiprintf_r+0xfe>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	3401      	adds	r4, #1
 8005dfc:	9305      	str	r3, [sp, #20]
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f04f 0c0a 	mov.w	ip, #10
 8005e04:	4620      	mov	r0, r4
 8005e06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e0a:	3a30      	subs	r2, #48	@ 0x30
 8005e0c:	2a09      	cmp	r2, #9
 8005e0e:	d903      	bls.n	8005e18 <_vfiprintf_r+0x1cc>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d0c6      	beq.n	8005da2 <_vfiprintf_r+0x156>
 8005e14:	9105      	str	r1, [sp, #20]
 8005e16:	e7c4      	b.n	8005da2 <_vfiprintf_r+0x156>
 8005e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e1c:	4604      	mov	r4, r0
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e7f0      	b.n	8005e04 <_vfiprintf_r+0x1b8>
 8005e22:	ab03      	add	r3, sp, #12
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	462a      	mov	r2, r5
 8005e28:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <_vfiprintf_r+0x228>)
 8005e2a:	a904      	add	r1, sp, #16
 8005e2c:	4630      	mov	r0, r6
 8005e2e:	f3af 8000 	nop.w
 8005e32:	4607      	mov	r7, r0
 8005e34:	1c78      	adds	r0, r7, #1
 8005e36:	d1d6      	bne.n	8005de6 <_vfiprintf_r+0x19a>
 8005e38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e3a:	07d9      	lsls	r1, r3, #31
 8005e3c:	d405      	bmi.n	8005e4a <_vfiprintf_r+0x1fe>
 8005e3e:	89ab      	ldrh	r3, [r5, #12]
 8005e40:	059a      	lsls	r2, r3, #22
 8005e42:	d402      	bmi.n	8005e4a <_vfiprintf_r+0x1fe>
 8005e44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e46:	f7ff fd25 	bl	8005894 <__retarget_lock_release_recursive>
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	065b      	lsls	r3, r3, #25
 8005e4e:	f53f af1f 	bmi.w	8005c90 <_vfiprintf_r+0x44>
 8005e52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e54:	e71e      	b.n	8005c94 <_vfiprintf_r+0x48>
 8005e56:	ab03      	add	r3, sp, #12
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	462a      	mov	r2, r5
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <_vfiprintf_r+0x228>)
 8005e5e:	a904      	add	r1, sp, #16
 8005e60:	4630      	mov	r0, r6
 8005e62:	f000 f879 	bl	8005f58 <_printf_i>
 8005e66:	e7e4      	b.n	8005e32 <_vfiprintf_r+0x1e6>
 8005e68:	08007164 	.word	0x08007164
 8005e6c:	0800716e 	.word	0x0800716e
 8005e70:	00000000 	.word	0x00000000
 8005e74:	08005c27 	.word	0x08005c27
 8005e78:	0800716a 	.word	0x0800716a

08005e7c <_printf_common>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	4616      	mov	r6, r2
 8005e82:	4698      	mov	r8, r3
 8005e84:	688a      	ldr	r2, [r1, #8]
 8005e86:	690b      	ldr	r3, [r1, #16]
 8005e88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	bfb8      	it	lt
 8005e90:	4613      	movlt	r3, r2
 8005e92:	6033      	str	r3, [r6, #0]
 8005e94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005e98:	4607      	mov	r7, r0
 8005e9a:	460c      	mov	r4, r1
 8005e9c:	b10a      	cbz	r2, 8005ea2 <_printf_common+0x26>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	6033      	str	r3, [r6, #0]
 8005ea2:	6823      	ldr	r3, [r4, #0]
 8005ea4:	0699      	lsls	r1, r3, #26
 8005ea6:	bf42      	ittt	mi
 8005ea8:	6833      	ldrmi	r3, [r6, #0]
 8005eaa:	3302      	addmi	r3, #2
 8005eac:	6033      	strmi	r3, [r6, #0]
 8005eae:	6825      	ldr	r5, [r4, #0]
 8005eb0:	f015 0506 	ands.w	r5, r5, #6
 8005eb4:	d106      	bne.n	8005ec4 <_printf_common+0x48>
 8005eb6:	f104 0a19 	add.w	sl, r4, #25
 8005eba:	68e3      	ldr	r3, [r4, #12]
 8005ebc:	6832      	ldr	r2, [r6, #0]
 8005ebe:	1a9b      	subs	r3, r3, r2
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dc26      	bgt.n	8005f12 <_printf_common+0x96>
 8005ec4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ec8:	6822      	ldr	r2, [r4, #0]
 8005eca:	3b00      	subs	r3, #0
 8005ecc:	bf18      	it	ne
 8005ece:	2301      	movne	r3, #1
 8005ed0:	0692      	lsls	r2, r2, #26
 8005ed2:	d42b      	bmi.n	8005f2c <_printf_common+0xb0>
 8005ed4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ed8:	4641      	mov	r1, r8
 8005eda:	4638      	mov	r0, r7
 8005edc:	47c8      	blx	r9
 8005ede:	3001      	adds	r0, #1
 8005ee0:	d01e      	beq.n	8005f20 <_printf_common+0xa4>
 8005ee2:	6823      	ldr	r3, [r4, #0]
 8005ee4:	6922      	ldr	r2, [r4, #16]
 8005ee6:	f003 0306 	and.w	r3, r3, #6
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	bf02      	ittt	eq
 8005eee:	68e5      	ldreq	r5, [r4, #12]
 8005ef0:	6833      	ldreq	r3, [r6, #0]
 8005ef2:	1aed      	subeq	r5, r5, r3
 8005ef4:	68a3      	ldr	r3, [r4, #8]
 8005ef6:	bf0c      	ite	eq
 8005ef8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005efc:	2500      	movne	r5, #0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	bfc4      	itt	gt
 8005f02:	1a9b      	subgt	r3, r3, r2
 8005f04:	18ed      	addgt	r5, r5, r3
 8005f06:	2600      	movs	r6, #0
 8005f08:	341a      	adds	r4, #26
 8005f0a:	42b5      	cmp	r5, r6
 8005f0c:	d11a      	bne.n	8005f44 <_printf_common+0xc8>
 8005f0e:	2000      	movs	r0, #0
 8005f10:	e008      	b.n	8005f24 <_printf_common+0xa8>
 8005f12:	2301      	movs	r3, #1
 8005f14:	4652      	mov	r2, sl
 8005f16:	4641      	mov	r1, r8
 8005f18:	4638      	mov	r0, r7
 8005f1a:	47c8      	blx	r9
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d103      	bne.n	8005f28 <_printf_common+0xac>
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f28:	3501      	adds	r5, #1
 8005f2a:	e7c6      	b.n	8005eba <_printf_common+0x3e>
 8005f2c:	18e1      	adds	r1, r4, r3
 8005f2e:	1c5a      	adds	r2, r3, #1
 8005f30:	2030      	movs	r0, #48	@ 0x30
 8005f32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f36:	4422      	add	r2, r4
 8005f38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f40:	3302      	adds	r3, #2
 8005f42:	e7c7      	b.n	8005ed4 <_printf_common+0x58>
 8005f44:	2301      	movs	r3, #1
 8005f46:	4622      	mov	r2, r4
 8005f48:	4641      	mov	r1, r8
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	47c8      	blx	r9
 8005f4e:	3001      	adds	r0, #1
 8005f50:	d0e6      	beq.n	8005f20 <_printf_common+0xa4>
 8005f52:	3601      	adds	r6, #1
 8005f54:	e7d9      	b.n	8005f0a <_printf_common+0x8e>
	...

08005f58 <_printf_i>:
 8005f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f5c:	7e0f      	ldrb	r7, [r1, #24]
 8005f5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f60:	2f78      	cmp	r7, #120	@ 0x78
 8005f62:	4691      	mov	r9, r2
 8005f64:	4680      	mov	r8, r0
 8005f66:	460c      	mov	r4, r1
 8005f68:	469a      	mov	sl, r3
 8005f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f6e:	d807      	bhi.n	8005f80 <_printf_i+0x28>
 8005f70:	2f62      	cmp	r7, #98	@ 0x62
 8005f72:	d80a      	bhi.n	8005f8a <_printf_i+0x32>
 8005f74:	2f00      	cmp	r7, #0
 8005f76:	f000 80d2 	beq.w	800611e <_printf_i+0x1c6>
 8005f7a:	2f58      	cmp	r7, #88	@ 0x58
 8005f7c:	f000 80b9 	beq.w	80060f2 <_printf_i+0x19a>
 8005f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005f88:	e03a      	b.n	8006000 <_printf_i+0xa8>
 8005f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005f8e:	2b15      	cmp	r3, #21
 8005f90:	d8f6      	bhi.n	8005f80 <_printf_i+0x28>
 8005f92:	a101      	add	r1, pc, #4	@ (adr r1, 8005f98 <_printf_i+0x40>)
 8005f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f98:	08005ff1 	.word	0x08005ff1
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08005f81 	.word	0x08005f81
 8005fa4:	08005f81 	.word	0x08005f81
 8005fa8:	08005f81 	.word	0x08005f81
 8005fac:	08005f81 	.word	0x08005f81
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005f81 	.word	0x08005f81
 8005fb8:	08005f81 	.word	0x08005f81
 8005fbc:	08005f81 	.word	0x08005f81
 8005fc0:	08005f81 	.word	0x08005f81
 8005fc4:	08006105 	.word	0x08006105
 8005fc8:	0800602f 	.word	0x0800602f
 8005fcc:	080060bf 	.word	0x080060bf
 8005fd0:	08005f81 	.word	0x08005f81
 8005fd4:	08005f81 	.word	0x08005f81
 8005fd8:	08006127 	.word	0x08006127
 8005fdc:	08005f81 	.word	0x08005f81
 8005fe0:	0800602f 	.word	0x0800602f
 8005fe4:	08005f81 	.word	0x08005f81
 8005fe8:	08005f81 	.word	0x08005f81
 8005fec:	080060c7 	.word	0x080060c7
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	1d1a      	adds	r2, r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	6032      	str	r2, [r6, #0]
 8005ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006000:	2301      	movs	r3, #1
 8006002:	e09d      	b.n	8006140 <_printf_i+0x1e8>
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	6820      	ldr	r0, [r4, #0]
 8006008:	1d19      	adds	r1, r3, #4
 800600a:	6031      	str	r1, [r6, #0]
 800600c:	0606      	lsls	r6, r0, #24
 800600e:	d501      	bpl.n	8006014 <_printf_i+0xbc>
 8006010:	681d      	ldr	r5, [r3, #0]
 8006012:	e003      	b.n	800601c <_printf_i+0xc4>
 8006014:	0645      	lsls	r5, r0, #25
 8006016:	d5fb      	bpl.n	8006010 <_printf_i+0xb8>
 8006018:	f9b3 5000 	ldrsh.w	r5, [r3]
 800601c:	2d00      	cmp	r5, #0
 800601e:	da03      	bge.n	8006028 <_printf_i+0xd0>
 8006020:	232d      	movs	r3, #45	@ 0x2d
 8006022:	426d      	negs	r5, r5
 8006024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006028:	4859      	ldr	r0, [pc, #356]	@ (8006190 <_printf_i+0x238>)
 800602a:	230a      	movs	r3, #10
 800602c:	e011      	b.n	8006052 <_printf_i+0xfa>
 800602e:	6821      	ldr	r1, [r4, #0]
 8006030:	6833      	ldr	r3, [r6, #0]
 8006032:	0608      	lsls	r0, r1, #24
 8006034:	f853 5b04 	ldr.w	r5, [r3], #4
 8006038:	d402      	bmi.n	8006040 <_printf_i+0xe8>
 800603a:	0649      	lsls	r1, r1, #25
 800603c:	bf48      	it	mi
 800603e:	b2ad      	uxthmi	r5, r5
 8006040:	2f6f      	cmp	r7, #111	@ 0x6f
 8006042:	4853      	ldr	r0, [pc, #332]	@ (8006190 <_printf_i+0x238>)
 8006044:	6033      	str	r3, [r6, #0]
 8006046:	bf14      	ite	ne
 8006048:	230a      	movne	r3, #10
 800604a:	2308      	moveq	r3, #8
 800604c:	2100      	movs	r1, #0
 800604e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006052:	6866      	ldr	r6, [r4, #4]
 8006054:	60a6      	str	r6, [r4, #8]
 8006056:	2e00      	cmp	r6, #0
 8006058:	bfa2      	ittt	ge
 800605a:	6821      	ldrge	r1, [r4, #0]
 800605c:	f021 0104 	bicge.w	r1, r1, #4
 8006060:	6021      	strge	r1, [r4, #0]
 8006062:	b90d      	cbnz	r5, 8006068 <_printf_i+0x110>
 8006064:	2e00      	cmp	r6, #0
 8006066:	d04b      	beq.n	8006100 <_printf_i+0x1a8>
 8006068:	4616      	mov	r6, r2
 800606a:	fbb5 f1f3 	udiv	r1, r5, r3
 800606e:	fb03 5711 	mls	r7, r3, r1, r5
 8006072:	5dc7      	ldrb	r7, [r0, r7]
 8006074:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006078:	462f      	mov	r7, r5
 800607a:	42bb      	cmp	r3, r7
 800607c:	460d      	mov	r5, r1
 800607e:	d9f4      	bls.n	800606a <_printf_i+0x112>
 8006080:	2b08      	cmp	r3, #8
 8006082:	d10b      	bne.n	800609c <_printf_i+0x144>
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	07df      	lsls	r7, r3, #31
 8006088:	d508      	bpl.n	800609c <_printf_i+0x144>
 800608a:	6923      	ldr	r3, [r4, #16]
 800608c:	6861      	ldr	r1, [r4, #4]
 800608e:	4299      	cmp	r1, r3
 8006090:	bfde      	ittt	le
 8006092:	2330      	movle	r3, #48	@ 0x30
 8006094:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006098:	f106 36ff 	addle.w	r6, r6, #4294967295
 800609c:	1b92      	subs	r2, r2, r6
 800609e:	6122      	str	r2, [r4, #16]
 80060a0:	f8cd a000 	str.w	sl, [sp]
 80060a4:	464b      	mov	r3, r9
 80060a6:	aa03      	add	r2, sp, #12
 80060a8:	4621      	mov	r1, r4
 80060aa:	4640      	mov	r0, r8
 80060ac:	f7ff fee6 	bl	8005e7c <_printf_common>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d14a      	bne.n	800614a <_printf_i+0x1f2>
 80060b4:	f04f 30ff 	mov.w	r0, #4294967295
 80060b8:	b004      	add	sp, #16
 80060ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f043 0320 	orr.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	4833      	ldr	r0, [pc, #204]	@ (8006194 <_printf_i+0x23c>)
 80060c8:	2778      	movs	r7, #120	@ 0x78
 80060ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060ce:	6823      	ldr	r3, [r4, #0]
 80060d0:	6831      	ldr	r1, [r6, #0]
 80060d2:	061f      	lsls	r7, r3, #24
 80060d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80060d8:	d402      	bmi.n	80060e0 <_printf_i+0x188>
 80060da:	065f      	lsls	r7, r3, #25
 80060dc:	bf48      	it	mi
 80060de:	b2ad      	uxthmi	r5, r5
 80060e0:	6031      	str	r1, [r6, #0]
 80060e2:	07d9      	lsls	r1, r3, #31
 80060e4:	bf44      	itt	mi
 80060e6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ea:	6023      	strmi	r3, [r4, #0]
 80060ec:	b11d      	cbz	r5, 80060f6 <_printf_i+0x19e>
 80060ee:	2310      	movs	r3, #16
 80060f0:	e7ac      	b.n	800604c <_printf_i+0xf4>
 80060f2:	4827      	ldr	r0, [pc, #156]	@ (8006190 <_printf_i+0x238>)
 80060f4:	e7e9      	b.n	80060ca <_printf_i+0x172>
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	f023 0320 	bic.w	r3, r3, #32
 80060fc:	6023      	str	r3, [r4, #0]
 80060fe:	e7f6      	b.n	80060ee <_printf_i+0x196>
 8006100:	4616      	mov	r6, r2
 8006102:	e7bd      	b.n	8006080 <_printf_i+0x128>
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	6825      	ldr	r5, [r4, #0]
 8006108:	6961      	ldr	r1, [r4, #20]
 800610a:	1d18      	adds	r0, r3, #4
 800610c:	6030      	str	r0, [r6, #0]
 800610e:	062e      	lsls	r6, r5, #24
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	d501      	bpl.n	8006118 <_printf_i+0x1c0>
 8006114:	6019      	str	r1, [r3, #0]
 8006116:	e002      	b.n	800611e <_printf_i+0x1c6>
 8006118:	0668      	lsls	r0, r5, #25
 800611a:	d5fb      	bpl.n	8006114 <_printf_i+0x1bc>
 800611c:	8019      	strh	r1, [r3, #0]
 800611e:	2300      	movs	r3, #0
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	4616      	mov	r6, r2
 8006124:	e7bc      	b.n	80060a0 <_printf_i+0x148>
 8006126:	6833      	ldr	r3, [r6, #0]
 8006128:	1d1a      	adds	r2, r3, #4
 800612a:	6032      	str	r2, [r6, #0]
 800612c:	681e      	ldr	r6, [r3, #0]
 800612e:	6862      	ldr	r2, [r4, #4]
 8006130:	2100      	movs	r1, #0
 8006132:	4630      	mov	r0, r6
 8006134:	f7fa f874 	bl	8000220 <memchr>
 8006138:	b108      	cbz	r0, 800613e <_printf_i+0x1e6>
 800613a:	1b80      	subs	r0, r0, r6
 800613c:	6060      	str	r0, [r4, #4]
 800613e:	6863      	ldr	r3, [r4, #4]
 8006140:	6123      	str	r3, [r4, #16]
 8006142:	2300      	movs	r3, #0
 8006144:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006148:	e7aa      	b.n	80060a0 <_printf_i+0x148>
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	4632      	mov	r2, r6
 800614e:	4649      	mov	r1, r9
 8006150:	4640      	mov	r0, r8
 8006152:	47d0      	blx	sl
 8006154:	3001      	adds	r0, #1
 8006156:	d0ad      	beq.n	80060b4 <_printf_i+0x15c>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d413      	bmi.n	8006186 <_printf_i+0x22e>
 800615e:	68e0      	ldr	r0, [r4, #12]
 8006160:	9b03      	ldr	r3, [sp, #12]
 8006162:	4298      	cmp	r0, r3
 8006164:	bfb8      	it	lt
 8006166:	4618      	movlt	r0, r3
 8006168:	e7a6      	b.n	80060b8 <_printf_i+0x160>
 800616a:	2301      	movs	r3, #1
 800616c:	4632      	mov	r2, r6
 800616e:	4649      	mov	r1, r9
 8006170:	4640      	mov	r0, r8
 8006172:	47d0      	blx	sl
 8006174:	3001      	adds	r0, #1
 8006176:	d09d      	beq.n	80060b4 <_printf_i+0x15c>
 8006178:	3501      	adds	r5, #1
 800617a:	68e3      	ldr	r3, [r4, #12]
 800617c:	9903      	ldr	r1, [sp, #12]
 800617e:	1a5b      	subs	r3, r3, r1
 8006180:	42ab      	cmp	r3, r5
 8006182:	dcf2      	bgt.n	800616a <_printf_i+0x212>
 8006184:	e7eb      	b.n	800615e <_printf_i+0x206>
 8006186:	2500      	movs	r5, #0
 8006188:	f104 0619 	add.w	r6, r4, #25
 800618c:	e7f5      	b.n	800617a <_printf_i+0x222>
 800618e:	bf00      	nop
 8006190:	08007175 	.word	0x08007175
 8006194:	08007186 	.word	0x08007186

08006198 <__sflush_r>:
 8006198:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800619c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061a0:	0716      	lsls	r6, r2, #28
 80061a2:	4605      	mov	r5, r0
 80061a4:	460c      	mov	r4, r1
 80061a6:	d454      	bmi.n	8006252 <__sflush_r+0xba>
 80061a8:	684b      	ldr	r3, [r1, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dc02      	bgt.n	80061b4 <__sflush_r+0x1c>
 80061ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dd48      	ble.n	8006246 <__sflush_r+0xae>
 80061b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	d045      	beq.n	8006246 <__sflush_r+0xae>
 80061ba:	2300      	movs	r3, #0
 80061bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80061c0:	682f      	ldr	r7, [r5, #0]
 80061c2:	6a21      	ldr	r1, [r4, #32]
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	d030      	beq.n	800622a <__sflush_r+0x92>
 80061c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80061ca:	89a3      	ldrh	r3, [r4, #12]
 80061cc:	0759      	lsls	r1, r3, #29
 80061ce:	d505      	bpl.n	80061dc <__sflush_r+0x44>
 80061d0:	6863      	ldr	r3, [r4, #4]
 80061d2:	1ad2      	subs	r2, r2, r3
 80061d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80061d6:	b10b      	cbz	r3, 80061dc <__sflush_r+0x44>
 80061d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80061da:	1ad2      	subs	r2, r2, r3
 80061dc:	2300      	movs	r3, #0
 80061de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80061e0:	6a21      	ldr	r1, [r4, #32]
 80061e2:	4628      	mov	r0, r5
 80061e4:	47b0      	blx	r6
 80061e6:	1c43      	adds	r3, r0, #1
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	d106      	bne.n	80061fa <__sflush_r+0x62>
 80061ec:	6829      	ldr	r1, [r5, #0]
 80061ee:	291d      	cmp	r1, #29
 80061f0:	d82b      	bhi.n	800624a <__sflush_r+0xb2>
 80061f2:	4a2a      	ldr	r2, [pc, #168]	@ (800629c <__sflush_r+0x104>)
 80061f4:	410a      	asrs	r2, r1
 80061f6:	07d6      	lsls	r6, r2, #31
 80061f8:	d427      	bmi.n	800624a <__sflush_r+0xb2>
 80061fa:	2200      	movs	r2, #0
 80061fc:	6062      	str	r2, [r4, #4]
 80061fe:	04d9      	lsls	r1, r3, #19
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	d504      	bpl.n	8006210 <__sflush_r+0x78>
 8006206:	1c42      	adds	r2, r0, #1
 8006208:	d101      	bne.n	800620e <__sflush_r+0x76>
 800620a:	682b      	ldr	r3, [r5, #0]
 800620c:	b903      	cbnz	r3, 8006210 <__sflush_r+0x78>
 800620e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006210:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006212:	602f      	str	r7, [r5, #0]
 8006214:	b1b9      	cbz	r1, 8006246 <__sflush_r+0xae>
 8006216:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800621a:	4299      	cmp	r1, r3
 800621c:	d002      	beq.n	8006224 <__sflush_r+0x8c>
 800621e:	4628      	mov	r0, r5
 8006220:	f7ff fb48 	bl	80058b4 <_free_r>
 8006224:	2300      	movs	r3, #0
 8006226:	6363      	str	r3, [r4, #52]	@ 0x34
 8006228:	e00d      	b.n	8006246 <__sflush_r+0xae>
 800622a:	2301      	movs	r3, #1
 800622c:	4628      	mov	r0, r5
 800622e:	47b0      	blx	r6
 8006230:	4602      	mov	r2, r0
 8006232:	1c50      	adds	r0, r2, #1
 8006234:	d1c9      	bne.n	80061ca <__sflush_r+0x32>
 8006236:	682b      	ldr	r3, [r5, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d0c6      	beq.n	80061ca <__sflush_r+0x32>
 800623c:	2b1d      	cmp	r3, #29
 800623e:	d001      	beq.n	8006244 <__sflush_r+0xac>
 8006240:	2b16      	cmp	r3, #22
 8006242:	d11e      	bne.n	8006282 <__sflush_r+0xea>
 8006244:	602f      	str	r7, [r5, #0]
 8006246:	2000      	movs	r0, #0
 8006248:	e022      	b.n	8006290 <__sflush_r+0xf8>
 800624a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800624e:	b21b      	sxth	r3, r3
 8006250:	e01b      	b.n	800628a <__sflush_r+0xf2>
 8006252:	690f      	ldr	r7, [r1, #16]
 8006254:	2f00      	cmp	r7, #0
 8006256:	d0f6      	beq.n	8006246 <__sflush_r+0xae>
 8006258:	0793      	lsls	r3, r2, #30
 800625a:	680e      	ldr	r6, [r1, #0]
 800625c:	bf08      	it	eq
 800625e:	694b      	ldreq	r3, [r1, #20]
 8006260:	600f      	str	r7, [r1, #0]
 8006262:	bf18      	it	ne
 8006264:	2300      	movne	r3, #0
 8006266:	eba6 0807 	sub.w	r8, r6, r7
 800626a:	608b      	str	r3, [r1, #8]
 800626c:	f1b8 0f00 	cmp.w	r8, #0
 8006270:	dde9      	ble.n	8006246 <__sflush_r+0xae>
 8006272:	6a21      	ldr	r1, [r4, #32]
 8006274:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006276:	4643      	mov	r3, r8
 8006278:	463a      	mov	r2, r7
 800627a:	4628      	mov	r0, r5
 800627c:	47b0      	blx	r6
 800627e:	2800      	cmp	r0, #0
 8006280:	dc08      	bgt.n	8006294 <__sflush_r+0xfc>
 8006282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006286:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800628a:	81a3      	strh	r3, [r4, #12]
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006294:	4407      	add	r7, r0
 8006296:	eba8 0800 	sub.w	r8, r8, r0
 800629a:	e7e7      	b.n	800626c <__sflush_r+0xd4>
 800629c:	dfbffffe 	.word	0xdfbffffe

080062a0 <_fflush_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	690b      	ldr	r3, [r1, #16]
 80062a4:	4605      	mov	r5, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	b913      	cbnz	r3, 80062b0 <_fflush_r+0x10>
 80062aa:	2500      	movs	r5, #0
 80062ac:	4628      	mov	r0, r5
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	b118      	cbz	r0, 80062ba <_fflush_r+0x1a>
 80062b2:	6a03      	ldr	r3, [r0, #32]
 80062b4:	b90b      	cbnz	r3, 80062ba <_fflush_r+0x1a>
 80062b6:	f7ff f99f 	bl	80055f8 <__sinit>
 80062ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0f3      	beq.n	80062aa <_fflush_r+0xa>
 80062c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80062c4:	07d0      	lsls	r0, r2, #31
 80062c6:	d404      	bmi.n	80062d2 <_fflush_r+0x32>
 80062c8:	0599      	lsls	r1, r3, #22
 80062ca:	d402      	bmi.n	80062d2 <_fflush_r+0x32>
 80062cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ce:	f7ff fae0 	bl	8005892 <__retarget_lock_acquire_recursive>
 80062d2:	4628      	mov	r0, r5
 80062d4:	4621      	mov	r1, r4
 80062d6:	f7ff ff5f 	bl	8006198 <__sflush_r>
 80062da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062dc:	07da      	lsls	r2, r3, #31
 80062de:	4605      	mov	r5, r0
 80062e0:	d4e4      	bmi.n	80062ac <_fflush_r+0xc>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	059b      	lsls	r3, r3, #22
 80062e6:	d4e1      	bmi.n	80062ac <_fflush_r+0xc>
 80062e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062ea:	f7ff fad3 	bl	8005894 <__retarget_lock_release_recursive>
 80062ee:	e7dd      	b.n	80062ac <_fflush_r+0xc>

080062f0 <__swbuf_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	4614      	mov	r4, r2
 80062f6:	4605      	mov	r5, r0
 80062f8:	b118      	cbz	r0, 8006302 <__swbuf_r+0x12>
 80062fa:	6a03      	ldr	r3, [r0, #32]
 80062fc:	b90b      	cbnz	r3, 8006302 <__swbuf_r+0x12>
 80062fe:	f7ff f97b 	bl	80055f8 <__sinit>
 8006302:	69a3      	ldr	r3, [r4, #24]
 8006304:	60a3      	str	r3, [r4, #8]
 8006306:	89a3      	ldrh	r3, [r4, #12]
 8006308:	071a      	lsls	r2, r3, #28
 800630a:	d501      	bpl.n	8006310 <__swbuf_r+0x20>
 800630c:	6923      	ldr	r3, [r4, #16]
 800630e:	b943      	cbnz	r3, 8006322 <__swbuf_r+0x32>
 8006310:	4621      	mov	r1, r4
 8006312:	4628      	mov	r0, r5
 8006314:	f000 f82a 	bl	800636c <__swsetup_r>
 8006318:	b118      	cbz	r0, 8006322 <__swbuf_r+0x32>
 800631a:	f04f 37ff 	mov.w	r7, #4294967295
 800631e:	4638      	mov	r0, r7
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	1a98      	subs	r0, r3, r2
 8006328:	6963      	ldr	r3, [r4, #20]
 800632a:	b2f6      	uxtb	r6, r6
 800632c:	4283      	cmp	r3, r0
 800632e:	4637      	mov	r7, r6
 8006330:	dc05      	bgt.n	800633e <__swbuf_r+0x4e>
 8006332:	4621      	mov	r1, r4
 8006334:	4628      	mov	r0, r5
 8006336:	f7ff ffb3 	bl	80062a0 <_fflush_r>
 800633a:	2800      	cmp	r0, #0
 800633c:	d1ed      	bne.n	800631a <__swbuf_r+0x2a>
 800633e:	68a3      	ldr	r3, [r4, #8]
 8006340:	3b01      	subs	r3, #1
 8006342:	60a3      	str	r3, [r4, #8]
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	6022      	str	r2, [r4, #0]
 800634a:	701e      	strb	r6, [r3, #0]
 800634c:	6962      	ldr	r2, [r4, #20]
 800634e:	1c43      	adds	r3, r0, #1
 8006350:	429a      	cmp	r2, r3
 8006352:	d004      	beq.n	800635e <__swbuf_r+0x6e>
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	07db      	lsls	r3, r3, #31
 8006358:	d5e1      	bpl.n	800631e <__swbuf_r+0x2e>
 800635a:	2e0a      	cmp	r6, #10
 800635c:	d1df      	bne.n	800631e <__swbuf_r+0x2e>
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f7ff ff9d 	bl	80062a0 <_fflush_r>
 8006366:	2800      	cmp	r0, #0
 8006368:	d0d9      	beq.n	800631e <__swbuf_r+0x2e>
 800636a:	e7d6      	b.n	800631a <__swbuf_r+0x2a>

0800636c <__swsetup_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <__swsetup_r+0xa8>)
 8006370:	4605      	mov	r5, r0
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	460c      	mov	r4, r1
 8006376:	b118      	cbz	r0, 8006380 <__swsetup_r+0x14>
 8006378:	6a03      	ldr	r3, [r0, #32]
 800637a:	b90b      	cbnz	r3, 8006380 <__swsetup_r+0x14>
 800637c:	f7ff f93c 	bl	80055f8 <__sinit>
 8006380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006384:	0719      	lsls	r1, r3, #28
 8006386:	d422      	bmi.n	80063ce <__swsetup_r+0x62>
 8006388:	06da      	lsls	r2, r3, #27
 800638a:	d407      	bmi.n	800639c <__swsetup_r+0x30>
 800638c:	2209      	movs	r2, #9
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
 800639a:	e033      	b.n	8006404 <__swsetup_r+0x98>
 800639c:	0758      	lsls	r0, r3, #29
 800639e:	d512      	bpl.n	80063c6 <__swsetup_r+0x5a>
 80063a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063a2:	b141      	cbz	r1, 80063b6 <__swsetup_r+0x4a>
 80063a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063a8:	4299      	cmp	r1, r3
 80063aa:	d002      	beq.n	80063b2 <__swsetup_r+0x46>
 80063ac:	4628      	mov	r0, r5
 80063ae:	f7ff fa81 	bl	80058b4 <_free_r>
 80063b2:	2300      	movs	r3, #0
 80063b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	2300      	movs	r3, #0
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b94b      	cbnz	r3, 80063e6 <__swsetup_r+0x7a>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063dc:	d003      	beq.n	80063e6 <__swsetup_r+0x7a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f000 f887 	bl	80064f4 <__smakebuf_r>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	f013 0201 	ands.w	r2, r3, #1
 80063ee:	d00a      	beq.n	8006406 <__swsetup_r+0x9a>
 80063f0:	2200      	movs	r2, #0
 80063f2:	60a2      	str	r2, [r4, #8]
 80063f4:	6962      	ldr	r2, [r4, #20]
 80063f6:	4252      	negs	r2, r2
 80063f8:	61a2      	str	r2, [r4, #24]
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	b942      	cbnz	r2, 8006410 <__swsetup_r+0xa4>
 80063fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006402:	d1c5      	bne.n	8006390 <__swsetup_r+0x24>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	0799      	lsls	r1, r3, #30
 8006408:	bf58      	it	pl
 800640a:	6962      	ldrpl	r2, [r4, #20]
 800640c:	60a2      	str	r2, [r4, #8]
 800640e:	e7f4      	b.n	80063fa <__swsetup_r+0x8e>
 8006410:	2000      	movs	r0, #0
 8006412:	e7f7      	b.n	8006404 <__swsetup_r+0x98>
 8006414:	20000018 	.word	0x20000018

08006418 <memmove>:
 8006418:	4288      	cmp	r0, r1
 800641a:	b510      	push	{r4, lr}
 800641c:	eb01 0402 	add.w	r4, r1, r2
 8006420:	d902      	bls.n	8006428 <memmove+0x10>
 8006422:	4284      	cmp	r4, r0
 8006424:	4623      	mov	r3, r4
 8006426:	d807      	bhi.n	8006438 <memmove+0x20>
 8006428:	1e43      	subs	r3, r0, #1
 800642a:	42a1      	cmp	r1, r4
 800642c:	d008      	beq.n	8006440 <memmove+0x28>
 800642e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006432:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006436:	e7f8      	b.n	800642a <memmove+0x12>
 8006438:	4402      	add	r2, r0
 800643a:	4601      	mov	r1, r0
 800643c:	428a      	cmp	r2, r1
 800643e:	d100      	bne.n	8006442 <memmove+0x2a>
 8006440:	bd10      	pop	{r4, pc}
 8006442:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006446:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800644a:	e7f7      	b.n	800643c <memmove+0x24>

0800644c <_realloc_r>:
 800644c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006450:	4680      	mov	r8, r0
 8006452:	4615      	mov	r5, r2
 8006454:	460c      	mov	r4, r1
 8006456:	b921      	cbnz	r1, 8006462 <_realloc_r+0x16>
 8006458:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800645c:	4611      	mov	r1, r2
 800645e:	f7fe bfb3 	b.w	80053c8 <_malloc_r>
 8006462:	b92a      	cbnz	r2, 8006470 <_realloc_r+0x24>
 8006464:	f7ff fa26 	bl	80058b4 <_free_r>
 8006468:	2400      	movs	r4, #0
 800646a:	4620      	mov	r0, r4
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	f000 f89e 	bl	80065b0 <_malloc_usable_size_r>
 8006474:	4285      	cmp	r5, r0
 8006476:	4606      	mov	r6, r0
 8006478:	d802      	bhi.n	8006480 <_realloc_r+0x34>
 800647a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800647e:	d8f4      	bhi.n	800646a <_realloc_r+0x1e>
 8006480:	4629      	mov	r1, r5
 8006482:	4640      	mov	r0, r8
 8006484:	f7fe ffa0 	bl	80053c8 <_malloc_r>
 8006488:	4607      	mov	r7, r0
 800648a:	2800      	cmp	r0, #0
 800648c:	d0ec      	beq.n	8006468 <_realloc_r+0x1c>
 800648e:	42b5      	cmp	r5, r6
 8006490:	462a      	mov	r2, r5
 8006492:	4621      	mov	r1, r4
 8006494:	bf28      	it	cs
 8006496:	4632      	movcs	r2, r6
 8006498:	f7ff f9fd 	bl	8005896 <memcpy>
 800649c:	4621      	mov	r1, r4
 800649e:	4640      	mov	r0, r8
 80064a0:	f7ff fa08 	bl	80058b4 <_free_r>
 80064a4:	463c      	mov	r4, r7
 80064a6:	e7e0      	b.n	800646a <_realloc_r+0x1e>

080064a8 <__swhatbuf_r>:
 80064a8:	b570      	push	{r4, r5, r6, lr}
 80064aa:	460c      	mov	r4, r1
 80064ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b0:	2900      	cmp	r1, #0
 80064b2:	b096      	sub	sp, #88	@ 0x58
 80064b4:	4615      	mov	r5, r2
 80064b6:	461e      	mov	r6, r3
 80064b8:	da0d      	bge.n	80064d6 <__swhatbuf_r+0x2e>
 80064ba:	89a3      	ldrh	r3, [r4, #12]
 80064bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064c0:	f04f 0100 	mov.w	r1, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2340      	movne	r3, #64	@ 0x40
 80064c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064cc:	2000      	movs	r0, #0
 80064ce:	6031      	str	r1, [r6, #0]
 80064d0:	602b      	str	r3, [r5, #0]
 80064d2:	b016      	add	sp, #88	@ 0x58
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	466a      	mov	r2, sp
 80064d8:	f000 f848 	bl	800656c <_fstat_r>
 80064dc:	2800      	cmp	r0, #0
 80064de:	dbec      	blt.n	80064ba <__swhatbuf_r+0x12>
 80064e0:	9901      	ldr	r1, [sp, #4]
 80064e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064ea:	4259      	negs	r1, r3
 80064ec:	4159      	adcs	r1, r3
 80064ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064f2:	e7eb      	b.n	80064cc <__swhatbuf_r+0x24>

080064f4 <__smakebuf_r>:
 80064f4:	898b      	ldrh	r3, [r1, #12]
 80064f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f8:	079d      	lsls	r5, r3, #30
 80064fa:	4606      	mov	r6, r0
 80064fc:	460c      	mov	r4, r1
 80064fe:	d507      	bpl.n	8006510 <__smakebuf_r+0x1c>
 8006500:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	6123      	str	r3, [r4, #16]
 8006508:	2301      	movs	r3, #1
 800650a:	6163      	str	r3, [r4, #20]
 800650c:	b003      	add	sp, #12
 800650e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006510:	ab01      	add	r3, sp, #4
 8006512:	466a      	mov	r2, sp
 8006514:	f7ff ffc8 	bl	80064a8 <__swhatbuf_r>
 8006518:	9f00      	ldr	r7, [sp, #0]
 800651a:	4605      	mov	r5, r0
 800651c:	4639      	mov	r1, r7
 800651e:	4630      	mov	r0, r6
 8006520:	f7fe ff52 	bl	80053c8 <_malloc_r>
 8006524:	b948      	cbnz	r0, 800653a <__smakebuf_r+0x46>
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	059a      	lsls	r2, r3, #22
 800652c:	d4ee      	bmi.n	800650c <__smakebuf_r+0x18>
 800652e:	f023 0303 	bic.w	r3, r3, #3
 8006532:	f043 0302 	orr.w	r3, r3, #2
 8006536:	81a3      	strh	r3, [r4, #12]
 8006538:	e7e2      	b.n	8006500 <__smakebuf_r+0xc>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	6020      	str	r0, [r4, #0]
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	9b01      	ldr	r3, [sp, #4]
 8006546:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800654a:	b15b      	cbz	r3, 8006564 <__smakebuf_r+0x70>
 800654c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006550:	4630      	mov	r0, r6
 8006552:	f000 f81d 	bl	8006590 <_isatty_r>
 8006556:	b128      	cbz	r0, 8006564 <__smakebuf_r+0x70>
 8006558:	89a3      	ldrh	r3, [r4, #12]
 800655a:	f023 0303 	bic.w	r3, r3, #3
 800655e:	f043 0301 	orr.w	r3, r3, #1
 8006562:	81a3      	strh	r3, [r4, #12]
 8006564:	89a3      	ldrh	r3, [r4, #12]
 8006566:	431d      	orrs	r5, r3
 8006568:	81a5      	strh	r5, [r4, #12]
 800656a:	e7cf      	b.n	800650c <__smakebuf_r+0x18>

0800656c <_fstat_r>:
 800656c:	b538      	push	{r3, r4, r5, lr}
 800656e:	4d07      	ldr	r5, [pc, #28]	@ (800658c <_fstat_r+0x20>)
 8006570:	2300      	movs	r3, #0
 8006572:	4604      	mov	r4, r0
 8006574:	4608      	mov	r0, r1
 8006576:	4611      	mov	r1, r2
 8006578:	602b      	str	r3, [r5, #0]
 800657a:	f7fb fbca 	bl	8001d12 <_fstat>
 800657e:	1c43      	adds	r3, r0, #1
 8006580:	d102      	bne.n	8006588 <_fstat_r+0x1c>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b103      	cbz	r3, 8006588 <_fstat_r+0x1c>
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	bd38      	pop	{r3, r4, r5, pc}
 800658a:	bf00      	nop
 800658c:	200084c8 	.word	0x200084c8

08006590 <_isatty_r>:
 8006590:	b538      	push	{r3, r4, r5, lr}
 8006592:	4d06      	ldr	r5, [pc, #24]	@ (80065ac <_isatty_r+0x1c>)
 8006594:	2300      	movs	r3, #0
 8006596:	4604      	mov	r4, r0
 8006598:	4608      	mov	r0, r1
 800659a:	602b      	str	r3, [r5, #0]
 800659c:	f7fb fbc9 	bl	8001d32 <_isatty>
 80065a0:	1c43      	adds	r3, r0, #1
 80065a2:	d102      	bne.n	80065aa <_isatty_r+0x1a>
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	b103      	cbz	r3, 80065aa <_isatty_r+0x1a>
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	bd38      	pop	{r3, r4, r5, pc}
 80065ac:	200084c8 	.word	0x200084c8

080065b0 <_malloc_usable_size_r>:
 80065b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b4:	1f18      	subs	r0, r3, #4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfbc      	itt	lt
 80065ba:	580b      	ldrlt	r3, [r1, r0]
 80065bc:	18c0      	addlt	r0, r0, r3
 80065be:	4770      	bx	lr

080065c0 <cosf>:
 80065c0:	ee10 3a10 	vmov	r3, s0
 80065c4:	b507      	push	{r0, r1, r2, lr}
 80065c6:	4a1e      	ldr	r2, [pc, #120]	@ (8006640 <cosf+0x80>)
 80065c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d806      	bhi.n	80065de <cosf+0x1e>
 80065d0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8006644 <cosf+0x84>
 80065d4:	b003      	add	sp, #12
 80065d6:	f85d eb04 	ldr.w	lr, [sp], #4
 80065da:	f000 b87b 	b.w	80066d4 <__kernel_cosf>
 80065de:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80065e2:	d304      	bcc.n	80065ee <cosf+0x2e>
 80065e4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80065e8:	b003      	add	sp, #12
 80065ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80065ee:	4668      	mov	r0, sp
 80065f0:	f000 f910 	bl	8006814 <__ieee754_rem_pio2f>
 80065f4:	f000 0003 	and.w	r0, r0, #3
 80065f8:	2801      	cmp	r0, #1
 80065fa:	d009      	beq.n	8006610 <cosf+0x50>
 80065fc:	2802      	cmp	r0, #2
 80065fe:	d010      	beq.n	8006622 <cosf+0x62>
 8006600:	b9b0      	cbnz	r0, 8006630 <cosf+0x70>
 8006602:	eddd 0a01 	vldr	s1, [sp, #4]
 8006606:	ed9d 0a00 	vldr	s0, [sp]
 800660a:	f000 f863 	bl	80066d4 <__kernel_cosf>
 800660e:	e7eb      	b.n	80065e8 <cosf+0x28>
 8006610:	eddd 0a01 	vldr	s1, [sp, #4]
 8006614:	ed9d 0a00 	vldr	s0, [sp]
 8006618:	f000 f8b4 	bl	8006784 <__kernel_sinf>
 800661c:	eeb1 0a40 	vneg.f32	s0, s0
 8006620:	e7e2      	b.n	80065e8 <cosf+0x28>
 8006622:	eddd 0a01 	vldr	s1, [sp, #4]
 8006626:	ed9d 0a00 	vldr	s0, [sp]
 800662a:	f000 f853 	bl	80066d4 <__kernel_cosf>
 800662e:	e7f5      	b.n	800661c <cosf+0x5c>
 8006630:	eddd 0a01 	vldr	s1, [sp, #4]
 8006634:	ed9d 0a00 	vldr	s0, [sp]
 8006638:	2001      	movs	r0, #1
 800663a:	f000 f8a3 	bl	8006784 <__kernel_sinf>
 800663e:	e7d3      	b.n	80065e8 <cosf+0x28>
 8006640:	3f490fd8 	.word	0x3f490fd8
 8006644:	00000000 	.word	0x00000000

08006648 <sinf>:
 8006648:	ee10 3a10 	vmov	r3, s0
 800664c:	b507      	push	{r0, r1, r2, lr}
 800664e:	4a1f      	ldr	r2, [pc, #124]	@ (80066cc <sinf+0x84>)
 8006650:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006654:	4293      	cmp	r3, r2
 8006656:	d807      	bhi.n	8006668 <sinf+0x20>
 8006658:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80066d0 <sinf+0x88>
 800665c:	2000      	movs	r0, #0
 800665e:	b003      	add	sp, #12
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	f000 b88e 	b.w	8006784 <__kernel_sinf>
 8006668:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800666c:	d304      	bcc.n	8006678 <sinf+0x30>
 800666e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006672:	b003      	add	sp, #12
 8006674:	f85d fb04 	ldr.w	pc, [sp], #4
 8006678:	4668      	mov	r0, sp
 800667a:	f000 f8cb 	bl	8006814 <__ieee754_rem_pio2f>
 800667e:	f000 0003 	and.w	r0, r0, #3
 8006682:	2801      	cmp	r0, #1
 8006684:	d00a      	beq.n	800669c <sinf+0x54>
 8006686:	2802      	cmp	r0, #2
 8006688:	d00f      	beq.n	80066aa <sinf+0x62>
 800668a:	b9c0      	cbnz	r0, 80066be <sinf+0x76>
 800668c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006690:	ed9d 0a00 	vldr	s0, [sp]
 8006694:	2001      	movs	r0, #1
 8006696:	f000 f875 	bl	8006784 <__kernel_sinf>
 800669a:	e7ea      	b.n	8006672 <sinf+0x2a>
 800669c:	eddd 0a01 	vldr	s1, [sp, #4]
 80066a0:	ed9d 0a00 	vldr	s0, [sp]
 80066a4:	f000 f816 	bl	80066d4 <__kernel_cosf>
 80066a8:	e7e3      	b.n	8006672 <sinf+0x2a>
 80066aa:	eddd 0a01 	vldr	s1, [sp, #4]
 80066ae:	ed9d 0a00 	vldr	s0, [sp]
 80066b2:	2001      	movs	r0, #1
 80066b4:	f000 f866 	bl	8006784 <__kernel_sinf>
 80066b8:	eeb1 0a40 	vneg.f32	s0, s0
 80066bc:	e7d9      	b.n	8006672 <sinf+0x2a>
 80066be:	eddd 0a01 	vldr	s1, [sp, #4]
 80066c2:	ed9d 0a00 	vldr	s0, [sp]
 80066c6:	f000 f805 	bl	80066d4 <__kernel_cosf>
 80066ca:	e7f5      	b.n	80066b8 <sinf+0x70>
 80066cc:	3f490fd8 	.word	0x3f490fd8
 80066d0:	00000000 	.word	0x00000000

080066d4 <__kernel_cosf>:
 80066d4:	ee10 3a10 	vmov	r3, s0
 80066d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80066dc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80066e0:	eef0 6a40 	vmov.f32	s13, s0
 80066e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80066e8:	d204      	bcs.n	80066f4 <__kernel_cosf+0x20>
 80066ea:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 80066ee:	ee17 2a90 	vmov	r2, s15
 80066f2:	b342      	cbz	r2, 8006746 <__kernel_cosf+0x72>
 80066f4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 80066f8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8006764 <__kernel_cosf+0x90>
 80066fc:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8006768 <__kernel_cosf+0x94>
 8006700:	4a1a      	ldr	r2, [pc, #104]	@ (800676c <__kernel_cosf+0x98>)
 8006702:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006706:	4293      	cmp	r3, r2
 8006708:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006770 <__kernel_cosf+0x9c>
 800670c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006710:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8006774 <__kernel_cosf+0xa0>
 8006714:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006718:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8006778 <__kernel_cosf+0xa4>
 800671c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006720:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800677c <__kernel_cosf+0xa8>
 8006724:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006728:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800672c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8006730:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006734:	eee7 0a06 	vfma.f32	s1, s14, s12
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	d804      	bhi.n	8006748 <__kernel_cosf+0x74>
 800673e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006742:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006746:	4770      	bx	lr
 8006748:	4a0d      	ldr	r2, [pc, #52]	@ (8006780 <__kernel_cosf+0xac>)
 800674a:	4293      	cmp	r3, r2
 800674c:	bf9a      	itte	ls
 800674e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8006752:	ee07 3a10 	vmovls	s14, r3
 8006756:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800675a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800675e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006762:	e7ec      	b.n	800673e <__kernel_cosf+0x6a>
 8006764:	ad47d74e 	.word	0xad47d74e
 8006768:	310f74f6 	.word	0x310f74f6
 800676c:	3e999999 	.word	0x3e999999
 8006770:	b493f27c 	.word	0xb493f27c
 8006774:	37d00d01 	.word	0x37d00d01
 8006778:	bab60b61 	.word	0xbab60b61
 800677c:	3d2aaaab 	.word	0x3d2aaaab
 8006780:	3f480000 	.word	0x3f480000

08006784 <__kernel_sinf>:
 8006784:	ee10 3a10 	vmov	r3, s0
 8006788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800678c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8006790:	d204      	bcs.n	800679c <__kernel_sinf+0x18>
 8006792:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006796:	ee17 3a90 	vmov	r3, s15
 800679a:	b35b      	cbz	r3, 80067f4 <__kernel_sinf+0x70>
 800679c:	ee20 7a00 	vmul.f32	s14, s0, s0
 80067a0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80067f8 <__kernel_sinf+0x74>
 80067a4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80067fc <__kernel_sinf+0x78>
 80067a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 80067ac:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8006800 <__kernel_sinf+0x7c>
 80067b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80067b4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006804 <__kernel_sinf+0x80>
 80067b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80067bc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8006808 <__kernel_sinf+0x84>
 80067c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80067c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80067c8:	b930      	cbnz	r0, 80067d8 <__kernel_sinf+0x54>
 80067ca:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800680c <__kernel_sinf+0x88>
 80067ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 80067d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80067d6:	4770      	bx	lr
 80067d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80067dc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80067e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80067e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80067e8:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8006810 <__kernel_sinf+0x8c>
 80067ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80067f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	2f2ec9d3 	.word	0x2f2ec9d3
 80067fc:	b2d72f34 	.word	0xb2d72f34
 8006800:	3638ef1b 	.word	0x3638ef1b
 8006804:	b9500d01 	.word	0xb9500d01
 8006808:	3c088889 	.word	0x3c088889
 800680c:	be2aaaab 	.word	0xbe2aaaab
 8006810:	3e2aaaab 	.word	0x3e2aaaab

08006814 <__ieee754_rem_pio2f>:
 8006814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006816:	ee10 6a10 	vmov	r6, s0
 800681a:	4b88      	ldr	r3, [pc, #544]	@ (8006a3c <__ieee754_rem_pio2f+0x228>)
 800681c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8006820:	429d      	cmp	r5, r3
 8006822:	b087      	sub	sp, #28
 8006824:	4604      	mov	r4, r0
 8006826:	d805      	bhi.n	8006834 <__ieee754_rem_pio2f+0x20>
 8006828:	2300      	movs	r3, #0
 800682a:	ed80 0a00 	vstr	s0, [r0]
 800682e:	6043      	str	r3, [r0, #4]
 8006830:	2000      	movs	r0, #0
 8006832:	e022      	b.n	800687a <__ieee754_rem_pio2f+0x66>
 8006834:	4b82      	ldr	r3, [pc, #520]	@ (8006a40 <__ieee754_rem_pio2f+0x22c>)
 8006836:	429d      	cmp	r5, r3
 8006838:	d83a      	bhi.n	80068b0 <__ieee754_rem_pio2f+0x9c>
 800683a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800683e:	2e00      	cmp	r6, #0
 8006840:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8006a44 <__ieee754_rem_pio2f+0x230>
 8006844:	4a80      	ldr	r2, [pc, #512]	@ (8006a48 <__ieee754_rem_pio2f+0x234>)
 8006846:	f023 030f 	bic.w	r3, r3, #15
 800684a:	dd18      	ble.n	800687e <__ieee754_rem_pio2f+0x6a>
 800684c:	4293      	cmp	r3, r2
 800684e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8006852:	bf09      	itett	eq
 8006854:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8006a4c <__ieee754_rem_pio2f+0x238>
 8006858:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8006a50 <__ieee754_rem_pio2f+0x23c>
 800685c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8006a54 <__ieee754_rem_pio2f+0x240>
 8006860:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8006864:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8006868:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800686c:	ed80 7a00 	vstr	s14, [r0]
 8006870:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006874:	edc0 7a01 	vstr	s15, [r0, #4]
 8006878:	2001      	movs	r0, #1
 800687a:	b007      	add	sp, #28
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	4293      	cmp	r3, r2
 8006880:	ee70 7a07 	vadd.f32	s15, s0, s14
 8006884:	bf09      	itett	eq
 8006886:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8006a4c <__ieee754_rem_pio2f+0x238>
 800688a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8006a50 <__ieee754_rem_pio2f+0x23c>
 800688e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8006a54 <__ieee754_rem_pio2f+0x240>
 8006892:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006896:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800689a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800689e:	ed80 7a00 	vstr	s14, [r0]
 80068a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068a6:	edc0 7a01 	vstr	s15, [r0, #4]
 80068aa:	f04f 30ff 	mov.w	r0, #4294967295
 80068ae:	e7e4      	b.n	800687a <__ieee754_rem_pio2f+0x66>
 80068b0:	4b69      	ldr	r3, [pc, #420]	@ (8006a58 <__ieee754_rem_pio2f+0x244>)
 80068b2:	429d      	cmp	r5, r3
 80068b4:	d873      	bhi.n	800699e <__ieee754_rem_pio2f+0x18a>
 80068b6:	f000 f8dd 	bl	8006a74 <fabsf>
 80068ba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8006a5c <__ieee754_rem_pio2f+0x248>
 80068be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80068c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80068c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ce:	ee17 0a90 	vmov	r0, s15
 80068d2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006a44 <__ieee754_rem_pio2f+0x230>
 80068d6:	eea7 0a67 	vfms.f32	s0, s14, s15
 80068da:	281f      	cmp	r0, #31
 80068dc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8006a50 <__ieee754_rem_pio2f+0x23c>
 80068e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068e4:	eeb1 6a47 	vneg.f32	s12, s14
 80068e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 80068ec:	ee16 1a90 	vmov	r1, s13
 80068f0:	dc09      	bgt.n	8006906 <__ieee754_rem_pio2f+0xf2>
 80068f2:	4a5b      	ldr	r2, [pc, #364]	@ (8006a60 <__ieee754_rem_pio2f+0x24c>)
 80068f4:	1e47      	subs	r7, r0, #1
 80068f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80068fa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80068fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006902:	4293      	cmp	r3, r2
 8006904:	d107      	bne.n	8006916 <__ieee754_rem_pio2f+0x102>
 8006906:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800690a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800690e:	2a08      	cmp	r2, #8
 8006910:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006914:	dc14      	bgt.n	8006940 <__ieee754_rem_pio2f+0x12c>
 8006916:	6021      	str	r1, [r4, #0]
 8006918:	ed94 7a00 	vldr	s14, [r4]
 800691c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006920:	2e00      	cmp	r6, #0
 8006922:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006926:	ed84 0a01 	vstr	s0, [r4, #4]
 800692a:	daa6      	bge.n	800687a <__ieee754_rem_pio2f+0x66>
 800692c:	eeb1 7a47 	vneg.f32	s14, s14
 8006930:	eeb1 0a40 	vneg.f32	s0, s0
 8006934:	ed84 7a00 	vstr	s14, [r4]
 8006938:	ed84 0a01 	vstr	s0, [r4, #4]
 800693c:	4240      	negs	r0, r0
 800693e:	e79c      	b.n	800687a <__ieee754_rem_pio2f+0x66>
 8006940:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8006a4c <__ieee754_rem_pio2f+0x238>
 8006944:	eef0 6a40 	vmov.f32	s13, s0
 8006948:	eee6 6a25 	vfma.f32	s13, s12, s11
 800694c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006950:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006954:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006a54 <__ieee754_rem_pio2f+0x240>
 8006958:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800695c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006960:	ee15 2a90 	vmov	r2, s11
 8006964:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006968:	1a5b      	subs	r3, r3, r1
 800696a:	2b19      	cmp	r3, #25
 800696c:	dc04      	bgt.n	8006978 <__ieee754_rem_pio2f+0x164>
 800696e:	edc4 5a00 	vstr	s11, [r4]
 8006972:	eeb0 0a66 	vmov.f32	s0, s13
 8006976:	e7cf      	b.n	8006918 <__ieee754_rem_pio2f+0x104>
 8006978:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8006a64 <__ieee754_rem_pio2f+0x250>
 800697c:	eeb0 0a66 	vmov.f32	s0, s13
 8006980:	eea6 0a25 	vfma.f32	s0, s12, s11
 8006984:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8006988:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8006a68 <__ieee754_rem_pio2f+0x254>
 800698c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006990:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006994:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006998:	ed84 7a00 	vstr	s14, [r4]
 800699c:	e7bc      	b.n	8006918 <__ieee754_rem_pio2f+0x104>
 800699e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80069a2:	d306      	bcc.n	80069b2 <__ieee754_rem_pio2f+0x19e>
 80069a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80069a8:	edc0 7a01 	vstr	s15, [r0, #4]
 80069ac:	edc0 7a00 	vstr	s15, [r0]
 80069b0:	e73e      	b.n	8006830 <__ieee754_rem_pio2f+0x1c>
 80069b2:	15ea      	asrs	r2, r5, #23
 80069b4:	3a86      	subs	r2, #134	@ 0x86
 80069b6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80069ba:	ee07 3a90 	vmov	s15, r3
 80069be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069c2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8006a6c <__ieee754_rem_pio2f+0x258>
 80069c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80069ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 80069d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80069da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80069de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069e2:	ed8d 7a04 	vstr	s14, [sp, #16]
 80069e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80069ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 80069ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f2:	edcd 7a05 	vstr	s15, [sp, #20]
 80069f6:	d11e      	bne.n	8006a36 <__ieee754_rem_pio2f+0x222>
 80069f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80069fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a00:	bf0c      	ite	eq
 8006a02:	2301      	moveq	r3, #1
 8006a04:	2302      	movne	r3, #2
 8006a06:	491a      	ldr	r1, [pc, #104]	@ (8006a70 <__ieee754_rem_pio2f+0x25c>)
 8006a08:	9101      	str	r1, [sp, #4]
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	9100      	str	r1, [sp, #0]
 8006a0e:	a803      	add	r0, sp, #12
 8006a10:	4621      	mov	r1, r4
 8006a12:	f000 f837 	bl	8006a84 <__kernel_rem_pio2f>
 8006a16:	2e00      	cmp	r6, #0
 8006a18:	f6bf af2f 	bge.w	800687a <__ieee754_rem_pio2f+0x66>
 8006a1c:	edd4 7a00 	vldr	s15, [r4]
 8006a20:	eef1 7a67 	vneg.f32	s15, s15
 8006a24:	edc4 7a00 	vstr	s15, [r4]
 8006a28:	edd4 7a01 	vldr	s15, [r4, #4]
 8006a2c:	eef1 7a67 	vneg.f32	s15, s15
 8006a30:	edc4 7a01 	vstr	s15, [r4, #4]
 8006a34:	e782      	b.n	800693c <__ieee754_rem_pio2f+0x128>
 8006a36:	2303      	movs	r3, #3
 8006a38:	e7e5      	b.n	8006a06 <__ieee754_rem_pio2f+0x1f2>
 8006a3a:	bf00      	nop
 8006a3c:	3f490fd8 	.word	0x3f490fd8
 8006a40:	4016cbe3 	.word	0x4016cbe3
 8006a44:	3fc90f80 	.word	0x3fc90f80
 8006a48:	3fc90fd0 	.word	0x3fc90fd0
 8006a4c:	37354400 	.word	0x37354400
 8006a50:	37354443 	.word	0x37354443
 8006a54:	2e85a308 	.word	0x2e85a308
 8006a58:	43490f80 	.word	0x43490f80
 8006a5c:	3f22f984 	.word	0x3f22f984
 8006a60:	08007198 	.word	0x08007198
 8006a64:	2e85a300 	.word	0x2e85a300
 8006a68:	248d3132 	.word	0x248d3132
 8006a6c:	43800000 	.word	0x43800000
 8006a70:	08007218 	.word	0x08007218

08006a74 <fabsf>:
 8006a74:	ee10 3a10 	vmov	r3, s0
 8006a78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a7c:	ee00 3a10 	vmov	s0, r3
 8006a80:	4770      	bx	lr
	...

08006a84 <__kernel_rem_pio2f>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	ed2d 8b04 	vpush	{d8-d9}
 8006a8c:	b0d9      	sub	sp, #356	@ 0x164
 8006a8e:	4690      	mov	r8, r2
 8006a90:	9001      	str	r0, [sp, #4]
 8006a92:	4ab9      	ldr	r2, [pc, #740]	@ (8006d78 <__kernel_rem_pio2f+0x2f4>)
 8006a94:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8006a96:	f118 0f04 	cmn.w	r8, #4
 8006a9a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8006a9e:	460f      	mov	r7, r1
 8006aa0:	f103 3bff 	add.w	fp, r3, #4294967295
 8006aa4:	db27      	blt.n	8006af6 <__kernel_rem_pio2f+0x72>
 8006aa6:	f1b8 0203 	subs.w	r2, r8, #3
 8006aaa:	bf48      	it	mi
 8006aac:	f108 0204 	addmi.w	r2, r8, #4
 8006ab0:	10d2      	asrs	r2, r2, #3
 8006ab2:	1c55      	adds	r5, r2, #1
 8006ab4:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006ab6:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006aba:	00e8      	lsls	r0, r5, #3
 8006abc:	eba2 060b 	sub.w	r6, r2, fp
 8006ac0:	9002      	str	r0, [sp, #8]
 8006ac2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006ac6:	eb0a 0c0b 	add.w	ip, sl, fp
 8006aca:	ac1c      	add	r4, sp, #112	@ 0x70
 8006acc:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	4560      	cmp	r0, ip
 8006ad4:	dd11      	ble.n	8006afa <__kernel_rem_pio2f+0x76>
 8006ad6:	a91c      	add	r1, sp, #112	@ 0x70
 8006ad8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8006adc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8006ae0:	f04f 0c00 	mov.w	ip, #0
 8006ae4:	45d4      	cmp	ip, sl
 8006ae6:	dc27      	bgt.n	8006b38 <__kernel_rem_pio2f+0xb4>
 8006ae8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006aec:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006af0:	4606      	mov	r6, r0
 8006af2:	2400      	movs	r4, #0
 8006af4:	e016      	b.n	8006b24 <__kernel_rem_pio2f+0xa0>
 8006af6:	2200      	movs	r2, #0
 8006af8:	e7db      	b.n	8006ab2 <__kernel_rem_pio2f+0x2e>
 8006afa:	42c6      	cmn	r6, r0
 8006afc:	bf5d      	ittte	pl
 8006afe:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8006b02:	ee07 1a90 	vmovpl	s15, r1
 8006b06:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006b0a:	eef0 7a47 	vmovmi.f32	s15, s14
 8006b0e:	ece4 7a01 	vstmia	r4!, {s15}
 8006b12:	3001      	adds	r0, #1
 8006b14:	e7dd      	b.n	8006ad2 <__kernel_rem_pio2f+0x4e>
 8006b16:	ecfe 6a01 	vldmia	lr!, {s13}
 8006b1a:	ed96 7a00 	vldr	s14, [r6]
 8006b1e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006b22:	3401      	adds	r4, #1
 8006b24:	455c      	cmp	r4, fp
 8006b26:	f1a6 0604 	sub.w	r6, r6, #4
 8006b2a:	ddf4      	ble.n	8006b16 <__kernel_rem_pio2f+0x92>
 8006b2c:	ece9 7a01 	vstmia	r9!, {s15}
 8006b30:	f10c 0c01 	add.w	ip, ip, #1
 8006b34:	3004      	adds	r0, #4
 8006b36:	e7d5      	b.n	8006ae4 <__kernel_rem_pio2f+0x60>
 8006b38:	a908      	add	r1, sp, #32
 8006b3a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b3e:	9104      	str	r1, [sp, #16]
 8006b40:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006b42:	eddf 8a90 	vldr	s17, [pc, #576]	@ 8006d84 <__kernel_rem_pio2f+0x300>
 8006b46:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 8006d80 <__kernel_rem_pio2f+0x2fc>
 8006b4a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006b4e:	9203      	str	r2, [sp, #12]
 8006b50:	4654      	mov	r4, sl
 8006b52:	00a2      	lsls	r2, r4, #2
 8006b54:	9205      	str	r2, [sp, #20]
 8006b56:	aa58      	add	r2, sp, #352	@ 0x160
 8006b58:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8006b5c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8006b60:	a944      	add	r1, sp, #272	@ 0x110
 8006b62:	aa08      	add	r2, sp, #32
 8006b64:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006b68:	4694      	mov	ip, r2
 8006b6a:	4626      	mov	r6, r4
 8006b6c:	2e00      	cmp	r6, #0
 8006b6e:	f1a0 0004 	sub.w	r0, r0, #4
 8006b72:	dc4c      	bgt.n	8006c0e <__kernel_rem_pio2f+0x18a>
 8006b74:	4628      	mov	r0, r5
 8006b76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006b7a:	f000 f9f5 	bl	8006f68 <scalbnf>
 8006b7e:	eeb0 8a40 	vmov.f32	s16, s0
 8006b82:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8006b86:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006b8a:	f000 fa53 	bl	8007034 <floorf>
 8006b8e:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8006b92:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006b96:	2d00      	cmp	r5, #0
 8006b98:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b9c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006ba0:	ee17 9a90 	vmov	r9, s15
 8006ba4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ba8:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006bac:	dd41      	ble.n	8006c32 <__kernel_rem_pio2f+0x1ae>
 8006bae:	f104 3cff 	add.w	ip, r4, #4294967295
 8006bb2:	a908      	add	r1, sp, #32
 8006bb4:	f1c5 0e08 	rsb	lr, r5, #8
 8006bb8:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006bbc:	fa46 f00e 	asr.w	r0, r6, lr
 8006bc0:	4481      	add	r9, r0
 8006bc2:	fa00 f00e 	lsl.w	r0, r0, lr
 8006bc6:	1a36      	subs	r6, r6, r0
 8006bc8:	f1c5 0007 	rsb	r0, r5, #7
 8006bcc:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8006bd0:	4106      	asrs	r6, r0
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	dd3c      	ble.n	8006c50 <__kernel_rem_pio2f+0x1cc>
 8006bd6:	f04f 0e00 	mov.w	lr, #0
 8006bda:	f109 0901 	add.w	r9, r9, #1
 8006bde:	4670      	mov	r0, lr
 8006be0:	4574      	cmp	r4, lr
 8006be2:	dc68      	bgt.n	8006cb6 <__kernel_rem_pio2f+0x232>
 8006be4:	2d00      	cmp	r5, #0
 8006be6:	dd03      	ble.n	8006bf0 <__kernel_rem_pio2f+0x16c>
 8006be8:	2d01      	cmp	r5, #1
 8006bea:	d074      	beq.n	8006cd6 <__kernel_rem_pio2f+0x252>
 8006bec:	2d02      	cmp	r5, #2
 8006bee:	d07d      	beq.n	8006cec <__kernel_rem_pio2f+0x268>
 8006bf0:	2e02      	cmp	r6, #2
 8006bf2:	d12d      	bne.n	8006c50 <__kernel_rem_pio2f+0x1cc>
 8006bf4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006bf8:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006bfc:	b340      	cbz	r0, 8006c50 <__kernel_rem_pio2f+0x1cc>
 8006bfe:	4628      	mov	r0, r5
 8006c00:	9306      	str	r3, [sp, #24]
 8006c02:	f000 f9b1 	bl	8006f68 <scalbnf>
 8006c06:	9b06      	ldr	r3, [sp, #24]
 8006c08:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006c0c:	e020      	b.n	8006c50 <__kernel_rem_pio2f+0x1cc>
 8006c0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006c12:	3e01      	subs	r6, #1
 8006c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006c20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006c24:	ecac 0a01 	vstmia	ip!, {s0}
 8006c28:	ed90 0a00 	vldr	s0, [r0]
 8006c2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006c30:	e79c      	b.n	8006b6c <__kernel_rem_pio2f+0xe8>
 8006c32:	d105      	bne.n	8006c40 <__kernel_rem_pio2f+0x1bc>
 8006c34:	1e60      	subs	r0, r4, #1
 8006c36:	a908      	add	r1, sp, #32
 8006c38:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8006c3c:	11f6      	asrs	r6, r6, #7
 8006c3e:	e7c8      	b.n	8006bd2 <__kernel_rem_pio2f+0x14e>
 8006c40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006c44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4c:	da31      	bge.n	8006cb2 <__kernel_rem_pio2f+0x22e>
 8006c4e:	2600      	movs	r6, #0
 8006c50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006c54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c58:	f040 8098 	bne.w	8006d8c <__kernel_rem_pio2f+0x308>
 8006c5c:	1e60      	subs	r0, r4, #1
 8006c5e:	2200      	movs	r2, #0
 8006c60:	4550      	cmp	r0, sl
 8006c62:	da4b      	bge.n	8006cfc <__kernel_rem_pio2f+0x278>
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d065      	beq.n	8006d34 <__kernel_rem_pio2f+0x2b0>
 8006c68:	3c01      	subs	r4, #1
 8006c6a:	ab08      	add	r3, sp, #32
 8006c6c:	3d08      	subs	r5, #8
 8006c6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f8      	beq.n	8006c68 <__kernel_rem_pio2f+0x1e4>
 8006c76:	4628      	mov	r0, r5
 8006c78:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006c7c:	f000 f974 	bl	8006f68 <scalbnf>
 8006c80:	1c63      	adds	r3, r4, #1
 8006c82:	aa44      	add	r2, sp, #272	@ 0x110
 8006c84:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006d84 <__kernel_rem_pio2f+0x300>
 8006c88:	0099      	lsls	r1, r3, #2
 8006c8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8006c8e:	4623      	mov	r3, r4
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	f280 80a9 	bge.w	8006de8 <__kernel_rem_pio2f+0x364>
 8006c96:	4623      	mov	r3, r4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f2c0 80c7 	blt.w	8006e2c <__kernel_rem_pio2f+0x3a8>
 8006c9e:	aa44      	add	r2, sp, #272	@ 0x110
 8006ca0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006ca4:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8006d7c <__kernel_rem_pio2f+0x2f8>
 8006ca8:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006cac:	2000      	movs	r0, #0
 8006cae:	1ae2      	subs	r2, r4, r3
 8006cb0:	e0b1      	b.n	8006e16 <__kernel_rem_pio2f+0x392>
 8006cb2:	2602      	movs	r6, #2
 8006cb4:	e78f      	b.n	8006bd6 <__kernel_rem_pio2f+0x152>
 8006cb6:	f852 1b04 	ldr.w	r1, [r2], #4
 8006cba:	b948      	cbnz	r0, 8006cd0 <__kernel_rem_pio2f+0x24c>
 8006cbc:	b121      	cbz	r1, 8006cc8 <__kernel_rem_pio2f+0x244>
 8006cbe:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8006cc2:	f842 1c04 	str.w	r1, [r2, #-4]
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	f10e 0e01 	add.w	lr, lr, #1
 8006ccc:	4608      	mov	r0, r1
 8006cce:	e787      	b.n	8006be0 <__kernel_rem_pio2f+0x15c>
 8006cd0:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006cd4:	e7f5      	b.n	8006cc2 <__kernel_rem_pio2f+0x23e>
 8006cd6:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cda:	aa08      	add	r2, sp, #32
 8006cdc:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006ce4:	a908      	add	r1, sp, #32
 8006ce6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006cea:	e781      	b.n	8006bf0 <__kernel_rem_pio2f+0x16c>
 8006cec:	f104 3cff 	add.w	ip, r4, #4294967295
 8006cf0:	aa08      	add	r2, sp, #32
 8006cf2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006cf6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006cfa:	e7f3      	b.n	8006ce4 <__kernel_rem_pio2f+0x260>
 8006cfc:	a908      	add	r1, sp, #32
 8006cfe:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006d02:	3801      	subs	r0, #1
 8006d04:	430a      	orrs	r2, r1
 8006d06:	e7ab      	b.n	8006c60 <__kernel_rem_pio2f+0x1dc>
 8006d08:	3201      	adds	r2, #1
 8006d0a:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8006d0e:	2e00      	cmp	r6, #0
 8006d10:	d0fa      	beq.n	8006d08 <__kernel_rem_pio2f+0x284>
 8006d12:	9905      	ldr	r1, [sp, #20]
 8006d14:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006d18:	eb0d 0001 	add.w	r0, sp, r1
 8006d1c:	18e6      	adds	r6, r4, r3
 8006d1e:	a91c      	add	r1, sp, #112	@ 0x70
 8006d20:	f104 0c01 	add.w	ip, r4, #1
 8006d24:	384c      	subs	r0, #76	@ 0x4c
 8006d26:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006d2a:	4422      	add	r2, r4
 8006d2c:	4562      	cmp	r2, ip
 8006d2e:	da04      	bge.n	8006d3a <__kernel_rem_pio2f+0x2b6>
 8006d30:	4614      	mov	r4, r2
 8006d32:	e70e      	b.n	8006b52 <__kernel_rem_pio2f+0xce>
 8006d34:	9804      	ldr	r0, [sp, #16]
 8006d36:	2201      	movs	r2, #1
 8006d38:	e7e7      	b.n	8006d0a <__kernel_rem_pio2f+0x286>
 8006d3a:	9903      	ldr	r1, [sp, #12]
 8006d3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006d40:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8006d44:	9105      	str	r1, [sp, #20]
 8006d46:	ee07 1a90 	vmov	s15, r1
 8006d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d4e:	2400      	movs	r4, #0
 8006d50:	ece6 7a01 	vstmia	r6!, {s15}
 8006d54:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006d58:	46b1      	mov	r9, r6
 8006d5a:	455c      	cmp	r4, fp
 8006d5c:	dd04      	ble.n	8006d68 <__kernel_rem_pio2f+0x2e4>
 8006d5e:	ece0 7a01 	vstmia	r0!, {s15}
 8006d62:	f10c 0c01 	add.w	ip, ip, #1
 8006d66:	e7e1      	b.n	8006d2c <__kernel_rem_pio2f+0x2a8>
 8006d68:	ecfe 6a01 	vldmia	lr!, {s13}
 8006d6c:	ed39 7a01 	vldmdb	r9!, {s14}
 8006d70:	3401      	adds	r4, #1
 8006d72:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d76:	e7f0      	b.n	8006d5a <__kernel_rem_pio2f+0x2d6>
 8006d78:	0800755c 	.word	0x0800755c
 8006d7c:	08007530 	.word	0x08007530
 8006d80:	43800000 	.word	0x43800000
 8006d84:	3b800000 	.word	0x3b800000
 8006d88:	00000000 	.word	0x00000000
 8006d8c:	9b02      	ldr	r3, [sp, #8]
 8006d8e:	eeb0 0a48 	vmov.f32	s0, s16
 8006d92:	eba3 0008 	sub.w	r0, r3, r8
 8006d96:	f000 f8e7 	bl	8006f68 <scalbnf>
 8006d9a:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8006d80 <__kernel_rem_pio2f+0x2fc>
 8006d9e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da6:	db19      	blt.n	8006ddc <__kernel_rem_pio2f+0x358>
 8006da8:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8006d84 <__kernel_rem_pio2f+0x300>
 8006dac:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006db0:	aa08      	add	r2, sp, #32
 8006db2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006db6:	3508      	adds	r5, #8
 8006db8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dbc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006dc8:	ee10 3a10 	vmov	r3, s0
 8006dcc:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006dd0:	ee17 3a90 	vmov	r3, s15
 8006dd4:	3401      	adds	r4, #1
 8006dd6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006dda:	e74c      	b.n	8006c76 <__kernel_rem_pio2f+0x1f2>
 8006ddc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006de0:	aa08      	add	r2, sp, #32
 8006de2:	ee10 3a10 	vmov	r3, s0
 8006de6:	e7f6      	b.n	8006dd6 <__kernel_rem_pio2f+0x352>
 8006de8:	a808      	add	r0, sp, #32
 8006dea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006dee:	9001      	str	r0, [sp, #4]
 8006df0:	ee07 0a90 	vmov	s15, r0
 8006df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006dfe:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006e02:	ed62 7a01 	vstmdb	r2!, {s15}
 8006e06:	e743      	b.n	8006c90 <__kernel_rem_pio2f+0x20c>
 8006e08:	ecfc 6a01 	vldmia	ip!, {s13}
 8006e0c:	ecb5 7a01 	vldmia	r5!, {s14}
 8006e10:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006e14:	3001      	adds	r0, #1
 8006e16:	4550      	cmp	r0, sl
 8006e18:	dc01      	bgt.n	8006e1e <__kernel_rem_pio2f+0x39a>
 8006e1a:	4282      	cmp	r2, r0
 8006e1c:	daf4      	bge.n	8006e08 <__kernel_rem_pio2f+0x384>
 8006e1e:	a858      	add	r0, sp, #352	@ 0x160
 8006e20:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006e24:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	e735      	b.n	8006c98 <__kernel_rem_pio2f+0x214>
 8006e2c:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	dc09      	bgt.n	8006e46 <__kernel_rem_pio2f+0x3c2>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dc2b      	bgt.n	8006e8e <__kernel_rem_pio2f+0x40a>
 8006e36:	d044      	beq.n	8006ec2 <__kernel_rem_pio2f+0x43e>
 8006e38:	f009 0007 	and.w	r0, r9, #7
 8006e3c:	b059      	add	sp, #356	@ 0x164
 8006e3e:	ecbd 8b04 	vpop	{d8-d9}
 8006e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e46:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8006e48:	2b03      	cmp	r3, #3
 8006e4a:	d1f5      	bne.n	8006e38 <__kernel_rem_pio2f+0x3b4>
 8006e4c:	aa30      	add	r2, sp, #192	@ 0xc0
 8006e4e:	1f0b      	subs	r3, r1, #4
 8006e50:	4413      	add	r3, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4620      	mov	r0, r4
 8006e56:	2800      	cmp	r0, #0
 8006e58:	f1a2 0204 	sub.w	r2, r2, #4
 8006e5c:	dc52      	bgt.n	8006f04 <__kernel_rem_pio2f+0x480>
 8006e5e:	4622      	mov	r2, r4
 8006e60:	2a01      	cmp	r2, #1
 8006e62:	f1a3 0304 	sub.w	r3, r3, #4
 8006e66:	dc5d      	bgt.n	8006f24 <__kernel_rem_pio2f+0x4a0>
 8006e68:	ab30      	add	r3, sp, #192	@ 0xc0
 8006e6a:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006e6e:	440b      	add	r3, r1
 8006e70:	2c01      	cmp	r4, #1
 8006e72:	dc67      	bgt.n	8006f44 <__kernel_rem_pio2f+0x4c0>
 8006e74:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8006e78:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8006e7c:	2e00      	cmp	r6, #0
 8006e7e:	d167      	bne.n	8006f50 <__kernel_rem_pio2f+0x4cc>
 8006e80:	edc7 6a00 	vstr	s13, [r7]
 8006e84:	ed87 7a01 	vstr	s14, [r7, #4]
 8006e88:	edc7 7a02 	vstr	s15, [r7, #8]
 8006e8c:	e7d4      	b.n	8006e38 <__kernel_rem_pio2f+0x3b4>
 8006e8e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006e90:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006e94:	440b      	add	r3, r1
 8006e96:	4622      	mov	r2, r4
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	da24      	bge.n	8006ee6 <__kernel_rem_pio2f+0x462>
 8006e9c:	b34e      	cbz	r6, 8006ef2 <__kernel_rem_pio2f+0x46e>
 8006e9e:	eef1 7a47 	vneg.f32	s15, s14
 8006ea2:	edc7 7a00 	vstr	s15, [r7]
 8006ea6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8006eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eae:	aa31      	add	r2, sp, #196	@ 0xc4
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	429c      	cmp	r4, r3
 8006eb4:	da20      	bge.n	8006ef8 <__kernel_rem_pio2f+0x474>
 8006eb6:	b10e      	cbz	r6, 8006ebc <__kernel_rem_pio2f+0x438>
 8006eb8:	eef1 7a67 	vneg.f32	s15, s15
 8006ebc:	edc7 7a01 	vstr	s15, [r7, #4]
 8006ec0:	e7ba      	b.n	8006e38 <__kernel_rem_pio2f+0x3b4>
 8006ec2:	ab30      	add	r3, sp, #192	@ 0xc0
 8006ec4:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 8006d88 <__kernel_rem_pio2f+0x304>
 8006ec8:	440b      	add	r3, r1
 8006eca:	2c00      	cmp	r4, #0
 8006ecc:	da05      	bge.n	8006eda <__kernel_rem_pio2f+0x456>
 8006ece:	b10e      	cbz	r6, 8006ed4 <__kernel_rem_pio2f+0x450>
 8006ed0:	eef1 7a67 	vneg.f32	s15, s15
 8006ed4:	edc7 7a00 	vstr	s15, [r7]
 8006ed8:	e7ae      	b.n	8006e38 <__kernel_rem_pio2f+0x3b4>
 8006eda:	ed33 7a01 	vldmdb	r3!, {s14}
 8006ede:	3c01      	subs	r4, #1
 8006ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006ee4:	e7f1      	b.n	8006eca <__kernel_rem_pio2f+0x446>
 8006ee6:	ed73 7a01 	vldmdb	r3!, {s15}
 8006eea:	3a01      	subs	r2, #1
 8006eec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ef0:	e7d2      	b.n	8006e98 <__kernel_rem_pio2f+0x414>
 8006ef2:	eef0 7a47 	vmov.f32	s15, s14
 8006ef6:	e7d4      	b.n	8006ea2 <__kernel_rem_pio2f+0x41e>
 8006ef8:	ecb2 7a01 	vldmia	r2!, {s14}
 8006efc:	3301      	adds	r3, #1
 8006efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f02:	e7d6      	b.n	8006eb2 <__kernel_rem_pio2f+0x42e>
 8006f04:	edd2 7a00 	vldr	s15, [r2]
 8006f08:	edd2 6a01 	vldr	s13, [r2, #4]
 8006f0c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006f10:	3801      	subs	r0, #1
 8006f12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f16:	ed82 7a00 	vstr	s14, [r2]
 8006f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f1e:	edc2 7a01 	vstr	s15, [r2, #4]
 8006f22:	e798      	b.n	8006e56 <__kernel_rem_pio2f+0x3d2>
 8006f24:	edd3 7a00 	vldr	s15, [r3]
 8006f28:	edd3 6a01 	vldr	s13, [r3, #4]
 8006f2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006f30:	3a01      	subs	r2, #1
 8006f32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006f36:	ed83 7a00 	vstr	s14, [r3]
 8006f3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f3e:	edc3 7a01 	vstr	s15, [r3, #4]
 8006f42:	e78d      	b.n	8006e60 <__kernel_rem_pio2f+0x3dc>
 8006f44:	ed33 7a01 	vldmdb	r3!, {s14}
 8006f48:	3c01      	subs	r4, #1
 8006f4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f4e:	e78f      	b.n	8006e70 <__kernel_rem_pio2f+0x3ec>
 8006f50:	eef1 6a66 	vneg.f32	s13, s13
 8006f54:	eeb1 7a47 	vneg.f32	s14, s14
 8006f58:	edc7 6a00 	vstr	s13, [r7]
 8006f5c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006f60:	eef1 7a67 	vneg.f32	s15, s15
 8006f64:	e790      	b.n	8006e88 <__kernel_rem_pio2f+0x404>
 8006f66:	bf00      	nop

08006f68 <scalbnf>:
 8006f68:	ee10 3a10 	vmov	r3, s0
 8006f6c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006f70:	d02b      	beq.n	8006fca <scalbnf+0x62>
 8006f72:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8006f76:	d302      	bcc.n	8006f7e <scalbnf+0x16>
 8006f78:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006f7c:	4770      	bx	lr
 8006f7e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8006f82:	d123      	bne.n	8006fcc <scalbnf+0x64>
 8006f84:	4b24      	ldr	r3, [pc, #144]	@ (8007018 <scalbnf+0xb0>)
 8006f86:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800701c <scalbnf+0xb4>
 8006f8a:	4298      	cmp	r0, r3
 8006f8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006f90:	db17      	blt.n	8006fc2 <scalbnf+0x5a>
 8006f92:	ee10 3a10 	vmov	r3, s0
 8006f96:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006f9a:	3a19      	subs	r2, #25
 8006f9c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006fa0:	4288      	cmp	r0, r1
 8006fa2:	dd15      	ble.n	8006fd0 <scalbnf+0x68>
 8006fa4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8007020 <scalbnf+0xb8>
 8006fa8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8007024 <scalbnf+0xbc>
 8006fac:	ee10 3a10 	vmov	r3, s0
 8006fb0:	eeb0 7a67 	vmov.f32	s14, s15
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	eef0 7a66 	vmovlt.f32	s15, s13
 8006fbc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006fc0:	4770      	bx	lr
 8006fc2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007028 <scalbnf+0xc0>
 8006fc6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006fca:	4770      	bx	lr
 8006fcc:	0dd2      	lsrs	r2, r2, #23
 8006fce:	e7e5      	b.n	8006f9c <scalbnf+0x34>
 8006fd0:	4410      	add	r0, r2
 8006fd2:	28fe      	cmp	r0, #254	@ 0xfe
 8006fd4:	dce6      	bgt.n	8006fa4 <scalbnf+0x3c>
 8006fd6:	2800      	cmp	r0, #0
 8006fd8:	dd06      	ble.n	8006fe8 <scalbnf+0x80>
 8006fda:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fde:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006fe2:	ee00 3a10 	vmov	s0, r3
 8006fe6:	4770      	bx	lr
 8006fe8:	f110 0f16 	cmn.w	r0, #22
 8006fec:	da09      	bge.n	8007002 <scalbnf+0x9a>
 8006fee:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8007028 <scalbnf+0xc0>
 8006ff2:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800702c <scalbnf+0xc4>
 8006ff6:	ee10 3a10 	vmov	r3, s0
 8006ffa:	eeb0 7a67 	vmov.f32	s14, s15
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	e7d9      	b.n	8006fb6 <scalbnf+0x4e>
 8007002:	3019      	adds	r0, #25
 8007004:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8007008:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800700c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8007030 <scalbnf+0xc8>
 8007010:	ee07 3a90 	vmov	s15, r3
 8007014:	e7d7      	b.n	8006fc6 <scalbnf+0x5e>
 8007016:	bf00      	nop
 8007018:	ffff3cb0 	.word	0xffff3cb0
 800701c:	4c000000 	.word	0x4c000000
 8007020:	7149f2ca 	.word	0x7149f2ca
 8007024:	f149f2ca 	.word	0xf149f2ca
 8007028:	0da24260 	.word	0x0da24260
 800702c:	8da24260 	.word	0x8da24260
 8007030:	33000000 	.word	0x33000000

08007034 <floorf>:
 8007034:	ee10 3a10 	vmov	r3, s0
 8007038:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800703c:	3a7f      	subs	r2, #127	@ 0x7f
 800703e:	2a16      	cmp	r2, #22
 8007040:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007044:	dc2b      	bgt.n	800709e <floorf+0x6a>
 8007046:	2a00      	cmp	r2, #0
 8007048:	da12      	bge.n	8007070 <floorf+0x3c>
 800704a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80070b0 <floorf+0x7c>
 800704e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007052:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	dd06      	ble.n	800706a <floorf+0x36>
 800705c:	2b00      	cmp	r3, #0
 800705e:	da24      	bge.n	80070aa <floorf+0x76>
 8007060:	2900      	cmp	r1, #0
 8007062:	4b14      	ldr	r3, [pc, #80]	@ (80070b4 <floorf+0x80>)
 8007064:	bf08      	it	eq
 8007066:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800706a:	ee00 3a10 	vmov	s0, r3
 800706e:	4770      	bx	lr
 8007070:	4911      	ldr	r1, [pc, #68]	@ (80070b8 <floorf+0x84>)
 8007072:	4111      	asrs	r1, r2
 8007074:	420b      	tst	r3, r1
 8007076:	d0fa      	beq.n	800706e <floorf+0x3a>
 8007078:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80070b0 <floorf+0x7c>
 800707c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007080:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007088:	ddef      	ble.n	800706a <floorf+0x36>
 800708a:	2b00      	cmp	r3, #0
 800708c:	bfbe      	ittt	lt
 800708e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8007092:	fa40 f202 	asrlt.w	r2, r0, r2
 8007096:	189b      	addlt	r3, r3, r2
 8007098:	ea23 0301 	bic.w	r3, r3, r1
 800709c:	e7e5      	b.n	800706a <floorf+0x36>
 800709e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80070a2:	d3e4      	bcc.n	800706e <floorf+0x3a>
 80070a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070a8:	4770      	bx	lr
 80070aa:	2300      	movs	r3, #0
 80070ac:	e7dd      	b.n	800706a <floorf+0x36>
 80070ae:	bf00      	nop
 80070b0:	7149f2ca 	.word	0x7149f2ca
 80070b4:	bf800000 	.word	0xbf800000
 80070b8:	007fffff 	.word	0x007fffff

080070bc <_init>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr

080070c8 <_fini>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr
