
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080080c4  080080c4  000090c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008234  08008234  0000a060  2**0
                  CONTENTS
  4 .ARM          00000008  08008234  08008234  00009234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800823c  0800823c  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800823c  0800823c  0000923c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008240  08008240  00009240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008244  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006550  20000060  080082a4  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200065b0  080082a4  0000a5b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c82  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a99  00000000  00000000  00023d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  000277b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000115b  00000000  00000000  00028e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002522f  00000000  00000000  00029f63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a648  00000000  00000000  0004f192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8399  00000000  00000000  000697da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00151b73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  00151bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00157eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080ac 	.word	0x080080ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080080ac 	.word	0x080080ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_ADC_ConvHalfCpltCallback>:


	}

	// Called when the **first half** of the DMA buffer is filled
	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d102      	bne.n	80005c8 <HAL_ADC_ConvHalfCpltCallback+0x18>
	        send_first_half = 1;
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40012000 	.word	0x40012000
 80005d8:	2000187c 	.word	0x2000187c

080005dc <HAL_ADC_ConvCpltCallback>:

	// Called when the **second half** is filled (full transfer complete)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <HAL_ADC_ConvCpltCallback+0x24>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d102      	bne.n	80005f4 <HAL_ADC_ConvCpltCallback+0x18>
	        // Process the second half of the buffer
	    	send_second_half = 1;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_ADC_ConvCpltCallback+0x28>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40012000 	.word	0x40012000
 8000604:	2000187d 	.word	0x2000187d

08000608 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 8000608:	b40f      	push	{r0, r1, r2, r3}
 800060a:	b580      	push	{r7, lr}
 800060c:	b084      	sub	sp, #16
 800060e:	af00      	add	r7, sp, #0

	osStatus res = osMutexWait(USART_lockHandle, 1000);
 8000610:	4b16      	ldr	r3, [pc, #88]	@ (800066c <myprintf+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000618:	4618      	mov	r0, r3
 800061a:	f003 fe9a 	bl	8004352 <osMutexAcquire>
 800061e:	60f8      	str	r0, [r7, #12]

	if(res == osOK){
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d116      	bne.n	8000654 <myprintf+0x4c>

  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000634:	480e      	ldr	r0, [pc, #56]	@ (8000670 <myprintf+0x68>)
 8000636:	f007 f8ab 	bl	8007790 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800063a:	480d      	ldr	r0, [pc, #52]	@ (8000670 <myprintf+0x68>)
 800063c:	f7ff fde8 	bl	8000210 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	b29a      	uxth	r2, r3
 8000648:	f04f 33ff 	mov.w	r3, #4294967295
 800064c:	4908      	ldr	r1, [pc, #32]	@ (8000670 <myprintf+0x68>)
 800064e:	4809      	ldr	r0, [pc, #36]	@ (8000674 <myprintf+0x6c>)
 8000650:	f003 f902 	bl	8003858 <HAL_UART_Transmit>

	}

	osMutexRelease(USART_lockHandle);
 8000654:	4b05      	ldr	r3, [pc, #20]	@ (800066c <myprintf+0x64>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4618      	mov	r0, r3
 800065a:	f003 fec5 	bl	80043e8 <osMutexRelease>

}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000668:	b004      	add	sp, #16
 800066a:	4770      	bx	lr
 800066c:	200019c4 	.word	0x200019c4
 8000670:	200019c8 	.word	0x200019c8
 8000674:	20001970 	.word	0x20001970

08000678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800067c:	f000 fc5e 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000680:	f000 f844 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000684:	f000 f996 	bl	80009b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000688:	f000 f974 	bl	8000974 <MX_DMA_Init>
  MX_ADC1_Init();
 800068c:	f000 f8aa 	bl	80007e4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000690:	f000 f946 	bl	8000920 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000694:	f000 f8f8 	bl	8000888 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000698:	f003 fcde 	bl	8004058 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of USART_lock */
  USART_lockHandle = osMutexNew(&USART_lock_attributes);
 800069c:	4811      	ldr	r0, [pc, #68]	@ (80006e4 <main+0x6c>)
 800069e:	f003 fdd2 	bl	8004246 <osMutexNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a10      	ldr	r2, [pc, #64]	@ (80006e8 <main+0x70>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ADC_Out */
  ADC_OutHandle = osMessageQueueNew (1024, sizeof(uint16_t), &ADC_Out_attributes);
 80006a8:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <main+0x74>)
 80006aa:	2102      	movs	r1, #2
 80006ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80006b0:	f003 fed7 	bl	8004462 <osMessageQueueNew>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <main+0x78>)
 80006b8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PCM1802_ADC */
  PCM1802_ADCHandle = osThreadNew(Start_ADC, NULL, &PCM1802_ADC_attributes);
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <main+0x7c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	480e      	ldr	r0, [pc, #56]	@ (80006f8 <main+0x80>)
 80006c0:	f003 fd14 	bl	80040ec <osThreadNew>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <main+0x84>)
 80006c8:	6013      	str	r3, [r2, #0]

  /* creation of ProcessData */
  ProcessDataHandle = osThreadNew(Start_Process_Data, NULL, &ProcessData_attributes);
 80006ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000700 <main+0x88>)
 80006cc:	2100      	movs	r1, #0
 80006ce:	480d      	ldr	r0, [pc, #52]	@ (8000704 <main+0x8c>)
 80006d0:	f003 fd0c 	bl	80040ec <osThreadNew>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <main+0x90>)
 80006d8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006da:	f003 fce1 	bl	80040a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006de:	bf00      	nop
 80006e0:	e7fd      	b.n	80006de <main+0x66>
 80006e2:	bf00      	nop
 80006e4:	080081d0 	.word	0x080081d0
 80006e8:	200019c4 	.word	0x200019c4
 80006ec:	080081b8 	.word	0x080081b8
 80006f0:	200019c0 	.word	0x200019c0
 80006f4:	08008170 	.word	0x08008170
 80006f8:	080009e9 	.word	0x080009e9
 80006fc:	200019b8 	.word	0x200019b8
 8000700:	08008194 	.word	0x08008194
 8000704:	08000a65 	.word	0x08000a65
 8000708:	200019bc 	.word	0x200019bc

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	@ 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2234      	movs	r2, #52	@ 0x34
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f007 f846 	bl	80077ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	4b29      	ldr	r3, [pc, #164]	@ (80007dc <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	4a28      	ldr	r2, [pc, #160]	@ (80007dc <SystemClock_Config+0xd0>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <SystemClock_Config+0xd4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000768:	603b      	str	r3, [r7, #0]
 800076a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800076c:	2302      	movs	r3, #2
 800076e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000770:	2301      	movs	r3, #1
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000774:	2310      	movs	r3, #16
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000778:	2302      	movs	r3, #2
 800077a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800077c:	2300      	movs	r3, #0
 800077e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000780:	2308      	movs	r3, #8
 8000782:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000784:	2360      	movs	r3, #96	@ 0x60
 8000786:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000788:	2302      	movs	r3, #2
 800078a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000790:	2302      	movs	r3, #2
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 031c 	add.w	r3, r7, #28
 8000798:	4618      	mov	r0, r3
 800079a:	f002 f8ff 	bl	800299c <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a4:	f000 f99c 	bl	8000ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	2101      	movs	r1, #1
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fdf3 	bl	80023b0 <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007d0:	f000 f986 	bl	8000ae0 <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	@ 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ea:	463b      	mov	r3, r7
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007f6:	4b22      	ldr	r3, [pc, #136]	@ (8000880 <MX_ADC1_Init+0x9c>)
 80007f8:	4a22      	ldr	r2, [pc, #136]	@ (8000884 <MX_ADC1_Init+0xa0>)
 80007fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007fc:	4b20      	ldr	r3, [pc, #128]	@ (8000880 <MX_ADC1_Init+0x9c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000802:	4b1f      	ldr	r3, [pc, #124]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000808:	4b1d      	ldr	r3, [pc, #116]	@ (8000880 <MX_ADC1_Init+0x9c>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800080e:	4b1c      	ldr	r3, [pc, #112]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000810:	2200      	movs	r2, #0
 8000812:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000814:	4b1a      	ldr	r3, [pc, #104]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000816:	2200      	movs	r2, #0
 8000818:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800081c:	4b18      	ldr	r3, [pc, #96]	@ (8000880 <MX_ADC1_Init+0x9c>)
 800081e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000822:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000824:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000826:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800082c:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ADC1_Init+0x9c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000834:	2201      	movs	r2, #1
 8000836:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000838:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_ADC1_Init+0x9c>)
 800083a:	2201      	movs	r2, #1
 800083c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000842:	2201      	movs	r2, #1
 8000844:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000846:	480e      	ldr	r0, [pc, #56]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000848:	f000 fbba 	bl	8000fc0 <HAL_ADC_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000852:	f000 f945 	bl	8000ae0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	@ (8000880 <MX_ADC1_Init+0x9c>)
 8000868:	f000 fd0c 	bl	8001284 <HAL_ADC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000872:	f000 f935 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20001880 	.word	0x20001880
 8000884:	40012000 	.word	0x40012000

08000888 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b086      	sub	sp, #24
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800089c:	463b      	mov	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008a4:	4b1d      	ldr	r3, [pc, #116]	@ (800091c <MX_TIM2_Init+0x94>)
 80008a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008ac:	4b1b      	ldr	r3, [pc, #108]	@ (800091c <MX_TIM2_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b2:	4b1a      	ldr	r3, [pc, #104]	@ (800091c <MX_TIM2_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80008b8:	4b18      	ldr	r3, [pc, #96]	@ (800091c <MX_TIM2_Init+0x94>)
 80008ba:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80008be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c0:	4b16      	ldr	r3, [pc, #88]	@ (800091c <MX_TIM2_Init+0x94>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008c6:	4b15      	ldr	r3, [pc, #84]	@ (800091c <MX_TIM2_Init+0x94>)
 80008c8:	2280      	movs	r2, #128	@ 0x80
 80008ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008cc:	4813      	ldr	r0, [pc, #76]	@ (800091c <MX_TIM2_Init+0x94>)
 80008ce:	f002 fb03 	bl	8002ed8 <HAL_TIM_Base_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008d8:	f000 f902 	bl	8000ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e2:	f107 0308 	add.w	r3, r7, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_TIM2_Init+0x94>)
 80008ea:	f002 fca5 	bl	8003238 <HAL_TIM_ConfigClockSource>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008f4:	f000 f8f4 	bl	8000ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008f8:	2320      	movs	r3, #32
 80008fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000900:	463b      	mov	r3, r7
 8000902:	4619      	mov	r1, r3
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <MX_TIM2_Init+0x94>)
 8000906:	f002 fec7 	bl	8003698 <HAL_TIMEx_MasterConfigSynchronization>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000910:	f000 f8e6 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20001928 	.word	0x20001928

08000920 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000924:	4b11      	ldr	r3, [pc, #68]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	@ (8000970 <MX_USART2_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 800092c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000930:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_USART2_UART_Init+0x4c>)
 8000958:	f002 ff2e 	bl	80037b8 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f000 f8bd 	bl	8000ae0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20001970 	.word	0x20001970
 8000970:	40004400 	.word	0x40004400

08000974 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
 800097e:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_DMA_Init+0x3c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	4a0b      	ldr	r2, [pc, #44]	@ (80009b0 <MX_DMA_Init+0x3c>)
 8000984:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000988:	6313      	str	r3, [r2, #48]	@ 0x30
 800098a:	4b09      	ldr	r3, [pc, #36]	@ (80009b0 <MX_DMA_Init+0x3c>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000992:	607b      	str	r3, [r7, #4]
 8000994:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	2105      	movs	r1, #5
 800099a:	2038      	movs	r0, #56	@ 0x38
 800099c:	f000 ffda 	bl	8001954 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009a0:	2038      	movs	r0, #56	@ 0x38
 80009a2:	f000 fff3 	bl	800198c <HAL_NVIC_EnableIRQ>

}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <MX_GPIO_Init+0x30>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <MX_GPIO_Init+0x30>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <MX_GPIO_Init+0x30>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800

080009e8 <Start_ADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_ADC */
void Start_ADC(void *argument)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  osStatus_t status;
  uint8_t i;

  myprintf("Start of start adc\n");
 80009f0:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <Start_ADC+0x64>)
 80009f2:	f7ff fe09 	bl	8000608 <myprintf>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80009f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009fa:	4915      	ldr	r1, [pc, #84]	@ (8000a50 <Start_ADC+0x68>)
 80009fc:	4815      	ldr	r0, [pc, #84]	@ (8000a54 <Start_ADC+0x6c>)
 80009fe:	f000 fb23 	bl	8001048 <HAL_ADC_Start_DMA>
  for(;;)
  {


	//recieves data to process
	if(send_first_half == 1){
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <Start_ADC+0x70>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d11b      	bne.n	8000a42 <Start_ADC+0x5a>


	for(i = 0; i < TX_BUF_LEN; i++){
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73fb      	strb	r3, [r7, #15]
	status = osMessageQueuePut(ADC_OutHandle, &adc_buf[i], 0, 1000);
 8000a0e:	4b13      	ldr	r3, [pc, #76]	@ (8000a5c <Start_ADC+0x74>)
 8000a10:	6818      	ldr	r0, [r3, #0]
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4a0e      	ldr	r2, [pc, #56]	@ (8000a50 <Start_ADC+0x68>)
 8000a18:	1899      	adds	r1, r3, r2
 8000a1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a1e:	2200      	movs	r2, #0
 8000a20:	f003 fd92 	bl	8004548 <osMessageQueuePut>
 8000a24:	60b8      	str	r0, [r7, #8]

	if(status != osOK){
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d003      	beq.n	8000a34 <Start_ADC+0x4c>
		//print error message
		myprintf("Error in OS Message : %d\n", status);
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	480c      	ldr	r0, [pc, #48]	@ (8000a60 <Start_ADC+0x78>)
 8000a30:	f7ff fdea 	bl	8000608 <myprintf>
	}

	   send_first_half = 0;
 8000a34:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <Start_ADC+0x70>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < TX_BUF_LEN; i++){
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
	status = osMessageQueuePut(ADC_OutHandle, &adc_buf[i], 0, 1000);
 8000a40:	e7e5      	b.n	8000a0e <Start_ADC+0x26>
	}
		//complete tx buffer send

	}

    osDelay(10);
 8000a42:	200a      	movs	r0, #10
 8000a44:	f003 fbe4 	bl	8004210 <osDelay>
	if(send_first_half == 1){
 8000a48:	e7db      	b.n	8000a02 <Start_ADC+0x1a>
 8000a4a:	bf00      	nop
 8000a4c:	080080f0 	.word	0x080080f0
 8000a50:	2000007c 	.word	0x2000007c
 8000a54:	20001880 	.word	0x20001880
 8000a58:	2000187c 	.word	0x2000187c
 8000a5c:	200019c0 	.word	0x200019c0
 8000a60:	08008104 	.word	0x08008104

08000a64 <Start_Process_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Process_Data */
void Start_Process_Data(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Process_Data */
	 osStatus_t status;
	 uint8_t i;

	 myprintf("Start of process data\n");
 8000a6c:	480f      	ldr	r0, [pc, #60]	@ (8000aac <Start_Process_Data+0x48>)
 8000a6e:	f7ff fdcb 	bl	8000608 <myprintf>
  /* Infinite loop */
  for(;;)
  {
		for(i = 0; i < TX_BUF_LEN; i++){
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
		status = osMessageQueueGet(ADC_OutHandle, &rx_buf[i], 0, osWaitForever);
 8000a76:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab0 <Start_Process_Data+0x4c>)
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <Start_Process_Data+0x50>)
 8000a80:	1899      	adds	r1, r3, r2
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	2200      	movs	r2, #0
 8000a88:	f003 fdbe 	bl	8004608 <osMessageQueueGet>
 8000a8c:	60b8      	str	r0, [r7, #8]

		if(status != 0){
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d003      	beq.n	8000a9c <Start_Process_Data+0x38>
			myprintf("Error in OS Message get: %d\n", status);
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <Start_Process_Data+0x54>)
 8000a98:	f7ff fdb6 	bl	8000608 <myprintf>
		}

    osDelay(10000);
 8000a9c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8000aa0:	f003 fbb6 	bl	8004210 <osDelay>
		for(i = 0; i < TX_BUF_LEN; i++){
 8000aa4:	7bfb      	ldrb	r3, [r7, #15]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	73fb      	strb	r3, [r7, #15]
		status = osMessageQueueGet(ADC_OutHandle, &rx_buf[i], 0, osWaitForever);
 8000aaa:	e7e4      	b.n	8000a76 <Start_Process_Data+0x12>
 8000aac:	08008120 	.word	0x08008120
 8000ab0:	200019c0 	.word	0x200019c0
 8000ab4:	2000107c 	.word	0x2000107c
 8000ab8:	08008138 	.word	0x08008138

08000abc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ace:	f000 fa57 	bl	8000f80 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010000 	.word	0x40010000

08000ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae4:	b672      	cpsid	i
}
 8000ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	607b      	str	r3, [r7, #4]
 8000af6:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <HAL_MspInit+0x54>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	4a11      	ldr	r2, [pc, #68]	@ (8000b40 <HAL_MspInit+0x54>)
 8000afc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b02:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <HAL_MspInit+0x54>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	603b      	str	r3, [r7, #0]
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <HAL_MspInit+0x54>)
 8000b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <HAL_MspInit+0x54>)
 8000b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <HAL_MspInit+0x54>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b26:	603b      	str	r3, [r7, #0]
 8000b28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	210f      	movs	r1, #15
 8000b2e:	f06f 0001 	mvn.w	r0, #1
 8000b32:	f000 ff0f 	bl	8001954 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40023800 	.word	0x40023800

08000b44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
 8000b56:	609a      	str	r2, [r3, #8]
 8000b58:	60da      	str	r2, [r3, #12]
 8000b5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a33      	ldr	r2, [pc, #204]	@ (8000c30 <HAL_ADC_MspInit+0xec>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d160      	bne.n	8000c28 <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b32      	ldr	r3, [pc, #200]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	4a31      	ldr	r2, [pc, #196]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b74:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b28      	ldr	r3, [pc, #160]	@ (8000c34 <HAL_ADC_MspInit+0xf0>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ba2:	2303      	movs	r3, #3
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4821      	ldr	r0, [pc, #132]	@ (8000c38 <HAL_ADC_MspInit+0xf4>)
 8000bb2:	f001 fa69 	bl	8002088 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bb8:	4a21      	ldr	r2, [pc, #132]	@ (8000c40 <HAL_ADC_MspInit+0xfc>)
 8000bba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bce:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bd4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bd8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bdc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bde:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000be0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000be8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bec:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bee:	4b13      	ldr	r3, [pc, #76]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bf4:	4b11      	ldr	r3, [pc, #68]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bfa:	4b10      	ldr	r3, [pc, #64]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0c:	480b      	ldr	r0, [pc, #44]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000c0e:	f000 fecb 	bl	80019a8 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000c18:	f7ff ff62 	bl	8000ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000c20:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c22:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_ADC_MspInit+0xf8>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	@ 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40012000 	.word	0x40012000
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000
 8000c3c:	200018c8 	.word	0x200018c8
 8000c40:	40026410 	.word	0x40026410

08000c44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c54:	d10d      	bne.n	8000c72 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_TIM_Base_MspInit+0x3c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000c72:	bf00      	nop
 8000c74:	3714      	adds	r7, #20
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08a      	sub	sp, #40	@ 0x28
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a19      	ldr	r2, [pc, #100]	@ (8000d08 <HAL_UART_MspInit+0x84>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d12b      	bne.n	8000cfe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	4b18      	ldr	r3, [pc, #96]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	4a17      	ldr	r2, [pc, #92]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb6:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	4b11      	ldr	r3, [pc, #68]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a10      	ldr	r2, [pc, #64]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <HAL_UART_MspInit+0x88>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60fb      	str	r3, [r7, #12]
 8000cdc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cde:	230c      	movs	r3, #12
 8000ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cea:	2303      	movs	r3, #3
 8000cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <HAL_UART_MspInit+0x8c>)
 8000cfa:	f001 f9c5 	bl	8002088 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	@ 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40004400 	.word	0x40004400
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000

08000d14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08c      	sub	sp, #48	@ 0x30
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000d24:	2300      	movs	r3, #0
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	4b2e      	ldr	r3, [pc, #184]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d34:	4b2b      	ldr	r3, [pc, #172]	@ (8000de4 <HAL_InitTick+0xd0>)
 8000d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d40:	f107 020c 	add.w	r2, r7, #12
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4611      	mov	r1, r2
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f001 fc4a 	bl	80025e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000d50:	f001 fc34 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8000d54:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d58:	4a23      	ldr	r2, [pc, #140]	@ (8000de8 <HAL_InitTick+0xd4>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	0c9b      	lsrs	r3, r3, #18
 8000d60:	3b01      	subs	r3, #1
 8000d62:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d66:	4a22      	ldr	r2, [pc, #136]	@ (8000df0 <HAL_InitTick+0xdc>)
 8000d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d6c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000d72:	4a1e      	ldr	r2, [pc, #120]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000d8a:	4818      	ldr	r0, [pc, #96]	@ (8000dec <HAL_InitTick+0xd8>)
 8000d8c:	f002 f8a4 	bl	8002ed8 <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000d96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11b      	bne.n	8000dd6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000d9e:	4813      	ldr	r0, [pc, #76]	@ (8000dec <HAL_InitTick+0xd8>)
 8000da0:	f002 f8ea 	bl	8002f78 <HAL_TIM_Base_Start_IT>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d111      	bne.n	8000dd6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000db2:	2019      	movs	r0, #25
 8000db4:	f000 fdea 	bl	800198c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d808      	bhi.n	8000dd0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	2019      	movs	r0, #25
 8000dc4:	f000 fdc6 	bl	8001954 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <HAL_InitTick+0xe0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e002      	b.n	8000dd6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3730      	adds	r7, #48	@ 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	20001ac8 	.word	0x20001ac8
 8000df0:	40010000 	.word	0x40010000
 8000df4:	20000004 	.word	0x20000004

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dfc:	bf00      	nop
 8000dfe:	e7fd      	b.n	8000dfc <NMI_Handler+0x4>

08000e00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e04:	bf00      	nop
 8000e06:	e7fd      	b.n	8000e04 <HardFault_Handler+0x4>

08000e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e0c:	bf00      	nop
 8000e0e:	e7fd      	b.n	8000e0c <MemManage_Handler+0x4>

08000e10 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e14:	bf00      	nop
 8000e16:	e7fd      	b.n	8000e14 <BusFault_Handler+0x4>

08000e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <UsageFault_Handler+0x4>

08000e20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e36:	f002 f90f 	bl	8003058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20001ac8 	.word	0x20001ac8

08000e44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <DMA2_Stream0_IRQHandler+0x10>)
 8000e4a:	f000 feb3 	bl	8001bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200018c8 	.word	0x200018c8

08000e58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e60:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <_sbrk+0x5c>)
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <_sbrk+0x60>)
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d102      	bne.n	8000e7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e74:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <_sbrk+0x64>)
 8000e76:	4a12      	ldr	r2, [pc, #72]	@ (8000ec0 <_sbrk+0x68>)
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <_sbrk+0x64>)
 8000e7c:	681a      	ldr	r2, [r3, #0]
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4413      	add	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d207      	bcs.n	8000e98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e88:	f006 fc98 	bl	80077bc <__errno>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	220c      	movs	r2, #12
 8000e90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e92:	f04f 33ff 	mov.w	r3, #4294967295
 8000e96:	e009      	b.n	8000eac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e98:	4b08      	ldr	r3, [pc, #32]	@ (8000ebc <_sbrk+0x64>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9e:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a05      	ldr	r2, [pc, #20]	@ (8000ebc <_sbrk+0x64>)
 8000ea8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20020000 	.word	0x20020000
 8000eb8:	00000400 	.word	0x00000400
 8000ebc:	20001b10 	.word	0x20001b10
 8000ec0:	200065b0 	.word	0x200065b0

08000ec4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000eec:	f7ff ffea 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	@ (8000f28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	@ (8000f34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f16:	f006 fc57 	bl	80077c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f1a:	f7ff fbad 	bl	8000678 <main>
  bx  lr    
 8000f1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f2c:	08008244 	.word	0x08008244
  ldr r2, =_sbss
 8000f30:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f34:	200065b0 	.word	0x200065b0

08000f38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f40:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <HAL_Init+0x40>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	@ (8000f7c <HAL_Init+0x40>)
 8000f46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <HAL_Init+0x40>)
 8000f52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f58:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a07      	ldr	r2, [pc, #28]	@ (8000f7c <HAL_Init+0x40>)
 8000f5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f64:	2003      	movs	r0, #3
 8000f66:	f000 fcea 	bl	800193e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f6a:	200f      	movs	r0, #15
 8000f6c:	f7ff fed2 	bl	8000d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f70:	f7ff fdbc 	bl	8000aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f74:	2300      	movs	r3, #0
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40023c00 	.word	0x40023c00

08000f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f84:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <HAL_IncTick+0x20>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_IncTick+0x24>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20001b14 	.word	0x20001b14

08000fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  return uwTick;
 8000fac:	4b03      	ldr	r3, [pc, #12]	@ (8000fbc <HAL_GetTick+0x14>)
 8000fae:	681b      	ldr	r3, [r3, #0]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20001b14 	.word	0x20001b14

08000fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d101      	bne.n	8000fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e033      	b.n	800103e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d109      	bne.n	8000ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fdb0 	bl	8000b44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f003 0310 	and.w	r3, r3, #16
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d118      	bne.n	8001030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001006:	f023 0302 	bic.w	r3, r3, #2
 800100a:	f043 0202 	orr.w	r2, r3, #2
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f000 fa68 	bl	80014e8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001022:	f023 0303 	bic.w	r3, r3, #3
 8001026:	f043 0201 	orr.w	r2, r3, #1
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	641a      	str	r2, [r3, #64]	@ 0x40
 800102e:	e001      	b.n	8001034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800103c:	7bfb      	ldrb	r3, [r7, #15]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	60b9      	str	r1, [r7, #8]
 8001052:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001062:	2b01      	cmp	r3, #1
 8001064:	d101      	bne.n	800106a <HAL_ADC_Start_DMA+0x22>
 8001066:	2302      	movs	r3, #2
 8001068:	e0eb      	b.n	8001242 <HAL_ADC_Start_DMA+0x1fa>
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2201      	movs	r2, #1
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d018      	beq.n	80010b2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0201 	orr.w	r2, r2, #1
 800108e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001090:	4b6e      	ldr	r3, [pc, #440]	@ (800124c <HAL_ADC_Start_DMA+0x204>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a6e      	ldr	r2, [pc, #440]	@ (8001250 <HAL_ADC_Start_DMA+0x208>)
 8001096:	fba2 2303 	umull	r2, r3, r2, r3
 800109a:	0c9a      	lsrs	r2, r3, #18
 800109c:	4613      	mov	r3, r2
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	4413      	add	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80010a4:	e002      	b.n	80010ac <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d1f9      	bne.n	80010a6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010c0:	d107      	bne.n	80010d2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689a      	ldr	r2, [r3, #8]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80010d0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 80a3 	bne.w	8001228 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80010ea:	f023 0301 	bic.w	r3, r3, #1
 80010ee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001100:	2b00      	cmp	r3, #0
 8001102:	d007      	beq.n	8001114 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800110c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001118:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800111c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001120:	d106      	bne.n	8001130 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f023 0206 	bic.w	r2, r3, #6
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	645a      	str	r2, [r3, #68]	@ 0x44
 800112e:	e002      	b.n	8001136 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2200      	movs	r2, #0
 8001134:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800113e:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <HAL_ADC_Start_DMA+0x20c>)
 8001140:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001146:	4a44      	ldr	r2, [pc, #272]	@ (8001258 <HAL_ADC_Start_DMA+0x210>)
 8001148:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800114e:	4a43      	ldr	r2, [pc, #268]	@ (800125c <HAL_ADC_Start_DMA+0x214>)
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001156:	4a42      	ldr	r2, [pc, #264]	@ (8001260 <HAL_ADC_Start_DMA+0x218>)
 8001158:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001162:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001172:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001182:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	334c      	adds	r3, #76	@ 0x4c
 800118e:	4619      	mov	r1, r3
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f000 fcb6 	bl	8001b04 <HAL_DMA_Start_IT>
 8001198:	4603      	mov	r3, r0
 800119a:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 031f 	and.w	r3, r3, #31
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12a      	bne.n	80011fe <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001264 <HAL_ADC_Start_DMA+0x21c>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d015      	beq.n	80011de <HAL_ADC_Start_DMA+0x196>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001268 <HAL_ADC_Start_DMA+0x220>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d105      	bne.n	80011c8 <HAL_ADC_Start_DMA+0x180>
 80011bc:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <HAL_ADC_Start_DMA+0x20c>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d00a      	beq.n	80011de <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a27      	ldr	r2, [pc, #156]	@ (800126c <HAL_ADC_Start_DMA+0x224>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d136      	bne.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <HAL_ADC_Start_DMA+0x20c>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0310 	and.w	r3, r3, #16
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d130      	bne.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d129      	bne.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	e020      	b.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a18      	ldr	r2, [pc, #96]	@ (8001264 <HAL_ADC_Start_DMA+0x21c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d11b      	bne.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d114      	bne.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	e00b      	b.n	8001240 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122c:	f043 0210 	orr.w	r2, r3, #16
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001238:	f043 0201 	orr.w	r2, r3, #1
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001240:	7ffb      	ldrb	r3, [r7, #31]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000000 	.word	0x20000000
 8001250:	431bde83 	.word	0x431bde83
 8001254:	40012300 	.word	0x40012300
 8001258:	080016e1 	.word	0x080016e1
 800125c:	0800179b 	.word	0x0800179b
 8001260:	080017b7 	.word	0x080017b7
 8001264:	40012000 	.word	0x40012000
 8001268:	40012100 	.word	0x40012100
 800126c:	40012200 	.word	0x40012200

08001270 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <HAL_ADC_ConfigChannel+0x1c>
 800129c:	2302      	movs	r3, #2
 800129e:	e113      	b.n	80014c8 <HAL_ADC_ConfigChannel+0x244>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2b09      	cmp	r3, #9
 80012ae:	d925      	bls.n	80012fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68d9      	ldr	r1, [r3, #12]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4613      	mov	r3, r2
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	4413      	add	r3, r2
 80012c4:	3b1e      	subs	r3, #30
 80012c6:	2207      	movs	r2, #7
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43da      	mvns	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	400a      	ands	r2, r1
 80012d4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	68d9      	ldr	r1, [r3, #12]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4618      	mov	r0, r3
 80012e8:	4603      	mov	r3, r0
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	4403      	add	r3, r0
 80012ee:	3b1e      	subs	r3, #30
 80012f0:	409a      	lsls	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	e022      	b.n	8001342 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6919      	ldr	r1, [r3, #16]
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4613      	mov	r3, r2
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	4413      	add	r3, r2
 8001310:	2207      	movs	r2, #7
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	400a      	ands	r2, r1
 800131e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6919      	ldr	r1, [r3, #16]
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	b29b      	uxth	r3, r3
 8001330:	4618      	mov	r0, r3
 8001332:	4603      	mov	r3, r0
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	4403      	add	r3, r0
 8001338:	409a      	lsls	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b06      	cmp	r3, #6
 8001348:	d824      	bhi.n	8001394 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b05      	subs	r3, #5
 800135c:	221f      	movs	r2, #31
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	400a      	ands	r2, r1
 800136a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	685a      	ldr	r2, [r3, #4]
 800137e:	4613      	mov	r3, r2
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	4413      	add	r3, r2
 8001384:	3b05      	subs	r3, #5
 8001386:	fa00 f203 	lsl.w	r2, r0, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	430a      	orrs	r2, r1
 8001390:	635a      	str	r2, [r3, #52]	@ 0x34
 8001392:	e04c      	b.n	800142e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b0c      	cmp	r3, #12
 800139a:	d824      	bhi.n	80013e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	4613      	mov	r3, r2
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	3b23      	subs	r3, #35	@ 0x23
 80013ae:	221f      	movs	r2, #31
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43da      	mvns	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	400a      	ands	r2, r1
 80013bc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	3b23      	subs	r3, #35	@ 0x23
 80013d8:	fa00 f203 	lsl.w	r2, r0, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e4:	e023      	b.n	800142e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	3b41      	subs	r3, #65	@ 0x41
 80013f8:	221f      	movs	r2, #31
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	43da      	mvns	r2, r3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	400a      	ands	r2, r1
 8001406:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	b29b      	uxth	r3, r3
 8001414:	4618      	mov	r0, r3
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	3b41      	subs	r3, #65	@ 0x41
 8001422:	fa00 f203 	lsl.w	r2, r0, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800142e:	4b29      	ldr	r3, [pc, #164]	@ (80014d4 <HAL_ADC_ConfigChannel+0x250>)
 8001430:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a28      	ldr	r2, [pc, #160]	@ (80014d8 <HAL_ADC_ConfigChannel+0x254>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d10f      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1d8>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b12      	cmp	r3, #18
 8001442:	d10b      	bne.n	800145c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a1d      	ldr	r2, [pc, #116]	@ (80014d8 <HAL_ADC_ConfigChannel+0x254>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12b      	bne.n	80014be <HAL_ADC_ConfigChannel+0x23a>
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a1c      	ldr	r2, [pc, #112]	@ (80014dc <HAL_ADC_ConfigChannel+0x258>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d003      	beq.n	8001478 <HAL_ADC_ConfigChannel+0x1f4>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b11      	cmp	r3, #17
 8001476:	d122      	bne.n	80014be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a11      	ldr	r2, [pc, #68]	@ (80014dc <HAL_ADC_ConfigChannel+0x258>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d111      	bne.n	80014be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <HAL_ADC_ConfigChannel+0x25c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a11      	ldr	r2, [pc, #68]	@ (80014e4 <HAL_ADC_ConfigChannel+0x260>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	0c9a      	lsrs	r2, r3, #18
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b0:	e002      	b.n	80014b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f9      	bne.n	80014b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40012300 	.word	0x40012300
 80014d8:	40012000 	.word	0x40012000
 80014dc:	10000012 	.word	0x10000012
 80014e0:	20000000 	.word	0x20000000
 80014e4:	431bde83 	.word	0x431bde83

080014e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b085      	sub	sp, #20
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014f0:	4b79      	ldr	r3, [pc, #484]	@ (80016d8 <ADC_Init+0x1f0>)
 80014f2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	431a      	orrs	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800151c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6859      	ldr	r1, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691b      	ldr	r3, [r3, #16]
 8001528:	021a      	lsls	r2, r3, #8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001540:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	6859      	ldr	r1, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001562:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6899      	ldr	r1, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68da      	ldr	r2, [r3, #12]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	4a58      	ldr	r2, [pc, #352]	@ (80016dc <ADC_Init+0x1f4>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d022      	beq.n	80015c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800158e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6899      	ldr	r1, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6899      	ldr	r1, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	430a      	orrs	r2, r1
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	e00f      	b.n	80015e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0202 	bic.w	r2, r2, #2
 80015f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	7e1b      	ldrb	r3, [r3, #24]
 8001600:	005a      	lsls	r2, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	430a      	orrs	r2, r1
 8001608:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d01b      	beq.n	800164c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001622:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001632:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6859      	ldr	r1, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	3b01      	subs	r3, #1
 8001640:	035a      	lsls	r2, r3, #13
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	e007      	b.n	800165c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800165a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	3b01      	subs	r3, #1
 8001678:	051a      	lsls	r2, r3, #20
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6899      	ldr	r1, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800169e:	025a      	lsls	r2, r3, #9
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	430a      	orrs	r2, r1
 80016a6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	689a      	ldr	r2, [r3, #8]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6899      	ldr	r1, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	029a      	lsls	r2, r3, #10
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	609a      	str	r2, [r3, #8]
}
 80016cc:	bf00      	nop
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40012300 	.word	0x40012300
 80016dc:	0f000001 	.word	0x0f000001

080016e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016ec:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d13c      	bne.n	8001774 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12b      	bne.n	800176c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001718:	2b00      	cmp	r3, #0
 800171a:	d127      	bne.n	800176c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001722:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001734:	2b00      	cmp	r3, #0
 8001736:	d119      	bne.n	800176c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0220 	bic.w	r2, r2, #32
 8001746:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f7fe ff35 	bl	80005dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001772:	e00e      	b.n	8001792 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fd75 	bl	8001270 <HAL_ADC_ErrorCallback>
}
 8001786:	e004      	b.n	8001792 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
}
 8001792:	bf00      	nop
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017a6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017a8:	68f8      	ldr	r0, [r7, #12]
 80017aa:	f7fe ff01 	bl	80005b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017ae:	bf00      	nop
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017c2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2240      	movs	r2, #64	@ 0x40
 80017c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	f043 0204 	orr.w	r2, r3, #4
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f7ff fd4a 	bl	8001270 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001800:	4013      	ands	r3, r2
 8001802:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800180c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001810:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x44>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001830:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <__NVIC_GetPriorityGrouping+0x18>)
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	f003 0307 	and.w	r3, r3, #7
}
 800183a:	4618      	mov	r0, r3
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	2b00      	cmp	r3, #0
 8001858:	db0b      	blt.n	8001872 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	f003 021f 	and.w	r2, r3, #31
 8001860:	4907      	ldr	r1, [pc, #28]	@ (8001880 <__NVIC_EnableIRQ+0x38>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	095b      	lsrs	r3, r3, #5
 8001868:	2001      	movs	r0, #1
 800186a:	fa00 f202 	lsl.w	r2, r0, r2
 800186e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000e100 	.word	0xe000e100

08001884 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	6039      	str	r1, [r7, #0]
 800188e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001890:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001894:	2b00      	cmp	r3, #0
 8001896:	db0a      	blt.n	80018ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	b2da      	uxtb	r2, r3
 800189c:	490c      	ldr	r1, [pc, #48]	@ (80018d0 <__NVIC_SetPriority+0x4c>)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	0112      	lsls	r2, r2, #4
 80018a4:	b2d2      	uxtb	r2, r2
 80018a6:	440b      	add	r3, r1
 80018a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018ac:	e00a      	b.n	80018c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	4908      	ldr	r1, [pc, #32]	@ (80018d4 <__NVIC_SetPriority+0x50>)
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	3b04      	subs	r3, #4
 80018bc:	0112      	lsls	r2, r2, #4
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	440b      	add	r3, r1
 80018c2:	761a      	strb	r2, [r3, #24]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	e000ed00 	.word	0xe000ed00

080018d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018d8:	b480      	push	{r7}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f1c3 0307 	rsb	r3, r3, #7
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	bf28      	it	cs
 80018f6:	2304      	movcs	r3, #4
 80018f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	3304      	adds	r3, #4
 80018fe:	2b06      	cmp	r3, #6
 8001900:	d902      	bls.n	8001908 <NVIC_EncodePriority+0x30>
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3b03      	subs	r3, #3
 8001906:	e000      	b.n	800190a <NVIC_EncodePriority+0x32>
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	f04f 32ff 	mov.w	r2, #4294967295
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43da      	mvns	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	401a      	ands	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	fa01 f303 	lsl.w	r3, r1, r3
 800192a:	43d9      	mvns	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001930:	4313      	orrs	r3, r2
         );
}
 8001932:	4618      	mov	r0, r3
 8001934:	3724      	adds	r7, #36	@ 0x24
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr

0800193e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ff4c 	bl	80017e4 <__NVIC_SetPriorityGrouping>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001966:	f7ff ff61 	bl	800182c <__NVIC_GetPriorityGrouping>
 800196a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	68b9      	ldr	r1, [r7, #8]
 8001970:	6978      	ldr	r0, [r7, #20]
 8001972:	f7ff ffb1 	bl	80018d8 <NVIC_EncodePriority>
 8001976:	4602      	mov	r2, r0
 8001978:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197c:	4611      	mov	r1, r2
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff80 	bl	8001884 <__NVIC_SetPriority>
}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff ff54 	bl	8001848 <__NVIC_EnableIRQ>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff faf8 	bl	8000fa8 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e099      	b.n	8001af8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2202      	movs	r2, #2
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019e4:	e00f      	b.n	8001a06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019e6:	f7ff fadf 	bl	8000fa8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d908      	bls.n	8001a06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2220      	movs	r2, #32
 80019f8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2203      	movs	r2, #3
 80019fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e078      	b.n	8001af8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1e8      	bne.n	80019e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	4b38      	ldr	r3, [pc, #224]	@ (8001b00 <HAL_DMA_Init+0x158>)
 8001a20:	4013      	ands	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	697a      	ldr	r2, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f023 0307 	bic.w	r3, r3, #7
 8001a86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	d117      	bne.n	8001aca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00e      	beq.n	8001aca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f000 fa6f 	bl	8001f90 <DMA_CheckFifoParam>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d008      	beq.n	8001aca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e016      	b.n	8001af8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f000 fa26 	bl	8001f24 <DMA_CalcBaseAndBitshift>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae0:	223f      	movs	r2, #63	@ 0x3f
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	f010803f 	.word	0xf010803f

08001b04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d101      	bne.n	8001b2a <HAL_DMA_Start_IT+0x26>
 8001b26:	2302      	movs	r3, #2
 8001b28:	e040      	b.n	8001bac <HAL_DMA_Start_IT+0xa8>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d12f      	bne.n	8001b9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2202      	movs	r2, #2
 8001b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	68b9      	ldr	r1, [r7, #8]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f9b8 	bl	8001ec8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5c:	223f      	movs	r2, #63	@ 0x3f
 8001b5e:	409a      	lsls	r2, r3
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0216 	orr.w	r2, r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d007      	beq.n	8001b8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 0208 	orr.w	r2, r2, #8
 8001b8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0201 	orr.w	r2, r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e005      	b.n	8001baa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001dfc <HAL_DMA_IRQHandler+0x248>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a8e      	ldr	r2, [pc, #568]	@ (8001e00 <HAL_DMA_IRQHandler+0x24c>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a9b      	lsrs	r3, r3, #10
 8001bcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	2208      	movs	r2, #8
 8001be0:	409a      	lsls	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d01a      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d013      	beq.n	8001c20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0204 	bic.w	r2, r2, #4
 8001c06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0c:	2208      	movs	r2, #8
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c18:	f043 0201 	orr.w	r2, r3, #1
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c24:	2201      	movs	r2, #1
 8001c26:	409a      	lsls	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d00b      	beq.n	8001c56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c42:	2201      	movs	r2, #1
 8001c44:	409a      	lsls	r2, r3
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c4e:	f043 0202 	orr.w	r2, r3, #2
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4013      	ands	r3, r2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d012      	beq.n	8001c8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d00b      	beq.n	8001c8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c78:	2204      	movs	r2, #4
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c84:	f043 0204 	orr.w	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c90:	2210      	movs	r2, #16
 8001c92:	409a      	lsls	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d043      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03c      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cae:	2210      	movs	r2, #16
 8001cb0:	409a      	lsls	r2, r3
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d018      	beq.n	8001cf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d108      	bne.n	8001ce4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d024      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	4798      	blx	r3
 8001ce2:	e01f      	b.n	8001d24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01b      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	4798      	blx	r3
 8001cf4:	e016      	b.n	8001d24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0208 	bic.w	r2, r2, #8
 8001d12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d003      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d28:	2220      	movs	r2, #32
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	4013      	ands	r3, r2
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 808f 	beq.w	8001e54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0310 	and.w	r3, r3, #16
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8087 	beq.w	8001e54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d4a:	2220      	movs	r2, #32
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d136      	bne.n	8001dcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 0216 	bic.w	r2, r2, #22
 8001d6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695a      	ldr	r2, [r3, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_DMA_IRQHandler+0x1da>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0208 	bic.w	r2, r2, #8
 8001d9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	223f      	movs	r2, #63	@ 0x3f
 8001da4:	409a      	lsls	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d07e      	beq.n	8001ec0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
        }
        return;
 8001dca:	e079      	b.n	8001ec0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d01d      	beq.n	8001e16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d10d      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d031      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
 8001df8:	e02c      	b.n	8001e54 <HAL_DMA_IRQHandler+0x2a0>
 8001dfa:	bf00      	nop
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
 8001e14:	e01e      	b.n	8001e54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10f      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0210 	bic.w	r2, r2, #16
 8001e32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d032      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2205      	movs	r2, #5
 8001e6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f022 0201 	bic.w	r2, r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	3301      	adds	r3, #1
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d307      	bcc.n	8001e9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f2      	bne.n	8001e80 <HAL_DMA_IRQHandler+0x2cc>
 8001e9a:	e000      	b.n	8001e9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	4798      	blx	r3
 8001ebe:	e000      	b.n	8001ec2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ec0:	bf00      	nop
    }
  }
}
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	60f8      	str	r0, [r7, #12]
 8001ed0:	60b9      	str	r1, [r7, #8]
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ee4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b40      	cmp	r3, #64	@ 0x40
 8001ef4:	d108      	bne.n	8001f08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f06:	e007      	b.n	8001f18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	687a      	ldr	r2, [r7, #4]
 8001f16:	60da      	str	r2, [r3, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	3b10      	subs	r3, #16
 8001f34:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <DMA_CalcBaseAndBitshift+0x64>)
 8001f36:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f3e:	4a13      	ldr	r2, [pc, #76]	@ (8001f8c <DMA_CalcBaseAndBitshift+0x68>)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	461a      	mov	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d909      	bls.n	8001f66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f5a:	f023 0303 	bic.w	r3, r3, #3
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f64:	e007      	b.n	8001f76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f6e:	f023 0303 	bic.w	r3, r3, #3
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	aaaaaaab 	.word	0xaaaaaaab
 8001f8c:	080081f8 	.word	0x080081f8

08001f90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11f      	bne.n	8001fea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d856      	bhi.n	800205e <DMA_CheckFifoParam+0xce>
 8001fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8001fb8 <DMA_CheckFifoParam+0x28>)
 8001fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb6:	bf00      	nop
 8001fb8:	08001fc9 	.word	0x08001fc9
 8001fbc:	08001fdb 	.word	0x08001fdb
 8001fc0:	08001fc9 	.word	0x08001fc9
 8001fc4:	0800205f 	.word	0x0800205f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d046      	beq.n	8002062 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd8:	e043      	b.n	8002062 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fe2:	d140      	bne.n	8002066 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe8:	e03d      	b.n	8002066 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ff2:	d121      	bne.n	8002038 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	2b03      	cmp	r3, #3
 8001ff8:	d837      	bhi.n	800206a <DMA_CheckFifoParam+0xda>
 8001ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8002000 <DMA_CheckFifoParam+0x70>)
 8001ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002000:	08002011 	.word	0x08002011
 8002004:	08002017 	.word	0x08002017
 8002008:	08002011 	.word	0x08002011
 800200c:	08002029 	.word	0x08002029
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
      break;
 8002014:	e030      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d025      	beq.n	800206e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002026:	e022      	b.n	800206e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002030:	d11f      	bne.n	8002072 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002036:	e01c      	b.n	8002072 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d903      	bls.n	8002046 <DMA_CheckFifoParam+0xb6>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	2b03      	cmp	r3, #3
 8002042:	d003      	beq.n	800204c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002044:	e018      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	73fb      	strb	r3, [r7, #15]
      break;
 800204a:	e015      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002050:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00e      	beq.n	8002076 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
      break;
 800205c:	e00b      	b.n	8002076 <DMA_CheckFifoParam+0xe6>
      break;
 800205e:	bf00      	nop
 8002060:	e00a      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;
 8002062:	bf00      	nop
 8002064:	e008      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;
 8002066:	bf00      	nop
 8002068:	e006      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;
 800206a:	bf00      	nop
 800206c:	e004      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;
 800206e:	bf00      	nop
 8002070:	e002      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;   
 8002072:	bf00      	nop
 8002074:	e000      	b.n	8002078 <DMA_CheckFifoParam+0xe8>
      break;
 8002076:	bf00      	nop
    }
  } 
  
  return status; 
 8002078:	7bfb      	ldrb	r3, [r7, #15]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3714      	adds	r7, #20
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	@ 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e165      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a4:	2201      	movs	r2, #1
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4013      	ands	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	429a      	cmp	r2, r3
 80020be:	f040 8154 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d005      	beq.n	80020da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d130      	bne.n	800213c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	2203      	movs	r2, #3
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	43db      	mvns	r3, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4013      	ands	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4313      	orrs	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	091b      	lsrs	r3, r3, #4
 8002126:	f003 0201 	and.w	r2, r3, #1
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	2b03      	cmp	r3, #3
 8002146:	d017      	beq.n	8002178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	2203      	movs	r2, #3
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4013      	ands	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d123      	bne.n	80021cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	08da      	lsrs	r2, r3, #3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3208      	adds	r2, #8
 800218c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	220f      	movs	r2, #15
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	691a      	ldr	r2, [r3, #16]
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	69b9      	ldr	r1, [r7, #24]
 80021c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	005b      	lsls	r3, r3, #1
 80021d6:	2203      	movs	r2, #3
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0203 	and.w	r2, r3, #3
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 80ae 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	4b5d      	ldr	r3, [pc, #372]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002216:	4a5c      	ldr	r2, [pc, #368]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800221c:	6453      	str	r3, [r2, #68]	@ 0x44
 800221e:	4b5a      	ldr	r3, [pc, #360]	@ (8002388 <HAL_GPIO_Init+0x300>)
 8002220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800222a:	4a58      	ldr	r2, [pc, #352]	@ (800238c <HAL_GPIO_Init+0x304>)
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f003 0303 	and.w	r3, r3, #3
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	220f      	movs	r2, #15
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_GPIO_Init+0x308>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d025      	beq.n	80022a2 <HAL_GPIO_Init+0x21a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a4e      	ldr	r2, [pc, #312]	@ (8002394 <HAL_GPIO_Init+0x30c>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d01f      	beq.n	800229e <HAL_GPIO_Init+0x216>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a4d      	ldr	r2, [pc, #308]	@ (8002398 <HAL_GPIO_Init+0x310>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x212>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a4c      	ldr	r2, [pc, #304]	@ (800239c <HAL_GPIO_Init+0x314>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x20e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a4b      	ldr	r2, [pc, #300]	@ (80023a0 <HAL_GPIO_Init+0x318>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x20a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4a      	ldr	r2, [pc, #296]	@ (80023a4 <HAL_GPIO_Init+0x31c>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x206>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a49      	ldr	r2, [pc, #292]	@ (80023a8 <HAL_GPIO_Init+0x320>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x202>
 8002286:	2306      	movs	r3, #6
 8002288:	e00c      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228a:	2307      	movs	r3, #7
 800228c:	e00a      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800228e:	2305      	movs	r3, #5
 8002290:	e008      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002292:	2304      	movs	r3, #4
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 8002296:	2303      	movs	r3, #3
 8002298:	e004      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229a:	2302      	movs	r3, #2
 800229c:	e002      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <HAL_GPIO_Init+0x21c>
 80022a2:	2300      	movs	r3, #0
 80022a4:	69fa      	ldr	r2, [r7, #28]
 80022a6:	f002 0203 	and.w	r2, r2, #3
 80022aa:	0092      	lsls	r2, r2, #2
 80022ac:	4093      	lsls	r3, r2
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022b4:	4935      	ldr	r1, [pc, #212]	@ (800238c <HAL_GPIO_Init+0x304>)
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	089b      	lsrs	r3, r3, #2
 80022ba:	3302      	adds	r3, #2
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022c2:	4b3a      	ldr	r3, [pc, #232]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022e6:	4a31      	ldr	r2, [pc, #196]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022ec:	4b2f      	ldr	r3, [pc, #188]	@ (80023ac <HAL_GPIO_Init+0x324>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002310:	4a26      	ldr	r2, [pc, #152]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002316:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_GPIO_Init+0x324>)
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002340:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	43db      	mvns	r3, r3
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_GPIO_Init+0x324>)
 8002366:	69bb      	ldr	r3, [r7, #24]
 8002368:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3301      	adds	r3, #1
 800236e:	61fb      	str	r3, [r7, #28]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	f67f ae96 	bls.w	80020a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002378:	bf00      	nop
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	@ 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40013800 	.word	0x40013800
 8002390:	40020000 	.word	0x40020000
 8002394:	40020400 	.word	0x40020400
 8002398:	40020800 	.word	0x40020800
 800239c:	40020c00 	.word	0x40020c00
 80023a0:	40021000 	.word	0x40021000
 80023a4:	40021400 	.word	0x40021400
 80023a8:	40021800 	.word	0x40021800
 80023ac:	40013c00 	.word	0x40013c00

080023b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d101      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e0cc      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d90c      	bls.n	80023ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b63      	ldr	r3, [pc, #396]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e0b8      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0302 	and.w	r3, r3, #2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d020      	beq.n	800243a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002404:	4b59      	ldr	r3, [pc, #356]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	4a58      	ldr	r2, [pc, #352]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800240a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800240e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d005      	beq.n	8002428 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800241c:	4b53      	ldr	r3, [pc, #332]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4a52      	ldr	r2, [pc, #328]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002426:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002428:	4b50      	ldr	r3, [pc, #320]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	494d      	ldr	r1, [pc, #308]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002436:	4313      	orrs	r3, r2
 8002438:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d044      	beq.n	80024d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800244e:	4b47      	ldr	r3, [pc, #284]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d119      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e07f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d003      	beq.n	800246e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b3f      	ldr	r3, [pc, #252]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e06f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247e:	4b3b      	ldr	r3, [pc, #236]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e067      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800248e:	4b37      	ldr	r3, [pc, #220]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f023 0203 	bic.w	r2, r3, #3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4934      	ldr	r1, [pc, #208]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a0:	f7fe fd82 	bl	8000fa8 <HAL_GetTick>
 80024a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a6:	e00a      	b.n	80024be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a8:	f7fe fd7e 	bl	8000fa8 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e04f      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	4b2b      	ldr	r3, [pc, #172]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 020c 	and.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d1eb      	bne.n	80024a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	429a      	cmp	r2, r3
 80024dc:	d20c      	bcs.n	80024f8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <HAL_RCC_ClockConfig+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e032      	b.n	800255e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2b00      	cmp	r3, #0
 8002502:	d008      	beq.n	8002516 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b19      	ldr	r3, [pc, #100]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	4916      	ldr	r1, [pc, #88]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002512:	4313      	orrs	r3, r2
 8002514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b00      	cmp	r3, #0
 8002520:	d009      	beq.n	8002536 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002522:	4b12      	ldr	r3, [pc, #72]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	490e      	ldr	r1, [pc, #56]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002536:	f000 f887 	bl	8002648 <HAL_RCC_GetSysClockFreq>
 800253a:	4602      	mov	r2, r0
 800253c:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_RCC_ClockConfig+0x1bc>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	490a      	ldr	r1, [pc, #40]	@ (8002570 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	5ccb      	ldrb	r3, [r1, r3]
 800254a:	fa22 f303 	lsr.w	r3, r2, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fbdc 	bl	8000d14 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3710      	adds	r7, #16
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	080081e0 	.word	0x080081e0
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	@ (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000000 	.word	0x20000000

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	@ (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080081f0 	.word	0x080081f0

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffdc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	@ (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080081f0 	.word	0x080081f0

080025e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	220f      	movs	r2, #15
 80025f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f4:	4b12      	ldr	r3, [pc, #72]	@ (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002600:	4b0f      	ldr	r3, [pc, #60]	@ (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800260c:	4b0c      	ldr	r3, [pc, #48]	@ (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002626:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <HAL_RCC_GetClockConfig+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40023c00 	.word	0x40023c00

08002648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800264c:	b0a6      	sub	sp, #152	@ 0x98
 800264e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800266e:	4bc8      	ldr	r3, [pc, #800]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
 8002676:	2b0c      	cmp	r3, #12
 8002678:	f200 817e 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x330>
 800267c:	a201      	add	r2, pc, #4	@ (adr r2, 8002684 <HAL_RCC_GetSysClockFreq+0x3c>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	080026b9 	.word	0x080026b9
 8002688:	08002979 	.word	0x08002979
 800268c:	08002979 	.word	0x08002979
 8002690:	08002979 	.word	0x08002979
 8002694:	080026c1 	.word	0x080026c1
 8002698:	08002979 	.word	0x08002979
 800269c:	08002979 	.word	0x08002979
 80026a0:	08002979 	.word	0x08002979
 80026a4:	080026c9 	.word	0x080026c9
 80026a8:	08002979 	.word	0x08002979
 80026ac:	08002979 	.word	0x08002979
 80026b0:	08002979 	.word	0x08002979
 80026b4:	08002833 	.word	0x08002833
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026b8:	4bb6      	ldr	r3, [pc, #728]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x34c>)
 80026ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026be:	e15f      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026c0:	4bb5      	ldr	r3, [pc, #724]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x350>)
 80026c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026c6:	e15b      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026d4:	4bae      	ldr	r3, [pc, #696]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d031      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e0:	4bab      	ldr	r3, [pc, #684]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	099b      	lsrs	r3, r3, #6
 80026e6:	2200      	movs	r2, #0
 80026e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026ec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80026f4:	2300      	movs	r3, #0
 80026f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80026f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x350>)
 80026fa:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80026fe:	462a      	mov	r2, r5
 8002700:	fb03 f202 	mul.w	r2, r3, r2
 8002704:	2300      	movs	r3, #0
 8002706:	4621      	mov	r1, r4
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	4413      	add	r3, r2
 800270e:	4aa2      	ldr	r2, [pc, #648]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x350>)
 8002710:	4621      	mov	r1, r4
 8002712:	fba1 1202 	umull	r1, r2, r1, r2
 8002716:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002718:	460a      	mov	r2, r1
 800271a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800271c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800271e:	4413      	add	r3, r2
 8002720:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002722:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002726:	2200      	movs	r2, #0
 8002728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800272a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800272c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002730:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002734:	f7fd fdc4 	bl	80002c0 <__aeabi_uldivmod>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4613      	mov	r3, r2
 800273e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002742:	e064      	b.n	800280e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	4b92      	ldr	r3, [pc, #584]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	099b      	lsrs	r3, r3, #6
 800274a:	2200      	movs	r2, #0
 800274c:	653b      	str	r3, [r7, #80]	@ 0x50
 800274e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002756:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002758:	2300      	movs	r3, #0
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800275c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002760:	4622      	mov	r2, r4
 8002762:	462b      	mov	r3, r5
 8002764:	f04f 0000 	mov.w	r0, #0
 8002768:	f04f 0100 	mov.w	r1, #0
 800276c:	0159      	lsls	r1, r3, #5
 800276e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002772:	0150      	lsls	r0, r2, #5
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4621      	mov	r1, r4
 800277a:	1a51      	subs	r1, r2, r1
 800277c:	6139      	str	r1, [r7, #16]
 800277e:	4629      	mov	r1, r5
 8002780:	eb63 0301 	sbc.w	r3, r3, r1
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002792:	4659      	mov	r1, fp
 8002794:	018b      	lsls	r3, r1, #6
 8002796:	4651      	mov	r1, sl
 8002798:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279c:	4651      	mov	r1, sl
 800279e:	018a      	lsls	r2, r1, #6
 80027a0:	4651      	mov	r1, sl
 80027a2:	ebb2 0801 	subs.w	r8, r2, r1
 80027a6:	4659      	mov	r1, fp
 80027a8:	eb63 0901 	sbc.w	r9, r3, r1
 80027ac:	f04f 0200 	mov.w	r2, #0
 80027b0:	f04f 0300 	mov.w	r3, #0
 80027b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c0:	4690      	mov	r8, r2
 80027c2:	4699      	mov	r9, r3
 80027c4:	4623      	mov	r3, r4
 80027c6:	eb18 0303 	adds.w	r3, r8, r3
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	462b      	mov	r3, r5
 80027ce:	eb49 0303 	adc.w	r3, r9, r3
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e0:	4629      	mov	r1, r5
 80027e2:	028b      	lsls	r3, r1, #10
 80027e4:	4621      	mov	r1, r4
 80027e6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ea:	4621      	mov	r1, r4
 80027ec:	028a      	lsls	r2, r1, #10
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027f6:	2200      	movs	r2, #0
 80027f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80027fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80027fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002800:	f7fd fd5e 	bl	80002c0 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800280e:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	0c1b      	lsrs	r3, r3, #16
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	3301      	adds	r3, #1
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002820:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002830:	e0a6      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002832:	4b57      	ldr	r3, [pc, #348]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800283a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800283e:	4b54      	ldr	r3, [pc, #336]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d02a      	beq.n	80028a0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800284a:	4b51      	ldr	r3, [pc, #324]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	099b      	lsrs	r3, r3, #6
 8002850:	2200      	movs	r2, #0
 8002852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002854:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002858:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800285c:	2100      	movs	r1, #0
 800285e:	4b4e      	ldr	r3, [pc, #312]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x350>)
 8002860:	fb03 f201 	mul.w	r2, r3, r1
 8002864:	2300      	movs	r3, #0
 8002866:	fb00 f303 	mul.w	r3, r0, r3
 800286a:	4413      	add	r3, r2
 800286c:	4a4a      	ldr	r2, [pc, #296]	@ (8002998 <HAL_RCC_GetSysClockFreq+0x350>)
 800286e:	fba0 1202 	umull	r1, r2, r0, r2
 8002872:	677a      	str	r2, [r7, #116]	@ 0x74
 8002874:	460a      	mov	r2, r1
 8002876:	673a      	str	r2, [r7, #112]	@ 0x70
 8002878:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800287a:	4413      	add	r3, r2
 800287c:	677b      	str	r3, [r7, #116]	@ 0x74
 800287e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002882:	2200      	movs	r2, #0
 8002884:	633b      	str	r3, [r7, #48]	@ 0x30
 8002886:	637a      	str	r2, [r7, #52]	@ 0x34
 8002888:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800288c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002890:	f7fd fd16 	bl	80002c0 <__aeabi_uldivmod>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4613      	mov	r3, r2
 800289a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800289e:	e05b      	b.n	8002958 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	2200      	movs	r2, #0
 80028a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028b2:	623b      	str	r3, [r7, #32]
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028bc:	4642      	mov	r2, r8
 80028be:	464b      	mov	r3, r9
 80028c0:	f04f 0000 	mov.w	r0, #0
 80028c4:	f04f 0100 	mov.w	r1, #0
 80028c8:	0159      	lsls	r1, r3, #5
 80028ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ce:	0150      	lsls	r0, r2, #5
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4641      	mov	r1, r8
 80028d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80028da:	4649      	mov	r1, r9
 80028dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	f04f 0300 	mov.w	r3, #0
 80028e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028f4:	ebb2 040a 	subs.w	r4, r2, sl
 80028f8:	eb63 050b 	sbc.w	r5, r3, fp
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	00eb      	lsls	r3, r5, #3
 8002906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800290a:	00e2      	lsls	r2, r4, #3
 800290c:	4614      	mov	r4, r2
 800290e:	461d      	mov	r5, r3
 8002910:	4643      	mov	r3, r8
 8002912:	18e3      	adds	r3, r4, r3
 8002914:	603b      	str	r3, [r7, #0]
 8002916:	464b      	mov	r3, r9
 8002918:	eb45 0303 	adc.w	r3, r5, r3
 800291c:	607b      	str	r3, [r7, #4]
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800292a:	4629      	mov	r1, r5
 800292c:	028b      	lsls	r3, r1, #10
 800292e:	4621      	mov	r1, r4
 8002930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002934:	4621      	mov	r1, r4
 8002936:	028a      	lsls	r2, r1, #10
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002940:	2200      	movs	r2, #0
 8002942:	61bb      	str	r3, [r7, #24]
 8002944:	61fa      	str	r2, [r7, #28]
 8002946:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800294a:	f7fd fcb9 	bl	80002c0 <__aeabi_uldivmod>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4613      	mov	r3, r2
 8002954:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_GetSysClockFreq+0x348>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002966:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800296a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800296e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002972:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002976:	e003      	b.n	8002980 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <HAL_RCC_GetSysClockFreq+0x34c>)
 800297a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800297e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002980:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002984:	4618      	mov	r0, r3
 8002986:	3798      	adds	r7, #152	@ 0x98
 8002988:	46bd      	mov	sp, r7
 800298a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800
 8002994:	00f42400 	.word	0x00f42400
 8002998:	017d7840 	.word	0x017d7840

0800299c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e28d      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 8083 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029bc:	4b94      	ldr	r3, [pc, #592]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 030c 	and.w	r3, r3, #12
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d019      	beq.n	80029fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029c8:	4b91      	ldr	r3, [pc, #580]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80029d0:	2b08      	cmp	r3, #8
 80029d2:	d106      	bne.n	80029e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029e0:	d00c      	beq.n	80029fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80029ea:	2b0c      	cmp	r3, #12
 80029ec:	d112      	bne.n	8002a14 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029ee:	4b88      	ldr	r3, [pc, #544]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80029fa:	d10b      	bne.n	8002a14 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	4b84      	ldr	r3, [pc, #528]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d05b      	beq.n	8002ac0 <HAL_RCC_OscConfig+0x124>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d157      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e25a      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x90>
 8002a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a7b      	ldr	r2, [pc, #492]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	e01d      	b.n	8002a68 <HAL_RCC_OscConfig+0xcc>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a34:	d10c      	bne.n	8002a50 <HAL_RCC_OscConfig+0xb4>
 8002a36:	4b76      	ldr	r3, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	4b73      	ldr	r3, [pc, #460]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a72      	ldr	r2, [pc, #456]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4c:	6013      	str	r3, [r2, #0]
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCC_OscConfig+0xcc>
 8002a50:	4b6f      	ldr	r3, [pc, #444]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a6e      	ldr	r2, [pc, #440]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a5a:	6013      	str	r3, [r2, #0]
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a6b      	ldr	r2, [pc, #428]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a70:	f7fe fa9a 	bl	8000fa8 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a78:	f7fe fa96 	bl	8000fa8 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b64      	cmp	r3, #100	@ 0x64
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e21f      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8a:	4b61      	ldr	r3, [pc, #388]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0xdc>
 8002a96:	e014      	b.n	8002ac2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa86 	bl	8000fa8 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa0:	f7fe fa82 	bl	8000fa8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b64      	cmp	r3, #100	@ 0x64
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e20b      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab2:	4b57      	ldr	r3, [pc, #348]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x104>
 8002abe:	e000      	b.n	8002ac2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d06f      	beq.n	8002bae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ace:	4b50      	ldr	r3, [pc, #320]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f003 030c 	and.w	r3, r3, #12
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d017      	beq.n	8002b0a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ada:	4b4d      	ldr	r3, [pc, #308]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 030c 	and.w	r3, r3, #12
        || \
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d105      	bne.n	8002af2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b47      	ldr	r3, [pc, #284]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b44      	ldr	r3, [pc, #272]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b41      	ldr	r3, [pc, #260]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x186>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1d3      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3b      	ldr	r3, [pc, #236]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4937      	ldr	r1, [pc, #220]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b34      	ldr	r3, [pc, #208]	@ (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fa2f 	bl	8000fa8 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fa2b 	bl	8000fa8 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1b4      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4925      	ldr	r1, [pc, #148]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_RCC_OscConfig+0x278>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fa0e 	bl	8000fa8 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b90:	f7fe fa0a 	bl	8000fa8 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e193      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7fe f9ee 	bl	8000fa8 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe f9ea 	bl	8000fa8 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e173      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_OscConfig+0x274>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x234>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7fe f9d7 	bl	8000fa8 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7fe f9d3 	bl	8000fa8 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d907      	bls.n	8002c1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e15c      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ea      	bne.n	8002bfe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b83      	ldr	r3, [pc, #524]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	4b7c      	ldr	r3, [pc, #496]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b79      	ldr	r3, [pc, #484]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b76      	ldr	r3, [pc, #472]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a75      	ldr	r2, [pc, #468]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7fe f993 	bl	8000fa8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7fe f98f 	bl	8000fa8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e118      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6c      	ldr	r3, [pc, #432]	@ (8002e4c <HAL_RCC_OscConfig+0x4b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x31e>
 8002cac:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb0:	4a65      	ldr	r2, [pc, #404]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x358>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x340>
 8002cc2:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc6:	4a60      	ldr	r2, [pc, #384]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cce:	4b5e      	ldr	r3, [pc, #376]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd2:	4a5d      	ldr	r2, [pc, #372]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x358>
 8002cdc:	4b5a      	ldr	r3, [pc, #360]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ce0:	4a59      	ldr	r2, [pc, #356]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ce8:	4b57      	ldr	r3, [pc, #348]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a56      	ldr	r2, [pc, #344]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe f954 	bl	8000fa8 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe f950 	bl	8000fa8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0d7      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x368>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe f93e 	bl	8000fa8 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe f93a 	bl	8000fa8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0c1      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b40      	ldr	r3, [pc, #256]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b3b      	ldr	r3, [pc, #236]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80ad 	beq.w	8002ec8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d060      	beq.n	8002e3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d145      	bne.n	8002e0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b33      	ldr	r3, [pc, #204]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7fe f90e 	bl	8000fa8 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe f90a 	bl	8000fa8 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e093      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b29      	ldr	r3, [pc, #164]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd8:	071b      	lsls	r3, r3, #28
 8002dda:	491b      	ldr	r1, [pc, #108]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002de0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002de2:	2201      	movs	r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fe f8df 	bl	8000fa8 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dee:	f7fe f8db 	bl	8000fa8 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e064      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e00:	4b11      	ldr	r3, [pc, #68]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d0f0      	beq.n	8002dee <HAL_RCC_OscConfig+0x452>
 8002e0c:	e05c      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0e:	4b10      	ldr	r3, [pc, #64]	@ (8002e50 <HAL_RCC_OscConfig+0x4b4>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7fe f8c8 	bl	8000fa8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe f8c4 	bl	8000fa8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e04d      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x480>
 8002e3a:	e045      	b.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e040      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
 8002e48:	40023800 	.word	0x40023800
 8002e4c:	40007000 	.word	0x40007000
 8002e50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x538>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	699b      	ldr	r3, [r3, #24]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d030      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d129      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d122      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e84:	4013      	ands	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d119      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	085b      	lsrs	r3, r3, #1
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d10f      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d107      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ebe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d001      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e000      	b.n	8002eca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023800 	.word	0x40023800

08002ed8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e041      	b.n	8002f6e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d106      	bne.n	8002f04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fd fea0 	bl	8000c44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3304      	adds	r3, #4
 8002f14:	4619      	mov	r1, r3
 8002f16:	4610      	mov	r0, r2
 8002f18:	f000 fa7e 	bl	8003418 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d001      	beq.n	8002f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04e      	b.n	800302e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68da      	ldr	r2, [r3, #12]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_TIM_Base_Start_IT+0xc4>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d022      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fba:	d01d      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <HAL_TIM_Base_Start_IT+0xc8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d018      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d013      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003048 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d00e      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a1b      	ldr	r2, [pc, #108]	@ (800304c <HAL_TIM_Base_Start_IT+0xd4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a19      	ldr	r2, [pc, #100]	@ (8003050 <HAL_TIM_Base_Start_IT+0xd8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0x80>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d111      	bne.n	800301c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b06      	cmp	r3, #6
 8003008:	d010      	beq.n	800302c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f042 0201 	orr.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800301a:	e007      	b.n	800302c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f042 0201 	orr.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3714      	adds	r7, #20
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
 800303a:	bf00      	nop
 800303c:	40010000 	.word	0x40010000
 8003040:	40000400 	.word	0x40000400
 8003044:	40000800 	.word	0x40000800
 8003048:	40000c00 	.word	0x40000c00
 800304c:	40010400 	.word	0x40010400
 8003050:	40014000 	.word	0x40014000
 8003054:	40001800 	.word	0x40001800

08003058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0202 	mvn.w	r2, #2
 800308c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0303 	and.w	r3, r3, #3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 f999 	bl	80033da <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f98b 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 f99c 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0204 	mvn.w	r2, #4
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2202      	movs	r2, #2
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 f973 	bl	80033da <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f965 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f976 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0208 	mvn.w	r2, #8
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2204      	movs	r2, #4
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 f94d 	bl	80033da <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f93f 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f950 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	d020      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0310 	and.w	r3, r3, #16
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0210 	mvn.w	r2, #16
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2208      	movs	r2, #8
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f927 	bl	80033da <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f919 	bl	80033c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f92a 	bl	80033ee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00c      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0201 	mvn.w	r2, #1
 80031bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd fc7c 	bl	8000abc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00c      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fade 	bl	80037a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00c      	beq.n	800320c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8fb 	bl	8003402 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00c      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d007      	beq.n	8003230 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0220 	mvn.w	r2, #32
 8003228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 fab0 	bl	8003790 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIM_ConfigClockSource+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e0b4      	b.n	80033be <HAL_TIM_ConfigClockSource+0x186>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328c:	d03e      	beq.n	800330c <HAL_TIM_ConfigClockSource+0xd4>
 800328e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003292:	f200 8087 	bhi.w	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800329a:	f000 8086 	beq.w	80033aa <HAL_TIM_ConfigClockSource+0x172>
 800329e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032a2:	d87f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b70      	cmp	r3, #112	@ 0x70
 80032a6:	d01a      	beq.n	80032de <HAL_TIM_ConfigClockSource+0xa6>
 80032a8:	2b70      	cmp	r3, #112	@ 0x70
 80032aa:	d87b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b60      	cmp	r3, #96	@ 0x60
 80032ae:	d050      	beq.n	8003352 <HAL_TIM_ConfigClockSource+0x11a>
 80032b0:	2b60      	cmp	r3, #96	@ 0x60
 80032b2:	d877      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032b4:	2b50      	cmp	r3, #80	@ 0x50
 80032b6:	d03c      	beq.n	8003332 <HAL_TIM_ConfigClockSource+0xfa>
 80032b8:	2b50      	cmp	r3, #80	@ 0x50
 80032ba:	d873      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032bc:	2b40      	cmp	r3, #64	@ 0x40
 80032be:	d058      	beq.n	8003372 <HAL_TIM_ConfigClockSource+0x13a>
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d86f      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032c4:	2b30      	cmp	r3, #48	@ 0x30
 80032c6:	d064      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032c8:	2b30      	cmp	r3, #48	@ 0x30
 80032ca:	d86b      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032cc:	2b20      	cmp	r3, #32
 80032ce:	d060      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	d867      	bhi.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d05c      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d05a      	beq.n	8003392 <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	e062      	b.n	80033a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ee:	f000 f9b3 	bl	8003658 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003300:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	609a      	str	r2, [r3, #8]
      break;
 800330a:	e04f      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331c:	f000 f99c 	bl	8003658 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800332e:	609a      	str	r2, [r3, #8]
      break;
 8003330:	e03c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	461a      	mov	r2, r3
 8003340:	f000 f910 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2150      	movs	r1, #80	@ 0x50
 800334a:	4618      	mov	r0, r3
 800334c:	f000 f969 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8003350:	e02c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	461a      	mov	r2, r3
 8003360:	f000 f92f 	bl	80035c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2160      	movs	r1, #96	@ 0x60
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f959 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8003370:	e01c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	461a      	mov	r2, r3
 8003380:	f000 f8f0 	bl	8003564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2140      	movs	r1, #64	@ 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f000 f949 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8003390:	e00c      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4619      	mov	r1, r3
 800339c:	4610      	mov	r0, r2
 800339e:	f000 f940 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 80033a2:	e003      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e000      	b.n	80033ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
	...

08003418 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a43      	ldr	r2, [pc, #268]	@ (8003538 <TIM_Base_SetConfig+0x120>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d013      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003436:	d00f      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a40      	ldr	r2, [pc, #256]	@ (800353c <TIM_Base_SetConfig+0x124>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00b      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a3f      	ldr	r2, [pc, #252]	@ (8003540 <TIM_Base_SetConfig+0x128>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d007      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a3e      	ldr	r2, [pc, #248]	@ (8003544 <TIM_Base_SetConfig+0x12c>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d003      	beq.n	8003458 <TIM_Base_SetConfig+0x40>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a3d      	ldr	r2, [pc, #244]	@ (8003548 <TIM_Base_SetConfig+0x130>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d108      	bne.n	800346a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800345e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a32      	ldr	r2, [pc, #200]	@ (8003538 <TIM_Base_SetConfig+0x120>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d02b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003478:	d027      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a2f      	ldr	r2, [pc, #188]	@ (800353c <TIM_Base_SetConfig+0x124>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d023      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a2e      	ldr	r2, [pc, #184]	@ (8003540 <TIM_Base_SetConfig+0x128>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d01f      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a2d      	ldr	r2, [pc, #180]	@ (8003544 <TIM_Base_SetConfig+0x12c>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d01b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2c      	ldr	r2, [pc, #176]	@ (8003548 <TIM_Base_SetConfig+0x130>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d017      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a2b      	ldr	r2, [pc, #172]	@ (800354c <TIM_Base_SetConfig+0x134>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003550 <TIM_Base_SetConfig+0x138>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d00f      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a29      	ldr	r2, [pc, #164]	@ (8003554 <TIM_Base_SetConfig+0x13c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00b      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a28      	ldr	r2, [pc, #160]	@ (8003558 <TIM_Base_SetConfig+0x140>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d007      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a27      	ldr	r2, [pc, #156]	@ (800355c <TIM_Base_SetConfig+0x144>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d003      	beq.n	80034ca <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a26      	ldr	r2, [pc, #152]	@ (8003560 <TIM_Base_SetConfig+0x148>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d108      	bne.n	80034dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	68fa      	ldr	r2, [r7, #12]
 80034d8:	4313      	orrs	r3, r2
 80034da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003538 <TIM_Base_SetConfig+0x120>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d003      	beq.n	800350a <TIM_Base_SetConfig+0xf2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <TIM_Base_SetConfig+0x130>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d103      	bne.n	8003512 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f043 0204 	orr.w	r2, r3, #4
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	601a      	str	r2, [r3, #0]
}
 800352a:	bf00      	nop
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40010400 	.word	0x40010400
 800354c:	40014000 	.word	0x40014000
 8003550:	40014400 	.word	0x40014400
 8003554:	40014800 	.word	0x40014800
 8003558:	40001800 	.word	0x40001800
 800355c:	40001c00 	.word	0x40001c00
 8003560:	40002000 	.word	0x40002000

08003564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f023 0201 	bic.w	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f023 030a 	bic.w	r3, r3, #10
 80035a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	621a      	str	r2, [r3, #32]
}
 80035b6:	bf00      	nop
 80035b8:	371c      	adds	r7, #28
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b087      	sub	sp, #28
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f023 0210 	bic.w	r2, r3, #16
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	031b      	lsls	r3, r3, #12
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80035fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	011b      	lsls	r3, r3, #4
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	697a      	ldr	r2, [r7, #20]
 8003614:	621a      	str	r2, [r3, #32]
}
 8003616:	bf00      	nop
 8003618:	371c      	adds	r7, #28
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	f043 0307 	orr.w	r3, r3, #7
 8003644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003658:	b480      	push	{r7}
 800365a:	b087      	sub	sp, #28
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
 8003664:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003672:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	021a      	lsls	r2, r3, #8
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	431a      	orrs	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	4313      	orrs	r3, r2
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	4313      	orrs	r3, r2
 8003684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	609a      	str	r2, [r3, #8]
}
 800368c:	bf00      	nop
 800368e:	371c      	adds	r7, #28
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e05a      	b.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a21      	ldr	r2, [pc, #132]	@ (8003774 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d022      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fc:	d01d      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1d      	ldr	r2, [pc, #116]	@ (8003778 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d018      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1b      	ldr	r2, [pc, #108]	@ (800377c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a1a      	ldr	r2, [pc, #104]	@ (8003780 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d00e      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a18      	ldr	r2, [pc, #96]	@ (8003784 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d004      	beq.n	800373a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a15      	ldr	r2, [pc, #84]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d10c      	bne.n	8003754 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	68ba      	ldr	r2, [r7, #8]
 8003748:	4313      	orrs	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40010400 	.word	0x40010400
 8003788:	40014000 	.word	0x40014000
 800378c:	40001800 	.word	0x40001800

08003790 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e042      	b.n	8003850 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d106      	bne.n	80037e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f7fd fa50 	bl	8000c84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2224      	movs	r2, #36	@ 0x24
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68da      	ldr	r2, [r3, #12]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f973 	bl	8003ae8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003810:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003820:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003830:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2220      	movs	r2, #32
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2220      	movs	r2, #32
 8003844:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b08a      	sub	sp, #40	@ 0x28
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	4613      	mov	r3, r2
 8003866:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b20      	cmp	r3, #32
 8003876:	d175      	bne.n	8003964 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_UART_Transmit+0x2c>
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e06e      	b.n	8003966 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2221      	movs	r2, #33	@ 0x21
 8003892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003896:	f7fd fb87 	bl	8000fa8 <HAL_GetTick>
 800389a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	88fa      	ldrh	r2, [r7, #6]
 80038a0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b0:	d108      	bne.n	80038c4 <HAL_UART_Transmit+0x6c>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d104      	bne.n	80038c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	e003      	b.n	80038cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038cc:	e02e      	b.n	800392c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	9300      	str	r3, [sp, #0]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	2200      	movs	r2, #0
 80038d6:	2180      	movs	r1, #128	@ 0x80
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f848 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d005      	beq.n	80038f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e03a      	b.n	8003966 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10b      	bne.n	800390e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003904:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	3302      	adds	r3, #2
 800390a:	61bb      	str	r3, [r7, #24]
 800390c:	e007      	b.n	800391e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	781a      	ldrb	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	3301      	adds	r3, #1
 800391c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1cb      	bne.n	80038ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2200      	movs	r2, #0
 800393e:	2140      	movs	r1, #64	@ 0x40
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f814 	bl	800396e <UART_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2220      	movs	r2, #32
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e006      	b.n	8003966 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2220      	movs	r2, #32
 800395c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3720      	adds	r7, #32
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	60f8      	str	r0, [r7, #12]
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	603b      	str	r3, [r7, #0]
 800397a:	4613      	mov	r3, r2
 800397c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800397e:	e03b      	b.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003980:	6a3b      	ldr	r3, [r7, #32]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d037      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fd fb0e 	bl	8000fa8 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	6a3a      	ldr	r2, [r7, #32]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <UART_WaitOnFlagUntilTimeout+0x30>
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e03a      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d023      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	2b80      	cmp	r3, #128	@ 0x80
 80039b4:	d020      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b40      	cmp	r3, #64	@ 0x40
 80039ba:	d01d      	beq.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d116      	bne.n	80039f8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f81d 	bl	8003a20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2208      	movs	r2, #8
 80039ea:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00f      	b.n	8003a18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	68ba      	ldr	r2, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf0c      	ite	eq
 8003a08:	2301      	moveq	r3, #1
 8003a0a:	2300      	movne	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	79fb      	ldrb	r3, [r7, #7]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d0b4      	beq.n	8003980 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b095      	sub	sp, #84	@ 0x54
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a32:	e853 3f00 	ldrex	r3, [r3]
 8003a36:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a3a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a48:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a50:	e841 2300 	strex	r3, r2, [r1]
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d1e5      	bne.n	8003a28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f023 0301 	bic.w	r3, r3, #1
 8003a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3314      	adds	r3, #20
 8003a7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e5      	bne.n	8003a5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d119      	bne.n	8003acc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	e853 3f00 	ldrex	r3, [r3]
 8003aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f023 0310 	bic.w	r3, r3, #16
 8003aae:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ab8:	61ba      	str	r2, [r7, #24]
 8003aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	6979      	ldr	r1, [r7, #20]
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e5      	bne.n	8003a98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2220      	movs	r2, #32
 8003ad0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ada:	bf00      	nop
 8003adc:	3754      	adds	r7, #84	@ 0x54
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
	...

08003ae8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003aec:	b0c0      	sub	sp, #256	@ 0x100
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b04:	68d9      	ldr	r1, [r3, #12]
 8003b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	ea40 0301 	orr.w	r3, r0, r1
 8003b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b40:	f021 010c 	bic.w	r1, r1, #12
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b62:	6999      	ldr	r1, [r3, #24]
 8003b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	ea40 0301 	orr.w	r3, r0, r1
 8003b6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4b8f      	ldr	r3, [pc, #572]	@ (8003db4 <UART_SetConfig+0x2cc>)
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d005      	beq.n	8003b88 <UART_SetConfig+0xa0>
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b8d      	ldr	r3, [pc, #564]	@ (8003db8 <UART_SetConfig+0x2d0>)
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d104      	bne.n	8003b92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fd18 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 8003b8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b90:	e003      	b.n	8003b9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b92:	f7fe fcff 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 8003b96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ba4:	f040 810c 	bne.w	8003dc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bac:	2200      	movs	r2, #0
 8003bae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003bb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003bba:	4622      	mov	r2, r4
 8003bbc:	462b      	mov	r3, r5
 8003bbe:	1891      	adds	r1, r2, r2
 8003bc0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bc2:	415b      	adcs	r3, r3
 8003bc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bca:	4621      	mov	r1, r4
 8003bcc:	eb12 0801 	adds.w	r8, r2, r1
 8003bd0:	4629      	mov	r1, r5
 8003bd2:	eb43 0901 	adc.w	r9, r3, r1
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003be2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003be6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bea:	4690      	mov	r8, r2
 8003bec:	4699      	mov	r9, r3
 8003bee:	4623      	mov	r3, r4
 8003bf0:	eb18 0303 	adds.w	r3, r8, r3
 8003bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bf8:	462b      	mov	r3, r5
 8003bfa:	eb49 0303 	adc.w	r3, r9, r3
 8003bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c16:	460b      	mov	r3, r1
 8003c18:	18db      	adds	r3, r3, r3
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	eb42 0303 	adc.w	r3, r2, r3
 8003c22:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c2c:	f7fc fb48 	bl	80002c0 <__aeabi_uldivmod>
 8003c30:	4602      	mov	r2, r0
 8003c32:	460b      	mov	r3, r1
 8003c34:	4b61      	ldr	r3, [pc, #388]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003c36:	fba3 2302 	umull	r2, r3, r3, r2
 8003c3a:	095b      	lsrs	r3, r3, #5
 8003c3c:	011c      	lsls	r4, r3, #4
 8003c3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c50:	4642      	mov	r2, r8
 8003c52:	464b      	mov	r3, r9
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c60:	4641      	mov	r1, r8
 8003c62:	eb12 0a01 	adds.w	sl, r2, r1
 8003c66:	4649      	mov	r1, r9
 8003c68:	eb43 0b01 	adc.w	fp, r3, r1
 8003c6c:	f04f 0200 	mov.w	r2, #0
 8003c70:	f04f 0300 	mov.w	r3, #0
 8003c74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c80:	4692      	mov	sl, r2
 8003c82:	469b      	mov	fp, r3
 8003c84:	4643      	mov	r3, r8
 8003c86:	eb1a 0303 	adds.w	r3, sl, r3
 8003c8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c8e:	464b      	mov	r3, r9
 8003c90:	eb4b 0303 	adc.w	r3, fp, r3
 8003c94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ca4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ca8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cac:	460b      	mov	r3, r1
 8003cae:	18db      	adds	r3, r3, r3
 8003cb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	eb42 0303 	adc.w	r3, r2, r3
 8003cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cc2:	f7fc fafd 	bl	80002c0 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003cce:	fba3 2301 	umull	r2, r3, r3, r1
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2264      	movs	r2, #100	@ 0x64
 8003cd6:	fb02 f303 	mul.w	r3, r2, r3
 8003cda:	1acb      	subs	r3, r1, r3
 8003cdc:	00db      	lsls	r3, r3, #3
 8003cde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ce2:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003ce4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ce8:	095b      	lsrs	r3, r3, #5
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003cf0:	441c      	add	r4, r3
 8003cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d04:	4642      	mov	r2, r8
 8003d06:	464b      	mov	r3, r9
 8003d08:	1891      	adds	r1, r2, r2
 8003d0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d0c:	415b      	adcs	r3, r3
 8003d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d14:	4641      	mov	r1, r8
 8003d16:	1851      	adds	r1, r2, r1
 8003d18:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d1a:	4649      	mov	r1, r9
 8003d1c:	414b      	adcs	r3, r1
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	00cb      	lsls	r3, r1, #3
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d36:	4651      	mov	r1, sl
 8003d38:	00ca      	lsls	r2, r1, #3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4603      	mov	r3, r0
 8003d40:	4642      	mov	r2, r8
 8003d42:	189b      	adds	r3, r3, r2
 8003d44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d48:	464b      	mov	r3, r9
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	eb42 0303 	adc.w	r3, r2, r3
 8003d50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d68:	460b      	mov	r3, r1
 8003d6a:	18db      	adds	r3, r3, r3
 8003d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d6e:	4613      	mov	r3, r2
 8003d70:	eb42 0303 	adc.w	r3, r2, r3
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d7e:	f7fc fa9f 	bl	80002c0 <__aeabi_uldivmod>
 8003d82:	4602      	mov	r2, r0
 8003d84:	460b      	mov	r3, r1
 8003d86:	4b0d      	ldr	r3, [pc, #52]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003d88:	fba3 1302 	umull	r1, r3, r3, r2
 8003d8c:	095b      	lsrs	r3, r3, #5
 8003d8e:	2164      	movs	r1, #100	@ 0x64
 8003d90:	fb01 f303 	mul.w	r3, r1, r3
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	00db      	lsls	r3, r3, #3
 8003d98:	3332      	adds	r3, #50	@ 0x32
 8003d9a:	4a08      	ldr	r2, [pc, #32]	@ (8003dbc <UART_SetConfig+0x2d4>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	f003 0207 	and.w	r2, r3, #7
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4422      	add	r2, r4
 8003dae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db0:	e106      	b.n	8003fc0 <UART_SetConfig+0x4d8>
 8003db2:	bf00      	nop
 8003db4:	40011000 	.word	0x40011000
 8003db8:	40011400 	.word	0x40011400
 8003dbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003dca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dd2:	4642      	mov	r2, r8
 8003dd4:	464b      	mov	r3, r9
 8003dd6:	1891      	adds	r1, r2, r2
 8003dd8:	6239      	str	r1, [r7, #32]
 8003dda:	415b      	adcs	r3, r3
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003de2:	4641      	mov	r1, r8
 8003de4:	1854      	adds	r4, r2, r1
 8003de6:	4649      	mov	r1, r9
 8003de8:	eb43 0501 	adc.w	r5, r3, r1
 8003dec:	f04f 0200 	mov.w	r2, #0
 8003df0:	f04f 0300 	mov.w	r3, #0
 8003df4:	00eb      	lsls	r3, r5, #3
 8003df6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfa:	00e2      	lsls	r2, r4, #3
 8003dfc:	4614      	mov	r4, r2
 8003dfe:	461d      	mov	r5, r3
 8003e00:	4643      	mov	r3, r8
 8003e02:	18e3      	adds	r3, r4, r3
 8003e04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e08:	464b      	mov	r3, r9
 8003e0a:	eb45 0303 	adc.w	r3, r5, r3
 8003e0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e2e:	4629      	mov	r1, r5
 8003e30:	008b      	lsls	r3, r1, #2
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e38:	4621      	mov	r1, r4
 8003e3a:	008a      	lsls	r2, r1, #2
 8003e3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e40:	f7fc fa3e 	bl	80002c0 <__aeabi_uldivmod>
 8003e44:	4602      	mov	r2, r0
 8003e46:	460b      	mov	r3, r1
 8003e48:	4b60      	ldr	r3, [pc, #384]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003e4e:	095b      	lsrs	r3, r3, #5
 8003e50:	011c      	lsls	r4, r3, #4
 8003e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e64:	4642      	mov	r2, r8
 8003e66:	464b      	mov	r3, r9
 8003e68:	1891      	adds	r1, r2, r2
 8003e6a:	61b9      	str	r1, [r7, #24]
 8003e6c:	415b      	adcs	r3, r3
 8003e6e:	61fb      	str	r3, [r7, #28]
 8003e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e74:	4641      	mov	r1, r8
 8003e76:	1851      	adds	r1, r2, r1
 8003e78:	6139      	str	r1, [r7, #16]
 8003e7a:	4649      	mov	r1, r9
 8003e7c:	414b      	adcs	r3, r1
 8003e7e:	617b      	str	r3, [r7, #20]
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	00cb      	lsls	r3, r1, #3
 8003e90:	4651      	mov	r1, sl
 8003e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e96:	4651      	mov	r1, sl
 8003e98:	00ca      	lsls	r2, r1, #3
 8003e9a:	4610      	mov	r0, r2
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4642      	mov	r2, r8
 8003ea2:	189b      	adds	r3, r3, r2
 8003ea4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ecc:	4649      	mov	r1, r9
 8003ece:	008b      	lsls	r3, r1, #2
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	008a      	lsls	r2, r1, #2
 8003eda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003ede:	f7fc f9ef 	bl	80002c0 <__aeabi_uldivmod>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4b38      	ldr	r3, [pc, #224]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003eea:	fba3 2301 	umull	r2, r3, r3, r1
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	2264      	movs	r2, #100	@ 0x64
 8003ef2:	fb02 f303 	mul.w	r3, r2, r3
 8003ef6:	1acb      	subs	r3, r1, r3
 8003ef8:	011b      	lsls	r3, r3, #4
 8003efa:	3332      	adds	r3, #50	@ 0x32
 8003efc:	4a33      	ldr	r2, [pc, #204]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003efe:	fba2 2303 	umull	r2, r3, r2, r3
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f08:	441c      	add	r4, r3
 8003f0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f0e:	2200      	movs	r2, #0
 8003f10:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f12:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f18:	4642      	mov	r2, r8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	1891      	adds	r1, r2, r2
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	415b      	adcs	r3, r3
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f28:	4641      	mov	r1, r8
 8003f2a:	1851      	adds	r1, r2, r1
 8003f2c:	6039      	str	r1, [r7, #0]
 8003f2e:	4649      	mov	r1, r9
 8003f30:	414b      	adcs	r3, r1
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	f04f 0200 	mov.w	r2, #0
 8003f38:	f04f 0300 	mov.w	r3, #0
 8003f3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f40:	4659      	mov	r1, fp
 8003f42:	00cb      	lsls	r3, r1, #3
 8003f44:	4651      	mov	r1, sl
 8003f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f4a:	4651      	mov	r1, sl
 8003f4c:	00ca      	lsls	r2, r1, #3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	4619      	mov	r1, r3
 8003f52:	4603      	mov	r3, r0
 8003f54:	4642      	mov	r2, r8
 8003f56:	189b      	adds	r3, r3, r2
 8003f58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f5a:	464b      	mov	r3, r9
 8003f5c:	460a      	mov	r2, r1
 8003f5e:	eb42 0303 	adc.w	r3, r2, r3
 8003f62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	008b      	lsls	r3, r1, #2
 8003f80:	4641      	mov	r1, r8
 8003f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f86:	4641      	mov	r1, r8
 8003f88:	008a      	lsls	r2, r1, #2
 8003f8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f8e:	f7fc f997 	bl	80002c0 <__aeabi_uldivmod>
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003f98:	fba3 1302 	umull	r1, r3, r3, r2
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	2164      	movs	r1, #100	@ 0x64
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	3332      	adds	r3, #50	@ 0x32
 8003faa:	4a08      	ldr	r2, [pc, #32]	@ (8003fcc <UART_SetConfig+0x4e4>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	095b      	lsrs	r3, r3, #5
 8003fb2:	f003 020f 	and.w	r2, r3, #15
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4422      	add	r2, r4
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fcc:	51eb851f 	.word	0x51eb851f

08003fd0 <__NVIC_SetPriority>:
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	6039      	str	r1, [r7, #0]
 8003fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	db0a      	blt.n	8003ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	490c      	ldr	r1, [pc, #48]	@ (800401c <__NVIC_SetPriority+0x4c>)
 8003fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fee:	0112      	lsls	r2, r2, #4
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003ff8:	e00a      	b.n	8004010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4908      	ldr	r1, [pc, #32]	@ (8004020 <__NVIC_SetPriority+0x50>)
 8004000:	79fb      	ldrb	r3, [r7, #7]
 8004002:	f003 030f 	and.w	r3, r3, #15
 8004006:	3b04      	subs	r3, #4
 8004008:	0112      	lsls	r2, r2, #4
 800400a:	b2d2      	uxtb	r2, r2
 800400c:	440b      	add	r3, r1
 800400e:	761a      	strb	r2, [r3, #24]
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	e000e100 	.word	0xe000e100
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <SysTick_Handler+0x1c>)
 800402a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800402c:	f002 fa04 	bl	8006438 <xTaskGetSchedulerState>
 8004030:	4603      	mov	r3, r0
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004036:	f003 f8ff 	bl	8007238 <xPortSysTickHandler>
  }
}
 800403a:	bf00      	nop
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010

08004044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004044:	b580      	push	{r7, lr}
 8004046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004048:	2100      	movs	r1, #0
 800404a:	f06f 0004 	mvn.w	r0, #4
 800404e:	f7ff ffbf 	bl	8003fd0 <__NVIC_SetPriority>
#endif
}
 8004052:	bf00      	nop
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405e:	f3ef 8305 	mrs	r3, IPSR
 8004062:	603b      	str	r3, [r7, #0]
  return(result);
 8004064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800406a:	f06f 0305 	mvn.w	r3, #5
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	e00c      	b.n	800408c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004072:	4b0a      	ldr	r3, [pc, #40]	@ (800409c <osKernelInitialize+0x44>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800407a:	4b08      	ldr	r3, [pc, #32]	@ (800409c <osKernelInitialize+0x44>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004080:	2300      	movs	r3, #0
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	e002      	b.n	800408c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004086:	f04f 33ff 	mov.w	r3, #4294967295
 800408a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800408c:	687b      	ldr	r3, [r7, #4]
}
 800408e:	4618      	mov	r0, r3
 8004090:	370c      	adds	r7, #12
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	20001b18 	.word	0x20001b18

080040a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a6:	f3ef 8305 	mrs	r3, IPSR
 80040aa:	603b      	str	r3, [r7, #0]
  return(result);
 80040ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80040b2:	f06f 0305 	mvn.w	r3, #5
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	e010      	b.n	80040dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <osKernelStart+0x48>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d109      	bne.n	80040d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040c2:	f7ff ffbf 	bl	8004044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040c6:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <osKernelStart+0x48>)
 80040c8:	2202      	movs	r2, #2
 80040ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040cc:	f001 fd56 	bl	8005b7c <vTaskStartScheduler>
      stat = osOK;
 80040d0:	2300      	movs	r3, #0
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	e002      	b.n	80040dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040d6:	f04f 33ff 	mov.w	r3, #4294967295
 80040da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040dc:	687b      	ldr	r3, [r7, #4]
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	20001b18 	.word	0x20001b18

080040ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08e      	sub	sp, #56	@ 0x38
 80040f0:	af04      	add	r7, sp, #16
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040fc:	f3ef 8305 	mrs	r3, IPSR
 8004100:	617b      	str	r3, [r7, #20]
  return(result);
 8004102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004104:	2b00      	cmp	r3, #0
 8004106:	d17e      	bne.n	8004206 <osThreadNew+0x11a>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d07b      	beq.n	8004206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800410e:	2380      	movs	r3, #128	@ 0x80
 8004110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004112:	2318      	movs	r3, #24
 8004114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004116:	2300      	movs	r3, #0
 8004118:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800411a:	f04f 33ff 	mov.w	r3, #4294967295
 800411e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d045      	beq.n	80041b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <osThreadNew+0x48>
        name = attr->name;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d008      	beq.n	800415a <osThreadNew+0x6e>
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	2b38      	cmp	r3, #56	@ 0x38
 800414c:	d805      	bhi.n	800415a <osThreadNew+0x6e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <osThreadNew+0x72>
        return (NULL);
 800415a:	2300      	movs	r3, #0
 800415c:	e054      	b.n	8004208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d003      	beq.n	800416e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00e      	beq.n	8004194 <osThreadNew+0xa8>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b5b      	cmp	r3, #91	@ 0x5b
 800417c:	d90a      	bls.n	8004194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004182:	2b00      	cmp	r3, #0
 8004184:	d006      	beq.n	8004194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <osThreadNew+0xa8>
        mem = 1;
 800418e:	2301      	movs	r3, #1
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e010      	b.n	80041b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10c      	bne.n	80041b6 <osThreadNew+0xca>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d108      	bne.n	80041b6 <osThreadNew+0xca>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d104      	bne.n	80041b6 <osThreadNew+0xca>
          mem = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e001      	b.n	80041b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d110      	bne.n	80041de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80041c4:	9202      	str	r2, [sp, #8]
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	6a3a      	ldr	r2, [r7, #32]
 80041d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f001 faf6 	bl	80057c4 <xTaskCreateStatic>
 80041d8:	4603      	mov	r3, r0
 80041da:	613b      	str	r3, [r7, #16]
 80041dc:	e013      	b.n	8004206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d110      	bne.n	8004206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	b29a      	uxth	r2, r3
 80041e8:	f107 0310 	add.w	r3, r7, #16
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f001 fb44 	bl	8005884 <xTaskCreate>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d001      	beq.n	8004206 <osThreadNew+0x11a>
            hTask = NULL;
 8004202:	2300      	movs	r3, #0
 8004204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004206:	693b      	ldr	r3, [r7, #16]
}
 8004208:	4618      	mov	r0, r3
 800420a:	3728      	adds	r7, #40	@ 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004218:	f3ef 8305 	mrs	r3, IPSR
 800421c:	60bb      	str	r3, [r7, #8]
  return(result);
 800421e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <osDelay+0x1c>
    stat = osErrorISR;
 8004224:	f06f 0305 	mvn.w	r3, #5
 8004228:	60fb      	str	r3, [r7, #12]
 800422a:	e007      	b.n	800423c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d002      	beq.n	800423c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f001 fc6a 	bl	8005b10 <vTaskDelay>
    }
  }

  return (stat);
 800423c:	68fb      	ldr	r3, [r7, #12]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004246:	b580      	push	{r7, lr}
 8004248:	b088      	sub	sp, #32
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004252:	f3ef 8305 	mrs	r3, IPSR
 8004256:	60bb      	str	r3, [r7, #8]
  return(result);
 8004258:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800425a:	2b00      	cmp	r3, #0
 800425c:	d174      	bne.n	8004348 <osMutexNew+0x102>
    if (attr != NULL) {
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d003      	beq.n	800426c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e001      	b.n	8004270 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800426c:	2300      	movs	r3, #0
 800426e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <osMutexNew+0x3a>
      rmtx = 1U;
 800427a:	2301      	movs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e001      	b.n	8004284 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d15c      	bne.n	8004348 <osMutexNew+0x102>
      mem = -1;
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d015      	beq.n	80042c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <osMutexNew+0x6a>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b4f      	cmp	r3, #79	@ 0x4f
 80042a8:	d902      	bls.n	80042b0 <osMutexNew+0x6a>
          mem = 1;
 80042aa:	2301      	movs	r3, #1
 80042ac:	613b      	str	r3, [r7, #16]
 80042ae:	e00c      	b.n	80042ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d108      	bne.n	80042ca <osMutexNew+0x84>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d104      	bne.n	80042ca <osMutexNew+0x84>
            mem = 0;
 80042c0:	2300      	movs	r3, #0
 80042c2:	613b      	str	r3, [r7, #16]
 80042c4:	e001      	b.n	80042ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d112      	bne.n	80042f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	4619      	mov	r1, r3
 80042dc:	2004      	movs	r0, #4
 80042de:	f000 fc50 	bl	8004b82 <xQueueCreateMutexStatic>
 80042e2:	61f8      	str	r0, [r7, #28]
 80042e4:	e016      	b.n	8004314 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4619      	mov	r1, r3
 80042ec:	2001      	movs	r0, #1
 80042ee:	f000 fc48 	bl	8004b82 <xQueueCreateMutexStatic>
 80042f2:	61f8      	str	r0, [r7, #28]
 80042f4:	e00e      	b.n	8004314 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d004      	beq.n	800430c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004302:	2004      	movs	r0, #4
 8004304:	f000 fc25 	bl	8004b52 <xQueueCreateMutex>
 8004308:	61f8      	str	r0, [r7, #28]
 800430a:	e003      	b.n	8004314 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800430c:	2001      	movs	r0, #1
 800430e:	f000 fc20 	bl	8004b52 <xQueueCreateMutex>
 8004312:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <osMutexNew+0xee>
        if (attr != NULL) {
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d003      	beq.n	8004328 <osMutexNew+0xe2>
          name = attr->name;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e001      	b.n	800432c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004328:	2300      	movs	r3, #0
 800432a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	69f8      	ldr	r0, [r7, #28]
 8004330:	f001 f9ea 	bl	8005708 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <osMutexNew+0x102>
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004348:	69fb      	ldr	r3, [r7, #28]
}
 800434a:	4618      	mov	r0, r3
 800434c:	3720      	adds	r7, #32
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004352:	b580      	push	{r7, lr}
 8004354:	b086      	sub	sp, #24
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004370:	f3ef 8305 	mrs	r3, IPSR
 8004374:	60bb      	str	r3, [r7, #8]
  return(result);
 8004376:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800437c:	f06f 0305 	mvn.w	r3, #5
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e02c      	b.n	80043de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800438a:	f06f 0303 	mvn.w	r3, #3
 800438e:	617b      	str	r3, [r7, #20]
 8004390:	e025      	b.n	80043de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d011      	beq.n	80043bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	6938      	ldr	r0, [r7, #16]
 800439c:	f000 fc41 	bl	8004c22 <xQueueTakeMutexRecursive>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d01b      	beq.n	80043de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d003      	beq.n	80043b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80043ac:	f06f 0301 	mvn.w	r3, #1
 80043b0:	617b      	str	r3, [r7, #20]
 80043b2:	e014      	b.n	80043de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80043b4:	f06f 0302 	mvn.w	r3, #2
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e010      	b.n	80043de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80043bc:	6839      	ldr	r1, [r7, #0]
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f000 fee8 	bl	8005194 <xQueueSemaphoreTake>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d009      	beq.n	80043de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80043d0:	f06f 0301 	mvn.w	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e002      	b.n	80043de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80043d8:	f06f 0302 	mvn.w	r3, #2
 80043dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80043de:	697b      	ldr	r3, [r7, #20]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b086      	sub	sp, #24
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004404:	f3ef 8305 	mrs	r3, IPSR
 8004408:	60bb      	str	r3, [r7, #8]
  return(result);
 800440a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004410:	f06f 0305 	mvn.w	r3, #5
 8004414:	617b      	str	r3, [r7, #20]
 8004416:	e01f      	b.n	8004458 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800441e:	f06f 0303 	mvn.w	r3, #3
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e018      	b.n	8004458 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800442c:	6938      	ldr	r0, [r7, #16]
 800442e:	f000 fbc3 	bl	8004bb8 <xQueueGiveMutexRecursive>
 8004432:	4603      	mov	r3, r0
 8004434:	2b01      	cmp	r3, #1
 8004436:	d00f      	beq.n	8004458 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004438:	f06f 0302 	mvn.w	r3, #2
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	e00b      	b.n	8004458 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004440:	2300      	movs	r3, #0
 8004442:	2200      	movs	r2, #0
 8004444:	2100      	movs	r1, #0
 8004446:	6938      	ldr	r0, [r7, #16]
 8004448:	f000 fc22 	bl	8004c90 <xQueueGenericSend>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d002      	beq.n	8004458 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004452:	f06f 0302 	mvn.w	r3, #2
 8004456:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004458:	697b      	ldr	r3, [r7, #20]
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004462:	b580      	push	{r7, lr}
 8004464:	b08a      	sub	sp, #40	@ 0x28
 8004466:	af02      	add	r7, sp, #8
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	60b9      	str	r1, [r7, #8]
 800446c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004472:	f3ef 8305 	mrs	r3, IPSR
 8004476:	613b      	str	r3, [r7, #16]
  return(result);
 8004478:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800447a:	2b00      	cmp	r3, #0
 800447c:	d15f      	bne.n	800453e <osMessageQueueNew+0xdc>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d05c      	beq.n	800453e <osMessageQueueNew+0xdc>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d059      	beq.n	800453e <osMessageQueueNew+0xdc>
    mem = -1;
 800448a:	f04f 33ff 	mov.w	r3, #4294967295
 800448e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d029      	beq.n	80044ea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d012      	beq.n	80044c4 <osMessageQueueNew+0x62>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b4f      	cmp	r3, #79	@ 0x4f
 80044a4:	d90e      	bls.n	80044c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	68b9      	ldr	r1, [r7, #8]
 80044b6:	fb01 f303 	mul.w	r3, r1, r3
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d302      	bcc.n	80044c4 <osMessageQueueNew+0x62>
        mem = 1;
 80044be:	2301      	movs	r3, #1
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	e014      	b.n	80044ee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d110      	bne.n	80044ee <osMessageQueueNew+0x8c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <osMessageQueueNew+0x8c>
          mem = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e001      	b.n	80044ee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d10b      	bne.n	800450c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	2100      	movs	r1, #0
 80044fe:	9100      	str	r1, [sp, #0]
 8004500:	68b9      	ldr	r1, [r7, #8]
 8004502:	68f8      	ldr	r0, [r7, #12]
 8004504:	f000 fa30 	bl	8004968 <xQueueGenericCreateStatic>
 8004508:	61f8      	str	r0, [r7, #28]
 800450a:	e008      	b.n	800451e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004512:	2200      	movs	r2, #0
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 faa3 	bl	8004a62 <xQueueGenericCreate>
 800451c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00c      	beq.n	800453e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <osMessageQueueNew+0xd0>
        name = attr->name;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e001      	b.n	8004536 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004536:	6979      	ldr	r1, [r7, #20]
 8004538:	69f8      	ldr	r0, [r7, #28]
 800453a:	f001 f8e5 	bl	8005708 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800453e:	69fb      	ldr	r3, [r7, #28]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3720      	adds	r7, #32
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b088      	sub	sp, #32
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800455c:	2300      	movs	r3, #0
 800455e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004560:	f3ef 8305 	mrs	r3, IPSR
 8004564:	617b      	str	r3, [r7, #20]
  return(result);
 8004566:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004568:	2b00      	cmp	r3, #0
 800456a:	d028      	beq.n	80045be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <osMessageQueuePut+0x36>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <osMessageQueuePut+0x36>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800457e:	f06f 0303 	mvn.w	r3, #3
 8004582:	61fb      	str	r3, [r7, #28]
 8004584:	e038      	b.n	80045f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004586:	2300      	movs	r3, #0
 8004588:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800458a:	f107 0210 	add.w	r2, r7, #16
 800458e:	2300      	movs	r3, #0
 8004590:	68b9      	ldr	r1, [r7, #8]
 8004592:	69b8      	ldr	r0, [r7, #24]
 8004594:	f000 fc7e 	bl	8004e94 <xQueueGenericSendFromISR>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d003      	beq.n	80045a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800459e:	f06f 0302 	mvn.w	r3, #2
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e028      	b.n	80045f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d025      	beq.n	80045f8 <osMessageQueuePut+0xb0>
 80045ac:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <osMessageQueuePut+0xbc>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
 80045bc:	e01c      	b.n	80045f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d002      	beq.n	80045ca <osMessageQueuePut+0x82>
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d103      	bne.n	80045d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80045ca:	f06f 0303 	mvn.w	r3, #3
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	e012      	b.n	80045f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80045d2:	2300      	movs	r3, #0
 80045d4:	683a      	ldr	r2, [r7, #0]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	69b8      	ldr	r0, [r7, #24]
 80045da:	f000 fb59 	bl	8004c90 <xQueueGenericSend>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d009      	beq.n	80045f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80045ea:	f06f 0301 	mvn.w	r3, #1
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e002      	b.n	80045f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80045f2:	f06f 0302 	mvn.w	r3, #2
 80045f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80045f8:	69fb      	ldr	r3, [r7, #28]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3720      	adds	r7, #32
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	e000ed04 	.word	0xe000ed04

08004608 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	617b      	str	r3, [r7, #20]
  return(result);
 8004624:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d028      	beq.n	800467c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <osMessageQueueGet+0x34>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d002      	beq.n	800463c <osMessageQueueGet+0x34>
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800463c:	f06f 0303 	mvn.w	r3, #3
 8004640:	61fb      	str	r3, [r7, #28]
 8004642:	e037      	b.n	80046b4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004648:	f107 0310 	add.w	r3, r7, #16
 800464c:	461a      	mov	r2, r3
 800464e:	68b9      	ldr	r1, [r7, #8]
 8004650:	69b8      	ldr	r0, [r7, #24]
 8004652:	f000 feaf 	bl	80053b4 <xQueueReceiveFromISR>
 8004656:	4603      	mov	r3, r0
 8004658:	2b01      	cmp	r3, #1
 800465a:	d003      	beq.n	8004664 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800465c:	f06f 0302 	mvn.w	r3, #2
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	e027      	b.n	80046b4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d024      	beq.n	80046b4 <osMessageQueueGet+0xac>
 800466a:	4b15      	ldr	r3, [pc, #84]	@ (80046c0 <osMessageQueueGet+0xb8>)
 800466c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004670:	601a      	str	r2, [r3, #0]
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	e01b      	b.n	80046b4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d002      	beq.n	8004688 <osMessageQueueGet+0x80>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d103      	bne.n	8004690 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004688:	f06f 0303 	mvn.w	r3, #3
 800468c:	61fb      	str	r3, [r7, #28]
 800468e:	e011      	b.n	80046b4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004690:	683a      	ldr	r2, [r7, #0]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	69b8      	ldr	r0, [r7, #24]
 8004696:	f000 fc9b 	bl	8004fd0 <xQueueReceive>
 800469a:	4603      	mov	r3, r0
 800469c:	2b01      	cmp	r3, #1
 800469e:	d009      	beq.n	80046b4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80046a6:	f06f 0301 	mvn.w	r3, #1
 80046aa:	61fb      	str	r3, [r7, #28]
 80046ac:	e002      	b.n	80046b4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80046ae:	f06f 0302 	mvn.w	r3, #2
 80046b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80046b4:	69fb      	ldr	r3, [r7, #28]
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3720      	adds	r7, #32
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	e000ed04 	.word	0xe000ed04

080046c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a06      	ldr	r2, [pc, #24]	@ (80046f4 <vApplicationGetIdleTaskMemory+0x30>)
 80046da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2280      	movs	r2, #128	@ 0x80
 80046e0:	601a      	str	r2, [r3, #0]
}
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20001b1c 	.word	0x20001b1c
 80046f4:	20001b78 	.word	0x20001b78

080046f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	4a07      	ldr	r2, [pc, #28]	@ (8004724 <vApplicationGetTimerTaskMemory+0x2c>)
 8004708:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	4a06      	ldr	r2, [pc, #24]	@ (8004728 <vApplicationGetTimerTaskMemory+0x30>)
 800470e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004716:	601a      	str	r2, [r3, #0]
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	20001d78 	.word	0x20001d78
 8004728:	20001dd4 	.word	0x20001dd4

0800472c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f103 0208 	add.w	r2, r3, #8
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f04f 32ff 	mov.w	r2, #4294967295
 8004744:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f103 0208 	add.w	r2, r3, #8
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f103 0208 	add.w	r2, r3, #8
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004786:	b480      	push	{r7}
 8004788:	b085      	sub	sp, #20
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
 800478e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	683a      	ldr	r2, [r7, #0]
 80047aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	1c5a      	adds	r2, r3, #1
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	601a      	str	r2, [r3, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047ce:	b480      	push	{r7}
 80047d0:	b085      	sub	sp, #20
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
 80047d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e4:	d103      	bne.n	80047ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e00c      	b.n	8004808 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3308      	adds	r3, #8
 80047f2:	60fb      	str	r3, [r7, #12]
 80047f4:	e002      	b.n	80047fc <vListInsert+0x2e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d2f6      	bcs.n	80047f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	683a      	ldr	r2, [r7, #0]
 8004816:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	601a      	str	r2, [r3, #0]
}
 8004834:	bf00      	nop
 8004836:	3714      	adds	r7, #20
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	6892      	ldr	r2, [r2, #8]
 8004856:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6852      	ldr	r2, [r2, #4]
 8004860:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	d103      	bne.n	8004874 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	1e5a      	subs	r2, r3, #1
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3714      	adds	r7, #20
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10b      	bne.n	80048c0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ac:	f383 8811 	msr	BASEPRI, r3
 80048b0:	f3bf 8f6f 	isb	sy
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048ba:	bf00      	nop
 80048bc:	bf00      	nop
 80048be:	e7fd      	b.n	80048bc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80048c0:	f002 fc2a 	bl	8007118 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	441a      	add	r2, r3
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f0:	3b01      	subs	r3, #1
 80048f2:	68f9      	ldr	r1, [r7, #12]
 80048f4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	441a      	add	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	22ff      	movs	r2, #255	@ 0xff
 8004904:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	22ff      	movs	r2, #255	@ 0xff
 800490c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d114      	bne.n	8004940 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d01a      	beq.n	8004954 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	3310      	adds	r3, #16
 8004922:	4618      	mov	r0, r3
 8004924:	f001 fbb8 	bl	8006098 <xTaskRemoveFromEventList>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d012      	beq.n	8004954 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <xQueueGenericReset+0xd0>)
 8004930:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	e009      	b.n	8004954 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3310      	adds	r3, #16
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff fef1 	bl	800472c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3324      	adds	r3, #36	@ 0x24
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff feec 	bl	800472c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004954:	f002 fc12 	bl	800717c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004958:	2301      	movs	r3, #1
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	e000ed04 	.word	0xe000ed04

08004968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004968:	b580      	push	{r7, lr}
 800496a:	b08e      	sub	sp, #56	@ 0x38
 800496c:	af02      	add	r7, sp, #8
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800498e:	bf00      	nop
 8004990:	bf00      	nop
 8004992:	e7fd      	b.n	8004990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d002      	beq.n	80049be <xQueueGenericCreateStatic+0x56>
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <xQueueGenericCreateStatic+0x5a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <xQueueGenericCreateStatic+0x5c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10b      	bne.n	80049e0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80049c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049cc:	f383 8811 	msr	BASEPRI, r3
 80049d0:	f3bf 8f6f 	isb	sy
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	623b      	str	r3, [r7, #32]
}
 80049da:	bf00      	nop
 80049dc:	bf00      	nop
 80049de:	e7fd      	b.n	80049dc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <xQueueGenericCreateStatic+0x84>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <xQueueGenericCreateStatic+0x88>
 80049ec:	2301      	movs	r3, #1
 80049ee:	e000      	b.n	80049f2 <xQueueGenericCreateStatic+0x8a>
 80049f0:	2300      	movs	r3, #0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	61fb      	str	r3, [r7, #28]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a0e:	2350      	movs	r3, #80	@ 0x50
 8004a10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b50      	cmp	r3, #80	@ 0x50
 8004a16:	d00b      	beq.n	8004a30 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	61bb      	str	r3, [r7, #24]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004a30:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a44:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f000 f840 	bl	8004ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3730      	adds	r7, #48	@ 0x30
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	@ 0x28
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10b      	bne.n	8004a8e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	613b      	str	r3, [r7, #16]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	68ba      	ldr	r2, [r7, #8]
 8004a92:	fb02 f303 	mul.w	r3, r2, r3
 8004a96:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	3350      	adds	r3, #80	@ 0x50
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f002 fc5d 	bl	800735c <pvPortMalloc>
 8004aa2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d011      	beq.n	8004ace <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	3350      	adds	r3, #80	@ 0x50
 8004ab2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004abc:	79fa      	ldrb	r2, [r7, #7]
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	9300      	str	r3, [sp, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	68b9      	ldr	r1, [r7, #8]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f000 f805 	bl	8004ad8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ace:	69bb      	ldr	r3, [r7, #24]
	}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3720      	adds	r7, #32
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d103      	bne.n	8004af4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e002      	b.n	8004afa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004af4:	69bb      	ldr	r3, [r7, #24]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b06:	2101      	movs	r1, #1
 8004b08:	69b8      	ldr	r0, [r7, #24]
 8004b0a:	f7ff fec3 	bl	8004894 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	78fa      	ldrb	r2, [r7, #3]
 8004b12:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b16:	bf00      	nop
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00e      	beq.n	8004b4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004b3e:	2300      	movs	r3, #0
 8004b40:	2200      	movs	r2, #0
 8004b42:	2100      	movs	r1, #0
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8a3 	bl	8004c90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004b4a:	bf00      	nop
 8004b4c:	3708      	adds	r7, #8
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}

08004b52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004b52:	b580      	push	{r7, lr}
 8004b54:	b086      	sub	sp, #24
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	4603      	mov	r3, r0
 8004b5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	2300      	movs	r3, #0
 8004b62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	461a      	mov	r2, r3
 8004b68:	6939      	ldr	r1, [r7, #16]
 8004b6a:	6978      	ldr	r0, [r7, #20]
 8004b6c:	f7ff ff79 	bl	8004a62 <xQueueGenericCreate>
 8004b70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004b72:	68f8      	ldr	r0, [r7, #12]
 8004b74:	f7ff ffd3 	bl	8004b1e <prvInitialiseMutex>

		return xNewQueue;
 8004b78:	68fb      	ldr	r3, [r7, #12]
	}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b088      	sub	sp, #32
 8004b86:	af02      	add	r7, sp, #8
 8004b88:	4603      	mov	r3, r0
 8004b8a:	6039      	str	r1, [r7, #0]
 8004b8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	2300      	movs	r3, #0
 8004b94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004b96:	79fb      	ldrb	r3, [r7, #7]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	6939      	ldr	r1, [r7, #16]
 8004ba0:	6978      	ldr	r0, [r7, #20]
 8004ba2:	f7ff fee1 	bl	8004968 <xQueueGenericCreateStatic>
 8004ba6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f7ff ffb8 	bl	8004b1e <prvInitialiseMutex>

		return xNewQueue;
 8004bae:	68fb      	ldr	r3, [r7, #12]
	}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004bb8:	b590      	push	{r4, r7, lr}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	60fb      	str	r3, [r7, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	689c      	ldr	r4, [r3, #8]
 8004be6:	f001 fc17 	bl	8006418 <xTaskGetCurrentTaskHandle>
 8004bea:	4603      	mov	r3, r0
 8004bec:	429c      	cmp	r4, r3
 8004bee:	d111      	bne.n	8004c14 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	1e5a      	subs	r2, r3, #1
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d105      	bne.n	8004c0e <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004c02:	2300      	movs	r3, #0
 8004c04:	2200      	movs	r2, #0
 8004c06:	2100      	movs	r1, #0
 8004c08:	6938      	ldr	r0, [r7, #16]
 8004c0a:	f000 f841 	bl	8004c90 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	e001      	b.n	8004c18 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004c18:	697b      	ldr	r3, [r7, #20]
	}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	371c      	adds	r7, #28
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd90      	pop	{r4, r7, pc}

08004c22 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004c22:	b590      	push	{r4, r7, lr}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10b      	bne.n	8004c4e <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8004c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3a:	f383 8811 	msr	BASEPRI, r3
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f3bf 8f4f 	dsb	sy
 8004c46:	60fb      	str	r3, [r7, #12]
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	e7fd      	b.n	8004c4a <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	689c      	ldr	r4, [r3, #8]
 8004c52:	f001 fbe1 	bl	8006418 <xTaskGetCurrentTaskHandle>
 8004c56:	4603      	mov	r3, r0
 8004c58:	429c      	cmp	r4, r3
 8004c5a:	d107      	bne.n	8004c6c <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8004c66:	2301      	movs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e00c      	b.n	8004c86 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	6938      	ldr	r0, [r7, #16]
 8004c70:	f000 fa90 	bl	8005194 <xQueueSemaphoreTake>
 8004c74:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8004c86:	697b      	ldr	r3, [r7, #20]
	}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd90      	pop	{r4, r7, pc}

08004c90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b08e      	sub	sp, #56	@ 0x38
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10b      	bne.n	8004cc4 <xQueueGenericSend+0x34>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004cbe:	bf00      	nop
 8004cc0:	bf00      	nop
 8004cc2:	e7fd      	b.n	8004cc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x42>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <xQueueGenericSend+0x46>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <xQueueGenericSend+0x48>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <xQueueGenericSend+0x64>
	__asm volatile
 8004cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004cee:	bf00      	nop
 8004cf0:	bf00      	nop
 8004cf2:	e7fd      	b.n	8004cf0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2b02      	cmp	r3, #2
 8004cf8:	d103      	bne.n	8004d02 <xQueueGenericSend+0x72>
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d101      	bne.n	8004d06 <xQueueGenericSend+0x76>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <xQueueGenericSend+0x78>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericSend+0x94>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	623b      	str	r3, [r7, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d24:	f001 fb88 	bl	8006438 <xTaskGetSchedulerState>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <xQueueGenericSend+0xa4>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d101      	bne.n	8004d38 <xQueueGenericSend+0xa8>
 8004d34:	2301      	movs	r3, #1
 8004d36:	e000      	b.n	8004d3a <xQueueGenericSend+0xaa>
 8004d38:	2300      	movs	r3, #0
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10b      	bne.n	8004d56 <xQueueGenericSend+0xc6>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	61fb      	str	r3, [r7, #28]
}
 8004d50:	bf00      	nop
 8004d52:	bf00      	nop
 8004d54:	e7fd      	b.n	8004d52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d56:	f002 f9df 	bl	8007118 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d302      	bcc.n	8004d6c <xQueueGenericSend+0xdc>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d129      	bne.n	8004dc0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d72:	f000 fbb9 	bl	80054e8 <prvCopyDataToQueue>
 8004d76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d010      	beq.n	8004da2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	3324      	adds	r3, #36	@ 0x24
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 f987 	bl	8006098 <xTaskRemoveFromEventList>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d013      	beq.n	8004db8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d90:	4b3f      	ldr	r3, [pc, #252]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	f3bf 8f6f 	isb	sy
 8004da0:	e00a      	b.n	8004db8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d007      	beq.n	8004db8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004da8:	4b39      	ldr	r3, [pc, #228]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004db8:	f002 f9e0 	bl	800717c <vPortExitCritical>
				return pdPASS;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e063      	b.n	8004e88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004dc6:	f002 f9d9 	bl	800717c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	e05c      	b.n	8004e88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d106      	bne.n	8004de2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dd4:	f107 0314 	add.w	r3, r7, #20
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f001 f9c1 	bl	8006160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004de2:	f002 f9cb 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004de6:	f000 ff31 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004dea:	f002 f995 	bl	8007118 <vPortEnterCritical>
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004df4:	b25b      	sxtb	r3, r3
 8004df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dfa:	d103      	bne.n	8004e04 <xQueueGenericSend+0x174>
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e0a:	b25b      	sxtb	r3, r3
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x18a>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e1a:	f002 f9af 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e1e:	1d3a      	adds	r2, r7, #4
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4611      	mov	r1, r2
 8004e26:	4618      	mov	r0, r3
 8004e28:	f001 f9b0 	bl	800618c <xTaskCheckForTimeOut>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d124      	bne.n	8004e7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e34:	f000 fc50 	bl	80056d8 <prvIsQueueFull>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d018      	beq.n	8004e70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e40:	3310      	adds	r3, #16
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 f8d4 	bl	8005ff4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e4e:	f000 fbdb 	bl	8005608 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e52:	f000 ff09 	bl	8005c68 <xTaskResumeAll>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f47f af7c 	bne.w	8004d56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e90 <xQueueGenericSend+0x200>)
 8004e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	e772      	b.n	8004d56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e72:	f000 fbc9 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e76:	f000 fef7 	bl	8005c68 <xTaskResumeAll>
 8004e7a:	e76c      	b.n	8004d56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004e7e:	f000 fbc3 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e82:	f000 fef1 	bl	8005c68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3738      	adds	r7, #56	@ 0x38
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	e000ed04 	.word	0xe000ed04

08004e94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b090      	sub	sp, #64	@ 0x40
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10b      	bne.n	8004ec4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ebe:	bf00      	nop
 8004ec0:	bf00      	nop
 8004ec2:	e7fd      	b.n	8004ec0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <xQueueGenericSendFromISR+0x3e>
 8004eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d101      	bne.n	8004ed6 <xQueueGenericSendFromISR+0x42>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <xQueueGenericSendFromISR+0x44>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d103      	bne.n	8004f02 <xQueueGenericSendFromISR+0x6e>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d101      	bne.n	8004f06 <xQueueGenericSendFromISR+0x72>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e000      	b.n	8004f08 <xQueueGenericSendFromISR+0x74>
 8004f06:	2300      	movs	r3, #0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	623b      	str	r3, [r7, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f24:	f002 f9d8 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f28:	f3ef 8211 	mrs	r2, BASEPRI
 8004f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f30:	f383 8811 	msr	BASEPRI, r3
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	f3bf 8f4f 	dsb	sy
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d302      	bcc.n	8004f56 <xQueueGenericSendFromISR+0xc2>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d12f      	bne.n	8004fb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004f6c:	f000 fabc 	bl	80054e8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004f70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f78:	d112      	bne.n	8004fa0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d016      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f84:	3324      	adds	r3, #36	@ 0x24
 8004f86:	4618      	mov	r0, r3
 8004f88:	f001 f886 	bl	8006098 <xTaskRemoveFromEventList>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00e      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00b      	beq.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e007      	b.n	8004fb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	b25a      	sxtb	r2, r3
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004fb4:	e001      	b.n	8004fba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004fba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004fc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3740      	adds	r7, #64	@ 0x40
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b08c      	sub	sp, #48	@ 0x30
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	60f8      	str	r0, [r7, #12]
 8004fd8:	60b9      	str	r1, [r7, #8]
 8004fda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d10b      	bne.n	8005002 <xQueueReceive+0x32>
	__asm volatile
 8004fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	623b      	str	r3, [r7, #32]
}
 8004ffc:	bf00      	nop
 8004ffe:	bf00      	nop
 8005000:	e7fd      	b.n	8004ffe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d103      	bne.n	8005010 <xQueueReceive+0x40>
 8005008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800500a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <xQueueReceive+0x44>
 8005010:	2301      	movs	r3, #1
 8005012:	e000      	b.n	8005016 <xQueueReceive+0x46>
 8005014:	2300      	movs	r3, #0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10b      	bne.n	8005032 <xQueueReceive+0x62>
	__asm volatile
 800501a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	61fb      	str	r3, [r7, #28]
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	e7fd      	b.n	800502e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005032:	f001 fa01 	bl	8006438 <xTaskGetSchedulerState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d102      	bne.n	8005042 <xQueueReceive+0x72>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <xQueueReceive+0x76>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueReceive+0x78>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10b      	bne.n	8005064 <xQueueReceive+0x94>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	61bb      	str	r3, [r7, #24]
}
 800505e:	bf00      	nop
 8005060:	bf00      	nop
 8005062:	e7fd      	b.n	8005060 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005064:	f002 f858 	bl	8007118 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d01f      	beq.n	80050b4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005078:	f000 faa0 	bl	80055bc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800507c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005082:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00f      	beq.n	80050ac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800508c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508e:	3310      	adds	r3, #16
 8005090:	4618      	mov	r0, r3
 8005092:	f001 f801 	bl	8006098 <xTaskRemoveFromEventList>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800509c:	4b3c      	ldr	r3, [pc, #240]	@ (8005190 <xQueueReceive+0x1c0>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80050ac:	f002 f866 	bl	800717c <vPortExitCritical>
				return pdPASS;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e069      	b.n	8005188 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ba:	f002 f85f 	bl	800717c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80050be:	2300      	movs	r3, #0
 80050c0:	e062      	b.n	8005188 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c8:	f107 0310 	add.w	r3, r7, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 f847 	bl	8006160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d6:	f002 f851 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050da:	f000 fdb7 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050de:	f002 f81b 	bl	8007118 <vPortEnterCritical>
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <xQueueReceive+0x128>
 80050f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d103      	bne.n	800510e <xQueueReceive+0x13e>
 8005106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510e:	f002 f835 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0310 	add.w	r3, r7, #16
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f836 	bl	800618c <xTaskCheckForTimeOut>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d123      	bne.n	800516e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005126:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005128:	f000 fac0 	bl	80056ac <prvIsQueueEmpty>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d017      	beq.n	8005162 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005134:	3324      	adds	r3, #36	@ 0x24
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f000 ff5a 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005140:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005142:	f000 fa61 	bl	8005608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005146:	f000 fd8f 	bl	8005c68 <xTaskResumeAll>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d189      	bne.n	8005064 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005150:	4b0f      	ldr	r3, [pc, #60]	@ (8005190 <xQueueReceive+0x1c0>)
 8005152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005156:	601a      	str	r2, [r3, #0]
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	e780      	b.n	8005064 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005162:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005164:	f000 fa50 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005168:	f000 fd7e 	bl	8005c68 <xTaskResumeAll>
 800516c:	e77a      	b.n	8005064 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800516e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005170:	f000 fa4a 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005174:	f000 fd78 	bl	8005c68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005178:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800517a:	f000 fa97 	bl	80056ac <prvIsQueueEmpty>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	f43f af6f 	beq.w	8005064 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005186:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005188:	4618      	mov	r0, r3
 800518a:	3730      	adds	r7, #48	@ 0x30
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	e000ed04 	.word	0xe000ed04

08005194 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b08e      	sub	sp, #56	@ 0x38
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80051a6:	2300      	movs	r3, #0
 80051a8:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80051aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	623b      	str	r3, [r7, #32]
}
 80051c2:	bf00      	nop
 80051c4:	bf00      	nop
 80051c6:	e7fd      	b.n	80051c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00b      	beq.n	80051e8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	61fb      	str	r3, [r7, #28]
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051e8:	f001 f926 	bl	8006438 <xTaskGetSchedulerState>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <xQueueSemaphoreTake+0x64>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <xQueueSemaphoreTake+0x68>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e000      	b.n	80051fe <xQueueSemaphoreTake+0x6a>
 80051fc:	2300      	movs	r3, #0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10b      	bne.n	800521a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	61bb      	str	r3, [r7, #24]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800521a:	f001 ff7d 	bl	8007118 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800521e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005222:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d024      	beq.n	8005274 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800523a:	f001 fa77 	bl	800672c <pvTaskIncrementMutexHeldCount>
 800523e:	4602      	mov	r2, r0
 8005240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005242:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00f      	beq.n	800526c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524e:	3310      	adds	r3, #16
 8005250:	4618      	mov	r0, r3
 8005252:	f000 ff21 	bl	8006098 <xTaskRemoveFromEventList>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d007      	beq.n	800526c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800525c:	4b54      	ldr	r3, [pc, #336]	@ (80053b0 <xQueueSemaphoreTake+0x21c>)
 800525e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800526c:	f001 ff86 	bl	800717c <vPortExitCritical>
				return pdPASS;
 8005270:	2301      	movs	r3, #1
 8005272:	e098      	b.n	80053a6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d112      	bne.n	80052a0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	617b      	str	r3, [r7, #20]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005298:	f001 ff70 	bl	800717c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800529c:	2300      	movs	r3, #0
 800529e:	e082      	b.n	80053a6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052a6:	f107 030c 	add.w	r3, r7, #12
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 ff58 	bl	8006160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052b4:	f001 ff62 	bl	800717c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052b8:	f000 fcc8 	bl	8005c4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052bc:	f001 ff2c 	bl	8007118 <vPortEnterCritical>
 80052c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052c6:	b25b      	sxtb	r3, r3
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d103      	bne.n	80052d6 <xQueueSemaphoreTake+0x142>
 80052ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e2:	d103      	bne.n	80052ec <xQueueSemaphoreTake+0x158>
 80052e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052ec:	f001 ff46 	bl	800717c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052f0:	463a      	mov	r2, r7
 80052f2:	f107 030c 	add.w	r3, r7, #12
 80052f6:	4611      	mov	r1, r2
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 ff47 	bl	800618c <xTaskCheckForTimeOut>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d132      	bne.n	800536a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005306:	f000 f9d1 	bl	80056ac <prvIsQueueEmpty>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d026      	beq.n	800535e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005318:	f001 fefe 	bl	8007118 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800531c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f8a7 	bl	8006474 <xTaskPriorityInherit>
 8005326:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005328:	f001 ff28 	bl	800717c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800532c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532e:	3324      	adds	r3, #36	@ 0x24
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	4611      	mov	r1, r2
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fe5d 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800533a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800533c:	f000 f964 	bl	8005608 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005340:	f000 fc92 	bl	8005c68 <xTaskResumeAll>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	f47f af67 	bne.w	800521a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800534c:	4b18      	ldr	r3, [pc, #96]	@ (80053b0 <xQueueSemaphoreTake+0x21c>)
 800534e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005352:	601a      	str	r2, [r3, #0]
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	e75d      	b.n	800521a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800535e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005360:	f000 f952 	bl	8005608 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005364:	f000 fc80 	bl	8005c68 <xTaskResumeAll>
 8005368:	e757      	b.n	800521a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800536a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800536c:	f000 f94c 	bl	8005608 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005370:	f000 fc7a 	bl	8005c68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005374:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005376:	f000 f999 	bl	80056ac <prvIsQueueEmpty>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	f43f af4c 	beq.w	800521a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00d      	beq.n	80053a4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005388:	f001 fec6 	bl	8007118 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800538c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800538e:	f000 f893 	bl	80054b8 <prvGetDisinheritPriorityAfterTimeout>
 8005392:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800539a:	4618      	mov	r0, r3
 800539c:	f001 f942 	bl	8006624 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80053a0:	f001 feec 	bl	800717c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3738      	adds	r7, #56	@ 0x38
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08e      	sub	sp, #56	@ 0x38
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10b      	bne.n	80053e2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	623b      	str	r3, [r7, #32]
}
 80053dc:	bf00      	nop
 80053de:	bf00      	nop
 80053e0:	e7fd      	b.n	80053de <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d103      	bne.n	80053f0 <xQueueReceiveFromISR+0x3c>
 80053e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d101      	bne.n	80053f4 <xQueueReceiveFromISR+0x40>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e000      	b.n	80053f6 <xQueueReceiveFromISR+0x42>
 80053f4:	2300      	movs	r3, #0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61fb      	str	r3, [r7, #28]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005412:	f001 ff61 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005416:	f3ef 8211 	mrs	r2, BASEPRI
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	61ba      	str	r2, [r7, #24]
 800542c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800542e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005430:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005436:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02f      	beq.n	800549e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800543e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005440:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005444:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800544c:	f000 f8b6 	bl	80055bc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005450:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005452:	1e5a      	subs	r2, r3, #1
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005458:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800545c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005460:	d112      	bne.n	8005488 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d016      	beq.n	8005498 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fe12 	bl	8006098 <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00e      	beq.n	8005498 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00b      	beq.n	8005498 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	601a      	str	r2, [r3, #0]
 8005486:	e007      	b.n	8005498 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005488:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800548c:	3301      	adds	r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	b25a      	sxtb	r2, r3
 8005492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005498:	2301      	movs	r3, #1
 800549a:	637b      	str	r3, [r7, #52]	@ 0x34
 800549c:	e001      	b.n	80054a2 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800549e:	2300      	movs	r3, #0
 80054a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f383 8811 	msr	BASEPRI, r3
}
 80054ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3738      	adds	r7, #56	@ 0x38
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d006      	beq.n	80054d6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80054d2:	60fb      	str	r3, [r7, #12]
 80054d4:	e001      	b.n	80054da <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80054da:	68fb      	ldr	r3, [r7, #12]
	}
 80054dc:	4618      	mov	r0, r3
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr

080054e8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b086      	sub	sp, #24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d10d      	bne.n	8005522 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d14d      	bne.n	80055aa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	4618      	mov	r0, r3
 8005514:	f001 f816 	bl	8006544 <xTaskPriorityDisinherit>
 8005518:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	609a      	str	r2, [r3, #8]
 8005520:	e043      	b.n	80055aa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d119      	bne.n	800555c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6858      	ldr	r0, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005530:	461a      	mov	r2, r3
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	f002 f96e 	bl	8007814 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	429a      	cmp	r2, r3
 8005550:	d32b      	bcc.n	80055aa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	e026      	b.n	80055aa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68d8      	ldr	r0, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005564:	461a      	mov	r2, r3
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	f002 f954 	bl	8007814 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005574:	425b      	negs	r3, r3
 8005576:	441a      	add	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	68da      	ldr	r2, [r3, #12]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	429a      	cmp	r2, r3
 8005586:	d207      	bcs.n	8005598 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	689a      	ldr	r2, [r3, #8]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005590:	425b      	negs	r3, r3
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b02      	cmp	r3, #2
 800559c:	d105      	bne.n	80055aa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d002      	beq.n	80055aa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3b01      	subs	r3, #1
 80055a8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80055b2:	697b      	ldr	r3, [r7, #20]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3718      	adds	r7, #24
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d018      	beq.n	8005600 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	441a      	add	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d303      	bcc.n	80055f0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68d9      	ldr	r1, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	461a      	mov	r2, r3
 80055fa:	6838      	ldr	r0, [r7, #0]
 80055fc:	f002 f90a 	bl	8007814 <memcpy>
	}
}
 8005600:	bf00      	nop
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005610:	f001 fd82 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800561a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800561c:	e011      	b.n	8005642 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	2b00      	cmp	r3, #0
 8005624:	d012      	beq.n	800564c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	3324      	adds	r3, #36	@ 0x24
 800562a:	4618      	mov	r0, r3
 800562c:	f000 fd34 	bl	8006098 <xTaskRemoveFromEventList>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d001      	beq.n	800563a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005636:	f000 fe0d 	bl	8006254 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	3b01      	subs	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005642:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dce9      	bgt.n	800561e <prvUnlockQueue+0x16>
 800564a:	e000      	b.n	800564e <prvUnlockQueue+0x46>
					break;
 800564c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	22ff      	movs	r2, #255	@ 0xff
 8005652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005656:	f001 fd91 	bl	800717c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800565a:	f001 fd5d 	bl	8007118 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005664:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005666:	e011      	b.n	800568c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d012      	beq.n	8005696 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3310      	adds	r3, #16
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fd0f 	bl	8006098 <xTaskRemoveFromEventList>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005680:	f000 fde8 	bl	8006254 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005684:	7bbb      	ldrb	r3, [r7, #14]
 8005686:	3b01      	subs	r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800568c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dce9      	bgt.n	8005668 <prvUnlockQueue+0x60>
 8005694:	e000      	b.n	8005698 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005696:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	22ff      	movs	r2, #255	@ 0xff
 800569c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80056a0:	f001 fd6c 	bl	800717c <vPortExitCritical>
}
 80056a4:	bf00      	nop
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056b4:	f001 fd30 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056c0:	2301      	movs	r3, #1
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e001      	b.n	80056ca <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056c6:	2300      	movs	r3, #0
 80056c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f001 fd57 	bl	800717c <vPortExitCritical>

	return xReturn;
 80056ce:	68fb      	ldr	r3, [r7, #12]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056e0:	f001 fd1a 	bl	8007118 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d102      	bne.n	80056f6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	e001      	b.n	80056fa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056fa:	f001 fd3f 	bl	800717c <vPortExitCritical>

	return xReturn;
 80056fe:	68fb      	ldr	r3, [r7, #12]
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	e014      	b.n	8005742 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005718:	4a0f      	ldr	r2, [pc, #60]	@ (8005758 <vQueueAddToRegistry+0x50>)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10b      	bne.n	800573c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005724:	490c      	ldr	r1, [pc, #48]	@ (8005758 <vQueueAddToRegistry+0x50>)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800572e:	4a0a      	ldr	r2, [pc, #40]	@ (8005758 <vQueueAddToRegistry+0x50>)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	00db      	lsls	r3, r3, #3
 8005734:	4413      	add	r3, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800573a:	e006      	b.n	800574a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	3301      	adds	r3, #1
 8005740:	60fb      	str	r3, [r7, #12]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2b07      	cmp	r3, #7
 8005746:	d9e7      	bls.n	8005718 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	200021d4 	.word	0x200021d4

0800575c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800575c:	b580      	push	{r7, lr}
 800575e:	b086      	sub	sp, #24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800576c:	f001 fcd4 	bl	8007118 <vPortEnterCritical>
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005776:	b25b      	sxtb	r3, r3
 8005778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800577c:	d103      	bne.n	8005786 <vQueueWaitForMessageRestricted+0x2a>
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800578c:	b25b      	sxtb	r3, r3
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d103      	bne.n	800579c <vQueueWaitForMessageRestricted+0x40>
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	2200      	movs	r2, #0
 8005798:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800579c:	f001 fcee 	bl	800717c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	3324      	adds	r3, #36	@ 0x24
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fc45 	bl	8006040 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057b6:	6978      	ldr	r0, [r7, #20]
 80057b8:	f7ff ff26 	bl	8005608 <prvUnlockQueue>
	}
 80057bc:	bf00      	nop
 80057be:	3718      	adds	r7, #24
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08e      	sub	sp, #56	@ 0x38
 80057c8:	af04      	add	r7, sp, #16
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10b      	bne.n	800580e <xTaskCreateStatic+0x4a>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	61fb      	str	r3, [r7, #28]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800580e:	235c      	movs	r3, #92	@ 0x5c
 8005810:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b5c      	cmp	r3, #92	@ 0x5c
 8005816:	d00b      	beq.n	8005830 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	61bb      	str	r3, [r7, #24]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005830:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01e      	beq.n	8005876 <xTaskCreateStatic+0xb2>
 8005838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800583a:	2b00      	cmp	r3, #0
 800583c:	d01b      	beq.n	8005876 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800583e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005850:	2300      	movs	r3, #0
 8005852:	9303      	str	r3, [sp, #12]
 8005854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	f107 0314 	add.w	r3, r7, #20
 800585c:	9301      	str	r3, [sp, #4]
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f850 	bl	800590e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800586e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005870:	f000 f8de 	bl	8005a30 <prvAddNewTaskToReadyList>
 8005874:	e001      	b.n	800587a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005876:	2300      	movs	r3, #0
 8005878:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800587a:	697b      	ldr	r3, [r7, #20]
	}
 800587c:	4618      	mov	r0, r3
 800587e:	3728      	adds	r7, #40	@ 0x28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}

08005884 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005884:	b580      	push	{r7, lr}
 8005886:	b08c      	sub	sp, #48	@ 0x30
 8005888:	af04      	add	r7, sp, #16
 800588a:	60f8      	str	r0, [r7, #12]
 800588c:	60b9      	str	r1, [r7, #8]
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	4613      	mov	r3, r2
 8005892:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005894:	88fb      	ldrh	r3, [r7, #6]
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4618      	mov	r0, r3
 800589a:	f001 fd5f 	bl	800735c <pvPortMalloc>
 800589e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00e      	beq.n	80058c4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058a6:	205c      	movs	r0, #92	@ 0x5c
 80058a8:	f001 fd58 	bl	800735c <pvPortMalloc>
 80058ac:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80058ba:	e005      	b.n	80058c8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058bc:	6978      	ldr	r0, [r7, #20]
 80058be:	f001 fe1b 	bl	80074f8 <vPortFree>
 80058c2:	e001      	b.n	80058c8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058c8:	69fb      	ldr	r3, [r7, #28]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d017      	beq.n	80058fe <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	2300      	movs	r3, #0
 80058da:	9303      	str	r3, [sp, #12]
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9302      	str	r3, [sp, #8]
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	9301      	str	r3, [sp, #4]
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	9300      	str	r3, [sp, #0]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f80e 	bl	800590e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058f2:	69f8      	ldr	r0, [r7, #28]
 80058f4:	f000 f89c 	bl	8005a30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058f8:	2301      	movs	r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
 80058fc:	e002      	b.n	8005904 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005904:	69bb      	ldr	r3, [r7, #24]
	}
 8005906:	4618      	mov	r0, r3
 8005908:	3720      	adds	r7, #32
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b088      	sub	sp, #32
 8005912:	af00      	add	r7, sp, #0
 8005914:	60f8      	str	r0, [r7, #12]
 8005916:	60b9      	str	r1, [r7, #8]
 8005918:	607a      	str	r2, [r7, #4]
 800591a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	461a      	mov	r2, r3
 8005926:	21a5      	movs	r1, #165	@ 0xa5
 8005928:	f001 ff40 	bl	80077ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800592c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005936:	3b01      	subs	r3, #1
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	2b00      	cmp	r3, #0
 800594e:	d00b      	beq.n	8005968 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	617b      	str	r3, [r7, #20]
}
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01f      	beq.n	80059ae <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
 8005972:	e012      	b.n	800599a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005974:	68ba      	ldr	r2, [r7, #8]
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	4413      	add	r3, r2
 800597a:	7819      	ldrb	r1, [r3, #0]
 800597c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	4413      	add	r3, r2
 8005982:	3334      	adds	r3, #52	@ 0x34
 8005984:	460a      	mov	r2, r1
 8005986:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d006      	beq.n	80059a2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3301      	adds	r3, #1
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b0f      	cmp	r3, #15
 800599e:	d9e9      	bls.n	8005974 <prvInitialiseNewTask+0x66>
 80059a0:	e000      	b.n	80059a4 <prvInitialiseNewTask+0x96>
			{
				break;
 80059a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ac:	e003      	b.n	80059b6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	2b37      	cmp	r3, #55	@ 0x37
 80059ba:	d901      	bls.n	80059c0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059bc:	2337      	movs	r3, #55	@ 0x37
 80059be:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059ca:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ce:	2200      	movs	r2, #0
 80059d0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	3304      	adds	r3, #4
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fe fec8 	bl	800476c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	3318      	adds	r3, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7fe fec3 	bl	800476c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	2200      	movs	r2, #0
 8005a00:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a0a:	683a      	ldr	r2, [r7, #0]
 8005a0c:	68f9      	ldr	r1, [r7, #12]
 8005a0e:	69b8      	ldr	r0, [r7, #24]
 8005a10:	f001 fa4e 	bl	8006eb0 <pxPortInitialiseStack>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a26:	bf00      	nop
 8005a28:	3720      	adds	r7, #32
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a38:	f001 fb6e 	bl	8007118 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a3c:	4b2d      	ldr	r3, [pc, #180]	@ (8005af4 <prvAddNewTaskToReadyList+0xc4>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3301      	adds	r3, #1
 8005a42:	4a2c      	ldr	r2, [pc, #176]	@ (8005af4 <prvAddNewTaskToReadyList+0xc4>)
 8005a44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a46:	4b2c      	ldr	r3, [pc, #176]	@ (8005af8 <prvAddNewTaskToReadyList+0xc8>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a4e:	4a2a      	ldr	r2, [pc, #168]	@ (8005af8 <prvAddNewTaskToReadyList+0xc8>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a54:	4b27      	ldr	r3, [pc, #156]	@ (8005af4 <prvAddNewTaskToReadyList+0xc4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d110      	bne.n	8005a7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a5c:	f000 fc1e 	bl	800629c <prvInitialiseTaskLists>
 8005a60:	e00d      	b.n	8005a7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a62:	4b26      	ldr	r3, [pc, #152]	@ (8005afc <prvAddNewTaskToReadyList+0xcc>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a6a:	4b23      	ldr	r3, [pc, #140]	@ (8005af8 <prvAddNewTaskToReadyList+0xc8>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d802      	bhi.n	8005a7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a78:	4a1f      	ldr	r2, [pc, #124]	@ (8005af8 <prvAddNewTaskToReadyList+0xc8>)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a7e:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <prvAddNewTaskToReadyList+0xd0>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	4a1e      	ldr	r2, [pc, #120]	@ (8005b00 <prvAddNewTaskToReadyList+0xd0>)
 8005a86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a88:	4b1d      	ldr	r3, [pc, #116]	@ (8005b00 <prvAddNewTaskToReadyList+0xd0>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a94:	4b1b      	ldr	r3, [pc, #108]	@ (8005b04 <prvAddNewTaskToReadyList+0xd4>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d903      	bls.n	8005aa4 <prvAddNewTaskToReadyList+0x74>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aa0:	4a18      	ldr	r2, [pc, #96]	@ (8005b04 <prvAddNewTaskToReadyList+0xd4>)
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4a15      	ldr	r2, [pc, #84]	@ (8005b08 <prvAddNewTaskToReadyList+0xd8>)
 8005ab2:	441a      	add	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f7fe fe63 	bl	8004786 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ac0:	f001 fb5c 	bl	800717c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8005afc <prvAddNewTaskToReadyList+0xcc>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005acc:	4b0a      	ldr	r3, [pc, #40]	@ (8005af8 <prvAddNewTaskToReadyList+0xc8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d207      	bcs.n	8005aea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005ada:	4b0c      	ldr	r3, [pc, #48]	@ (8005b0c <prvAddNewTaskToReadyList+0xdc>)
 8005adc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	f3bf 8f4f 	dsb	sy
 8005ae6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aea:	bf00      	nop
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200026e8 	.word	0x200026e8
 8005af8:	20002214 	.word	0x20002214
 8005afc:	200026f4 	.word	0x200026f4
 8005b00:	20002704 	.word	0x20002704
 8005b04:	200026f0 	.word	0x200026f0
 8005b08:	20002218 	.word	0x20002218
 8005b0c:	e000ed04 	.word	0xe000ed04

08005b10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d018      	beq.n	8005b54 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b22:	4b14      	ldr	r3, [pc, #80]	@ (8005b74 <vTaskDelay+0x64>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <vTaskDelay+0x32>
	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	60bb      	str	r3, [r7, #8]
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b42:	f000 f883 	bl	8005c4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b46:	2100      	movs	r1, #0
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fe03 	bl	8006754 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b4e:	f000 f88b 	bl	8005c68 <xTaskResumeAll>
 8005b52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d107      	bne.n	8005b6a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b5a:	4b07      	ldr	r3, [pc, #28]	@ (8005b78 <vTaskDelay+0x68>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20002710 	.word	0x20002710
 8005b78:	e000ed04 	.word	0xe000ed04

08005b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	@ 0x28
 8005b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	1d39      	adds	r1, r7, #4
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fe fd96 	bl	80046c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b98:	6839      	ldr	r1, [r7, #0]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68ba      	ldr	r2, [r7, #8]
 8005b9e:	9202      	str	r2, [sp, #8]
 8005ba0:	9301      	str	r3, [sp, #4]
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	460a      	mov	r2, r1
 8005baa:	4922      	ldr	r1, [pc, #136]	@ (8005c34 <vTaskStartScheduler+0xb8>)
 8005bac:	4822      	ldr	r0, [pc, #136]	@ (8005c38 <vTaskStartScheduler+0xbc>)
 8005bae:	f7ff fe09 	bl	80057c4 <xTaskCreateStatic>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	4a21      	ldr	r2, [pc, #132]	@ (8005c3c <vTaskStartScheduler+0xc0>)
 8005bb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bb8:	4b20      	ldr	r3, [pc, #128]	@ (8005c3c <vTaskStartScheduler+0xc0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	617b      	str	r3, [r7, #20]
 8005bc4:	e001      	b.n	8005bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d102      	bne.n	8005bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bd0:	f000 fe14 	bl	80067fc <xTimerCreateTimerTask>
 8005bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d116      	bne.n	8005c0a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	613b      	str	r3, [r7, #16]
}
 8005bee:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bf0:	4b13      	ldr	r3, [pc, #76]	@ (8005c40 <vTaskStartScheduler+0xc4>)
 8005bf2:	f04f 32ff 	mov.w	r2, #4294967295
 8005bf6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bf8:	4b12      	ldr	r3, [pc, #72]	@ (8005c44 <vTaskStartScheduler+0xc8>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bfe:	4b12      	ldr	r3, [pc, #72]	@ (8005c48 <vTaskStartScheduler+0xcc>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c04:	f001 f9e4 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c08:	e00f      	b.n	8005c2a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d10b      	bne.n	8005c2a <vTaskStartScheduler+0xae>
	__asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	60fb      	str	r3, [r7, #12]
}
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <vTaskStartScheduler+0xaa>
}
 8005c2a:	bf00      	nop
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	08008158 	.word	0x08008158
 8005c38:	0800626d 	.word	0x0800626d
 8005c3c:	2000270c 	.word	0x2000270c
 8005c40:	20002708 	.word	0x20002708
 8005c44:	200026f4 	.word	0x200026f4
 8005c48:	200026ec 	.word	0x200026ec

08005c4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c50:	4b04      	ldr	r3, [pc, #16]	@ (8005c64 <vTaskSuspendAll+0x18>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3301      	adds	r3, #1
 8005c56:	4a03      	ldr	r2, [pc, #12]	@ (8005c64 <vTaskSuspendAll+0x18>)
 8005c58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c5a:	bf00      	nop
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	20002710 	.word	0x20002710

08005c68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c76:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <xTaskResumeAll+0x118>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	603b      	str	r3, [r7, #0]
}
 8005c90:	bf00      	nop
 8005c92:	bf00      	nop
 8005c94:	e7fd      	b.n	8005c92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c96:	f001 fa3f 	bl	8007118 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c9a:	4b39      	ldr	r3, [pc, #228]	@ (8005d80 <xTaskResumeAll+0x118>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	3b01      	subs	r3, #1
 8005ca0:	4a37      	ldr	r2, [pc, #220]	@ (8005d80 <xTaskResumeAll+0x118>)
 8005ca2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ca4:	4b36      	ldr	r3, [pc, #216]	@ (8005d80 <xTaskResumeAll+0x118>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d162      	bne.n	8005d72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cac:	4b35      	ldr	r3, [pc, #212]	@ (8005d84 <xTaskResumeAll+0x11c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d05e      	beq.n	8005d72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cb4:	e02f      	b.n	8005d16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cb6:	4b34      	ldr	r3, [pc, #208]	@ (8005d88 <xTaskResumeAll+0x120>)
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3318      	adds	r3, #24
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f7fe fdbc 	bl	8004840 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3304      	adds	r3, #4
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fdb7 	bl	8004840 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d8c <xTaskResumeAll+0x124>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d903      	bls.n	8005ce6 <xTaskResumeAll+0x7e>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ce2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d8c <xTaskResumeAll+0x124>)
 8005ce4:	6013      	str	r3, [r2, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cea:	4613      	mov	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4a27      	ldr	r2, [pc, #156]	@ (8005d90 <xTaskResumeAll+0x128>)
 8005cf4:	441a      	add	r2, r3
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3304      	adds	r3, #4
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	4610      	mov	r0, r2
 8005cfe:	f7fe fd42 	bl	8004786 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d06:	4b23      	ldr	r3, [pc, #140]	@ (8005d94 <xTaskResumeAll+0x12c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005d10:	4b21      	ldr	r3, [pc, #132]	@ (8005d98 <xTaskResumeAll+0x130>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d16:	4b1c      	ldr	r3, [pc, #112]	@ (8005d88 <xTaskResumeAll+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1cb      	bne.n	8005cb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d001      	beq.n	8005d28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d24:	f000 fb58 	bl	80063d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d28:	4b1c      	ldr	r3, [pc, #112]	@ (8005d9c <xTaskResumeAll+0x134>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d010      	beq.n	8005d56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d34:	f000 f846 	bl	8005dc4 <xTaskIncrementTick>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005d3e:	4b16      	ldr	r3, [pc, #88]	@ (8005d98 <xTaskResumeAll+0x130>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3b01      	subs	r3, #1
 8005d48:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1f1      	bne.n	8005d34 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d50:	4b12      	ldr	r3, [pc, #72]	@ (8005d9c <xTaskResumeAll+0x134>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d56:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <xTaskResumeAll+0x130>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d009      	beq.n	8005d72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d62:	4b0f      	ldr	r3, [pc, #60]	@ (8005da0 <xTaskResumeAll+0x138>)
 8005d64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	f3bf 8f4f 	dsb	sy
 8005d6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d72:	f001 fa03 	bl	800717c <vPortExitCritical>

	return xAlreadyYielded;
 8005d76:	68bb      	ldr	r3, [r7, #8]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20002710 	.word	0x20002710
 8005d84:	200026e8 	.word	0x200026e8
 8005d88:	200026a8 	.word	0x200026a8
 8005d8c:	200026f0 	.word	0x200026f0
 8005d90:	20002218 	.word	0x20002218
 8005d94:	20002214 	.word	0x20002214
 8005d98:	200026fc 	.word	0x200026fc
 8005d9c:	200026f8 	.word	0x200026f8
 8005da0:	e000ed04 	.word	0xe000ed04

08005da4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005daa:	4b05      	ldr	r3, [pc, #20]	@ (8005dc0 <xTaskGetTickCount+0x1c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005db0:	687b      	ldr	r3, [r7, #4]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	370c      	adds	r7, #12
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	200026ec 	.word	0x200026ec

08005dc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b086      	sub	sp, #24
 8005dc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dce:	4b4f      	ldr	r3, [pc, #316]	@ (8005f0c <xTaskIncrementTick+0x148>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f040 8090 	bne.w	8005ef8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005dd8:	4b4d      	ldr	r3, [pc, #308]	@ (8005f10 <xTaskIncrementTick+0x14c>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005de0:	4a4b      	ldr	r2, [pc, #300]	@ (8005f10 <xTaskIncrementTick+0x14c>)
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d121      	bne.n	8005e30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dec:	4b49      	ldr	r3, [pc, #292]	@ (8005f14 <xTaskIncrementTick+0x150>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00b      	beq.n	8005e0e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfa:	f383 8811 	msr	BASEPRI, r3
 8005dfe:	f3bf 8f6f 	isb	sy
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	603b      	str	r3, [r7, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	bf00      	nop
 8005e0c:	e7fd      	b.n	8005e0a <xTaskIncrementTick+0x46>
 8005e0e:	4b41      	ldr	r3, [pc, #260]	@ (8005f14 <xTaskIncrementTick+0x150>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	4b40      	ldr	r3, [pc, #256]	@ (8005f18 <xTaskIncrementTick+0x154>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a3e      	ldr	r2, [pc, #248]	@ (8005f14 <xTaskIncrementTick+0x150>)
 8005e1a:	6013      	str	r3, [r2, #0]
 8005e1c:	4a3e      	ldr	r2, [pc, #248]	@ (8005f18 <xTaskIncrementTick+0x154>)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4b3e      	ldr	r3, [pc, #248]	@ (8005f1c <xTaskIncrementTick+0x158>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	3301      	adds	r3, #1
 8005e28:	4a3c      	ldr	r2, [pc, #240]	@ (8005f1c <xTaskIncrementTick+0x158>)
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	f000 fad4 	bl	80063d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e30:	4b3b      	ldr	r3, [pc, #236]	@ (8005f20 <xTaskIncrementTick+0x15c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	693a      	ldr	r2, [r7, #16]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d349      	bcc.n	8005ece <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e3a:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <xTaskIncrementTick+0x150>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e44:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <xTaskIncrementTick+0x15c>)
 8005e46:	f04f 32ff 	mov.w	r2, #4294967295
 8005e4a:	601a      	str	r2, [r3, #0]
					break;
 8005e4c:	e03f      	b.n	8005ece <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4e:	4b31      	ldr	r3, [pc, #196]	@ (8005f14 <xTaskIncrementTick+0x150>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d203      	bcs.n	8005e6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e66:	4a2e      	ldr	r2, [pc, #184]	@ (8005f20 <xTaskIncrementTick+0x15c>)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e6c:	e02f      	b.n	8005ece <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	3304      	adds	r3, #4
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fce4 	bl	8004840 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	3318      	adds	r3, #24
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fe fcdb 	bl	8004840 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e8e:	4b25      	ldr	r3, [pc, #148]	@ (8005f24 <xTaskIncrementTick+0x160>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d903      	bls.n	8005e9e <xTaskIncrementTick+0xda>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9a:	4a22      	ldr	r2, [pc, #136]	@ (8005f24 <xTaskIncrementTick+0x160>)
 8005e9c:	6013      	str	r3, [r2, #0]
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	4413      	add	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8005f28 <xTaskIncrementTick+0x164>)
 8005eac:	441a      	add	r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	4610      	mov	r0, r2
 8005eb6:	f7fe fc66 	bl	8004786 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8005f2c <xTaskIncrementTick+0x168>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3b8      	bcc.n	8005e3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ecc:	e7b5      	b.n	8005e3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ece:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <xTaskIncrementTick+0x168>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed4:	4914      	ldr	r1, [pc, #80]	@ (8005f28 <xTaskIncrementTick+0x164>)
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	440b      	add	r3, r1
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d901      	bls.n	8005eea <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005eea:	4b11      	ldr	r3, [pc, #68]	@ (8005f30 <xTaskIncrementTick+0x16c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d007      	beq.n	8005f02 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e004      	b.n	8005f02 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f34 <xTaskIncrementTick+0x170>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3301      	adds	r3, #1
 8005efe:	4a0d      	ldr	r2, [pc, #52]	@ (8005f34 <xTaskIncrementTick+0x170>)
 8005f00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f02:	697b      	ldr	r3, [r7, #20]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3718      	adds	r7, #24
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}
 8005f0c:	20002710 	.word	0x20002710
 8005f10:	200026ec 	.word	0x200026ec
 8005f14:	200026a0 	.word	0x200026a0
 8005f18:	200026a4 	.word	0x200026a4
 8005f1c:	20002700 	.word	0x20002700
 8005f20:	20002708 	.word	0x20002708
 8005f24:	200026f0 	.word	0x200026f0
 8005f28:	20002218 	.word	0x20002218
 8005f2c:	20002214 	.word	0x20002214
 8005f30:	200026fc 	.word	0x200026fc
 8005f34:	200026f8 	.word	0x200026f8

08005f38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f3e:	4b28      	ldr	r3, [pc, #160]	@ (8005fe0 <vTaskSwitchContext+0xa8>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d003      	beq.n	8005f4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f46:	4b27      	ldr	r3, [pc, #156]	@ (8005fe4 <vTaskSwitchContext+0xac>)
 8005f48:	2201      	movs	r2, #1
 8005f4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f4c:	e042      	b.n	8005fd4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005f4e:	4b25      	ldr	r3, [pc, #148]	@ (8005fe4 <vTaskSwitchContext+0xac>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f54:	4b24      	ldr	r3, [pc, #144]	@ (8005fe8 <vTaskSwitchContext+0xb0>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60fb      	str	r3, [r7, #12]
 8005f5a:	e011      	b.n	8005f80 <vTaskSwitchContext+0x48>
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <vTaskSwitchContext+0x42>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <vTaskSwitchContext+0x3e>
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	491a      	ldr	r1, [pc, #104]	@ (8005fec <vTaskSwitchContext+0xb4>)
 8005f82:	68fa      	ldr	r2, [r7, #12]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	440b      	add	r3, r1
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d0e3      	beq.n	8005f5c <vTaskSwitchContext+0x24>
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a13      	ldr	r2, [pc, #76]	@ (8005fec <vTaskSwitchContext+0xb4>)
 8005fa0:	4413      	add	r3, r2
 8005fa2:	60bb      	str	r3, [r7, #8]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	605a      	str	r2, [r3, #4]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	3308      	adds	r3, #8
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d104      	bne.n	8005fc4 <vTaskSwitchContext+0x8c>
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	605a      	str	r2, [r3, #4]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4a09      	ldr	r2, [pc, #36]	@ (8005ff0 <vTaskSwitchContext+0xb8>)
 8005fcc:	6013      	str	r3, [r2, #0]
 8005fce:	4a06      	ldr	r2, [pc, #24]	@ (8005fe8 <vTaskSwitchContext+0xb0>)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6013      	str	r3, [r2, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	20002710 	.word	0x20002710
 8005fe4:	200026fc 	.word	0x200026fc
 8005fe8:	200026f0 	.word	0x200026f0
 8005fec:	20002218 	.word	0x20002218
 8005ff0:	20002214 	.word	0x20002214

08005ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10b      	bne.n	800601c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	60fb      	str	r3, [r7, #12]
}
 8006016:	bf00      	nop
 8006018:	bf00      	nop
 800601a:	e7fd      	b.n	8006018 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800601c:	4b07      	ldr	r3, [pc, #28]	@ (800603c <vTaskPlaceOnEventList+0x48>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	3318      	adds	r3, #24
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f7fe fbd2 	bl	80047ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800602a:	2101      	movs	r1, #1
 800602c:	6838      	ldr	r0, [r7, #0]
 800602e:	f000 fb91 	bl	8006754 <prvAddCurrentTaskToDelayedList>
}
 8006032:	bf00      	nop
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	20002214 	.word	0x20002214

08006040 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d10b      	bne.n	800606a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	617b      	str	r3, [r7, #20]
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop
 8006068:	e7fd      	b.n	8006066 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800606a:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <vTaskPlaceOnEventListRestricted+0x54>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3318      	adds	r3, #24
 8006070:	4619      	mov	r1, r3
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7fe fb87 	bl	8004786 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	68b8      	ldr	r0, [r7, #8]
 8006088:	f000 fb64 	bl	8006754 <prvAddCurrentTaskToDelayedList>
	}
 800608c:	bf00      	nop
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	20002214 	.word	0x20002214

08006098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10b      	bne.n	80060c6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80060ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b2:	f383 8811 	msr	BASEPRI, r3
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	f3bf 8f4f 	dsb	sy
 80060be:	60fb      	str	r3, [r7, #12]
}
 80060c0:	bf00      	nop
 80060c2:	bf00      	nop
 80060c4:	e7fd      	b.n	80060c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	3318      	adds	r3, #24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fe fbb8 	bl	8004840 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006148 <xTaskRemoveFromEventList+0xb0>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d11d      	bne.n	8006114 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	3304      	adds	r3, #4
 80060dc:	4618      	mov	r0, r3
 80060de:	f7fe fbaf 	bl	8004840 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e6:	4b19      	ldr	r3, [pc, #100]	@ (800614c <xTaskRemoveFromEventList+0xb4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d903      	bls.n	80060f6 <xTaskRemoveFromEventList+0x5e>
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060f2:	4a16      	ldr	r2, [pc, #88]	@ (800614c <xTaskRemoveFromEventList+0xb4>)
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fa:	4613      	mov	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4a13      	ldr	r2, [pc, #76]	@ (8006150 <xTaskRemoveFromEventList+0xb8>)
 8006104:	441a      	add	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	3304      	adds	r3, #4
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7fe fb3a 	bl	8004786 <vListInsertEnd>
 8006112:	e005      	b.n	8006120 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3318      	adds	r3, #24
 8006118:	4619      	mov	r1, r3
 800611a:	480e      	ldr	r0, [pc, #56]	@ (8006154 <xTaskRemoveFromEventList+0xbc>)
 800611c:	f7fe fb33 	bl	8004786 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006124:	4b0c      	ldr	r3, [pc, #48]	@ (8006158 <xTaskRemoveFromEventList+0xc0>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800612a:	429a      	cmp	r2, r3
 800612c:	d905      	bls.n	800613a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800612e:	2301      	movs	r3, #1
 8006130:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006132:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <xTaskRemoveFromEventList+0xc4>)
 8006134:	2201      	movs	r2, #1
 8006136:	601a      	str	r2, [r3, #0]
 8006138:	e001      	b.n	800613e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800613a:	2300      	movs	r3, #0
 800613c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800613e:	697b      	ldr	r3, [r7, #20]
}
 8006140:	4618      	mov	r0, r3
 8006142:	3718      	adds	r7, #24
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20002710 	.word	0x20002710
 800614c:	200026f0 	.word	0x200026f0
 8006150:	20002218 	.word	0x20002218
 8006154:	200026a8 	.word	0x200026a8
 8006158:	20002214 	.word	0x20002214
 800615c:	200026fc 	.word	0x200026fc

08006160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006168:	4b06      	ldr	r3, [pc, #24]	@ (8006184 <vTaskInternalSetTimeOutState+0x24>)
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006170:	4b05      	ldr	r3, [pc, #20]	@ (8006188 <vTaskInternalSetTimeOutState+0x28>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	605a      	str	r2, [r3, #4]
}
 8006178:	bf00      	nop
 800617a:	370c      	adds	r7, #12
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	20002700 	.word	0x20002700
 8006188:	200026ec 	.word	0x200026ec

0800618c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10b      	bne.n	80061b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	613b      	str	r3, [r7, #16]
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	e7fd      	b.n	80061b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d10b      	bne.n	80061d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80061ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061be:	f383 8811 	msr	BASEPRI, r3
 80061c2:	f3bf 8f6f 	isb	sy
 80061c6:	f3bf 8f4f 	dsb	sy
 80061ca:	60fb      	str	r3, [r7, #12]
}
 80061cc:	bf00      	nop
 80061ce:	bf00      	nop
 80061d0:	e7fd      	b.n	80061ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061d2:	f000 ffa1 	bl	8007118 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061d6:	4b1d      	ldr	r3, [pc, #116]	@ (800624c <xTaskCheckForTimeOut+0xc0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	69ba      	ldr	r2, [r7, #24]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ee:	d102      	bne.n	80061f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f0:	2300      	movs	r3, #0
 80061f2:	61fb      	str	r3, [r7, #28]
 80061f4:	e023      	b.n	800623e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b15      	ldr	r3, [pc, #84]	@ (8006250 <xTaskCheckForTimeOut+0xc4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d007      	beq.n	8006212 <xTaskCheckForTimeOut+0x86>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	69ba      	ldr	r2, [r7, #24]
 8006208:	429a      	cmp	r2, r3
 800620a:	d302      	bcc.n	8006212 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	61fb      	str	r3, [r7, #28]
 8006210:	e015      	b.n	800623e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	429a      	cmp	r2, r3
 800621a:	d20b      	bcs.n	8006234 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	1ad2      	subs	r2, r2, r3
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff ff99 	bl	8006160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	e004      	b.n	800623e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2200      	movs	r2, #0
 8006238:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800623a:	2301      	movs	r3, #1
 800623c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800623e:	f000 ff9d 	bl	800717c <vPortExitCritical>

	return xReturn;
 8006242:	69fb      	ldr	r3, [r7, #28]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3720      	adds	r7, #32
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	200026ec 	.word	0x200026ec
 8006250:	20002700 	.word	0x20002700

08006254 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006258:	4b03      	ldr	r3, [pc, #12]	@ (8006268 <vTaskMissedYield+0x14>)
 800625a:	2201      	movs	r2, #1
 800625c:	601a      	str	r2, [r3, #0]
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	200026fc 	.word	0x200026fc

0800626c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006274:	f000 f852 	bl	800631c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006278:	4b06      	ldr	r3, [pc, #24]	@ (8006294 <prvIdleTask+0x28>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d9f9      	bls.n	8006274 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006280:	4b05      	ldr	r3, [pc, #20]	@ (8006298 <prvIdleTask+0x2c>)
 8006282:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006286:	601a      	str	r2, [r3, #0]
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006290:	e7f0      	b.n	8006274 <prvIdleTask+0x8>
 8006292:	bf00      	nop
 8006294:	20002218 	.word	0x20002218
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a2:	2300      	movs	r3, #0
 80062a4:	607b      	str	r3, [r7, #4]
 80062a6:	e00c      	b.n	80062c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4a12      	ldr	r2, [pc, #72]	@ (80062fc <prvInitialiseTaskLists+0x60>)
 80062b4:	4413      	add	r3, r2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe fa38 	bl	800472c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3301      	adds	r3, #1
 80062c0:	607b      	str	r3, [r7, #4]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b37      	cmp	r3, #55	@ 0x37
 80062c6:	d9ef      	bls.n	80062a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062c8:	480d      	ldr	r0, [pc, #52]	@ (8006300 <prvInitialiseTaskLists+0x64>)
 80062ca:	f7fe fa2f 	bl	800472c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ce:	480d      	ldr	r0, [pc, #52]	@ (8006304 <prvInitialiseTaskLists+0x68>)
 80062d0:	f7fe fa2c 	bl	800472c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062d4:	480c      	ldr	r0, [pc, #48]	@ (8006308 <prvInitialiseTaskLists+0x6c>)
 80062d6:	f7fe fa29 	bl	800472c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062da:	480c      	ldr	r0, [pc, #48]	@ (800630c <prvInitialiseTaskLists+0x70>)
 80062dc:	f7fe fa26 	bl	800472c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e0:	480b      	ldr	r0, [pc, #44]	@ (8006310 <prvInitialiseTaskLists+0x74>)
 80062e2:	f7fe fa23 	bl	800472c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <prvInitialiseTaskLists+0x78>)
 80062e8:	4a05      	ldr	r2, [pc, #20]	@ (8006300 <prvInitialiseTaskLists+0x64>)
 80062ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <prvInitialiseTaskLists+0x7c>)
 80062ee:	4a05      	ldr	r2, [pc, #20]	@ (8006304 <prvInitialiseTaskLists+0x68>)
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	bf00      	nop
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	20002218 	.word	0x20002218
 8006300:	20002678 	.word	0x20002678
 8006304:	2000268c 	.word	0x2000268c
 8006308:	200026a8 	.word	0x200026a8
 800630c:	200026bc 	.word	0x200026bc
 8006310:	200026d4 	.word	0x200026d4
 8006314:	200026a0 	.word	0x200026a0
 8006318:	200026a4 	.word	0x200026a4

0800631c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006322:	e019      	b.n	8006358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006324:	f000 fef8 	bl	8007118 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <prvCheckTasksWaitingTermination+0x50>)
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	3304      	adds	r3, #4
 8006334:	4618      	mov	r0, r3
 8006336:	f7fe fa83 	bl	8004840 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633a:	4b0d      	ldr	r3, [pc, #52]	@ (8006370 <prvCheckTasksWaitingTermination+0x54>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3b01      	subs	r3, #1
 8006340:	4a0b      	ldr	r2, [pc, #44]	@ (8006370 <prvCheckTasksWaitingTermination+0x54>)
 8006342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006344:	4b0b      	ldr	r3, [pc, #44]	@ (8006374 <prvCheckTasksWaitingTermination+0x58>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3b01      	subs	r3, #1
 800634a:	4a0a      	ldr	r2, [pc, #40]	@ (8006374 <prvCheckTasksWaitingTermination+0x58>)
 800634c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800634e:	f000 ff15 	bl	800717c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f810 	bl	8006378 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006358:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <prvCheckTasksWaitingTermination+0x58>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1e1      	bne.n	8006324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	200026bc 	.word	0x200026bc
 8006370:	200026e8 	.word	0x200026e8
 8006374:	200026d0 	.word	0x200026d0

08006378 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006386:	2b00      	cmp	r3, #0
 8006388:	d108      	bne.n	800639c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638e:	4618      	mov	r0, r3
 8006390:	f001 f8b2 	bl	80074f8 <vPortFree>
				vPortFree( pxTCB );
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f8af 	bl	80074f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800639a:	e019      	b.n	80063d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d103      	bne.n	80063ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f8a6 	bl	80074f8 <vPortFree>
	}
 80063ac:	e010      	b.n	80063d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d00b      	beq.n	80063d0 <prvDeleteTCB+0x58>
	__asm volatile
 80063b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063bc:	f383 8811 	msr	BASEPRI, r3
 80063c0:	f3bf 8f6f 	isb	sy
 80063c4:	f3bf 8f4f 	dsb	sy
 80063c8:	60fb      	str	r3, [r7, #12]
}
 80063ca:	bf00      	nop
 80063cc:	bf00      	nop
 80063ce:	e7fd      	b.n	80063cc <prvDeleteTCB+0x54>
	}
 80063d0:	bf00      	nop
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063de:	4b0c      	ldr	r3, [pc, #48]	@ (8006410 <prvResetNextTaskUnblockTime+0x38>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d104      	bne.n	80063f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063e8:	4b0a      	ldr	r3, [pc, #40]	@ (8006414 <prvResetNextTaskUnblockTime+0x3c>)
 80063ea:	f04f 32ff 	mov.w	r2, #4294967295
 80063ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f0:	e008      	b.n	8006404 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f2:	4b07      	ldr	r3, [pc, #28]	@ (8006410 <prvResetNextTaskUnblockTime+0x38>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	4a04      	ldr	r2, [pc, #16]	@ (8006414 <prvResetNextTaskUnblockTime+0x3c>)
 8006402:	6013      	str	r3, [r2, #0]
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	200026a0 	.word	0x200026a0
 8006414:	20002708 	.word	0x20002708

08006418 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800641e:	4b05      	ldr	r3, [pc, #20]	@ (8006434 <xTaskGetCurrentTaskHandle+0x1c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006424:	687b      	ldr	r3, [r7, #4]
	}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20002214 	.word	0x20002214

08006438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <xTaskGetSchedulerState+0x34>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006446:	2301      	movs	r3, #1
 8006448:	607b      	str	r3, [r7, #4]
 800644a:	e008      	b.n	800645e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800644c:	4b08      	ldr	r3, [pc, #32]	@ (8006470 <xTaskGetSchedulerState+0x38>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006454:	2302      	movs	r3, #2
 8006456:	607b      	str	r3, [r7, #4]
 8006458:	e001      	b.n	800645e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800645a:	2300      	movs	r3, #0
 800645c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800645e:	687b      	ldr	r3, [r7, #4]
	}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	200026f4 	.word	0x200026f4
 8006470:	20002710 	.word	0x20002710

08006474 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006480:	2300      	movs	r3, #0
 8006482:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d051      	beq.n	800652e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648e:	4b2a      	ldr	r3, [pc, #168]	@ (8006538 <xTaskPriorityInherit+0xc4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	429a      	cmp	r2, r3
 8006496:	d241      	bcs.n	800651c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	2b00      	cmp	r3, #0
 800649e:	db06      	blt.n	80064ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064a0:	4b25      	ldr	r3, [pc, #148]	@ (8006538 <xTaskPriorityInherit+0xc4>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	6959      	ldr	r1, [r3, #20]
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b6:	4613      	mov	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	4a1f      	ldr	r2, [pc, #124]	@ (800653c <xTaskPriorityInherit+0xc8>)
 80064c0:	4413      	add	r3, r2
 80064c2:	4299      	cmp	r1, r3
 80064c4:	d122      	bne.n	800650c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	3304      	adds	r3, #4
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe f9b8 	bl	8004840 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064d0:	4b19      	ldr	r3, [pc, #100]	@ (8006538 <xTaskPriorityInherit+0xc4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064de:	4b18      	ldr	r3, [pc, #96]	@ (8006540 <xTaskPriorityInherit+0xcc>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d903      	bls.n	80064ee <xTaskPriorityInherit+0x7a>
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064ea:	4a15      	ldr	r2, [pc, #84]	@ (8006540 <xTaskPriorityInherit+0xcc>)
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4a10      	ldr	r2, [pc, #64]	@ (800653c <xTaskPriorityInherit+0xc8>)
 80064fc:	441a      	add	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	3304      	adds	r3, #4
 8006502:	4619      	mov	r1, r3
 8006504:	4610      	mov	r0, r2
 8006506:	f7fe f93e 	bl	8004786 <vListInsertEnd>
 800650a:	e004      	b.n	8006516 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800650c:	4b0a      	ldr	r3, [pc, #40]	@ (8006538 <xTaskPriorityInherit+0xc4>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006516:	2301      	movs	r3, #1
 8006518:	60fb      	str	r3, [r7, #12]
 800651a:	e008      	b.n	800652e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006520:	4b05      	ldr	r3, [pc, #20]	@ (8006538 <xTaskPriorityInherit+0xc4>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006526:	429a      	cmp	r2, r3
 8006528:	d201      	bcs.n	800652e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800652e:	68fb      	ldr	r3, [r7, #12]
	}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	20002214 	.word	0x20002214
 800653c:	20002218 	.word	0x20002218
 8006540:	200026f0 	.word	0x200026f0

08006544 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006550:	2300      	movs	r3, #0
 8006552:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d058      	beq.n	800660c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800655a:	4b2f      	ldr	r3, [pc, #188]	@ (8006618 <xTaskPriorityDisinherit+0xd4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	693a      	ldr	r2, [r7, #16]
 8006560:	429a      	cmp	r2, r3
 8006562:	d00b      	beq.n	800657c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	60fb      	str	r3, [r7, #12]
}
 8006576:	bf00      	nop
 8006578:	bf00      	nop
 800657a:	e7fd      	b.n	8006578 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10b      	bne.n	800659c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	f383 8811 	msr	BASEPRI, r3
 800658c:	f3bf 8f6f 	isb	sy
 8006590:	f3bf 8f4f 	dsb	sy
 8006594:	60bb      	str	r3, [r7, #8]
}
 8006596:	bf00      	nop
 8006598:	bf00      	nop
 800659a:	e7fd      	b.n	8006598 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a0:	1e5a      	subs	r2, r3, #1
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d02c      	beq.n	800660c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d128      	bne.n	800660c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	3304      	adds	r3, #4
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe f93e 	bl	8004840 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065dc:	4b0f      	ldr	r3, [pc, #60]	@ (800661c <xTaskPriorityDisinherit+0xd8>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d903      	bls.n	80065ec <xTaskPriorityDisinherit+0xa8>
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4a0c      	ldr	r2, [pc, #48]	@ (800661c <xTaskPriorityDisinherit+0xd8>)
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4a09      	ldr	r2, [pc, #36]	@ (8006620 <xTaskPriorityDisinherit+0xdc>)
 80065fa:	441a      	add	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	3304      	adds	r3, #4
 8006600:	4619      	mov	r1, r3
 8006602:	4610      	mov	r0, r2
 8006604:	f7fe f8bf 	bl	8004786 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006608:	2301      	movs	r3, #1
 800660a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800660c:	697b      	ldr	r3, [r7, #20]
	}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20002214 	.word	0x20002214
 800661c:	200026f0 	.word	0x200026f0
 8006620:	20002218 	.word	0x20002218

08006624 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006624:	b580      	push	{r7, lr}
 8006626:	b088      	sub	sp, #32
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d06c      	beq.n	8006716 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800663c:	69bb      	ldr	r3, [r7, #24]
 800663e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10b      	bne.n	800665c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	e7fd      	b.n	8006658 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d902      	bls.n	800666c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	61fb      	str	r3, [r7, #28]
 800666a:	e002      	b.n	8006672 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006670:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	429a      	cmp	r2, r3
 800667a:	d04c      	beq.n	8006716 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	429a      	cmp	r2, r3
 8006684:	d147      	bne.n	8006716 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006686:	4b26      	ldr	r3, [pc, #152]	@ (8006720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	429a      	cmp	r2, r3
 800668e:	d10b      	bne.n	80066a8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006694:	f383 8811 	msr	BASEPRI, r3
 8006698:	f3bf 8f6f 	isb	sy
 800669c:	f3bf 8f4f 	dsb	sy
 80066a0:	60bb      	str	r3, [r7, #8]
}
 80066a2:	bf00      	nop
 80066a4:	bf00      	nop
 80066a6:	e7fd      	b.n	80066a4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066b4:	69bb      	ldr	r3, [r7, #24]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	db04      	blt.n	80066c6 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	6959      	ldr	r1, [r3, #20]
 80066ca:	693a      	ldr	r2, [r7, #16]
 80066cc:	4613      	mov	r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	4413      	add	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4a13      	ldr	r2, [pc, #76]	@ (8006724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066d6:	4413      	add	r3, r2
 80066d8:	4299      	cmp	r1, r3
 80066da:	d11c      	bne.n	8006716 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	3304      	adds	r3, #4
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7fe f8ad 	bl	8004840 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d903      	bls.n	80066fa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006728 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4a07      	ldr	r2, [pc, #28]	@ (8006724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006708:	441a      	add	r2, r3
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	3304      	adds	r3, #4
 800670e:	4619      	mov	r1, r3
 8006710:	4610      	mov	r0, r2
 8006712:	f7fe f838 	bl	8004786 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006716:	bf00      	nop
 8006718:	3720      	adds	r7, #32
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	20002214 	.word	0x20002214
 8006724:	20002218 	.word	0x20002218
 8006728:	200026f0 	.word	0x200026f0

0800672c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006730:	4b07      	ldr	r3, [pc, #28]	@ (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d004      	beq.n	8006742 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800673e:	3201      	adds	r2, #1
 8006740:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006742:	4b03      	ldr	r3, [pc, #12]	@ (8006750 <pvTaskIncrementMutexHeldCount+0x24>)
 8006744:	681b      	ldr	r3, [r3, #0]
	}
 8006746:	4618      	mov	r0, r3
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20002214 	.word	0x20002214

08006754 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800675e:	4b21      	ldr	r3, [pc, #132]	@ (80067e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006764:	4b20      	ldr	r3, [pc, #128]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	3304      	adds	r3, #4
 800676a:	4618      	mov	r0, r3
 800676c:	f7fe f868 	bl	8004840 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d10a      	bne.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3304      	adds	r3, #4
 8006784:	4619      	mov	r1, r3
 8006786:	4819      	ldr	r0, [pc, #100]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x98>)
 8006788:	f7fd fffd 	bl	8004786 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800678c:	e026      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006796:	4b14      	ldr	r3, [pc, #80]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d209      	bcs.n	80067ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a6:	4b12      	ldr	r3, [pc, #72]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	4b0f      	ldr	r3, [pc, #60]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3304      	adds	r3, #4
 80067b0:	4619      	mov	r1, r3
 80067b2:	4610      	mov	r0, r2
 80067b4:	f7fe f80b 	bl	80047ce <vListInsert>
}
 80067b8:	e010      	b.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ba:	4b0e      	ldr	r3, [pc, #56]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	4b0a      	ldr	r3, [pc, #40]	@ (80067e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4619      	mov	r1, r3
 80067c6:	4610      	mov	r0, r2
 80067c8:	f7fe f801 	bl	80047ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067cc:	4b0a      	ldr	r3, [pc, #40]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d202      	bcs.n	80067dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067d6:	4a08      	ldr	r2, [pc, #32]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	6013      	str	r3, [r2, #0]
}
 80067dc:	bf00      	nop
 80067de:	3710      	adds	r7, #16
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	200026ec 	.word	0x200026ec
 80067e8:	20002214 	.word	0x20002214
 80067ec:	200026d4 	.word	0x200026d4
 80067f0:	200026a4 	.word	0x200026a4
 80067f4:	200026a0 	.word	0x200026a0
 80067f8:	20002708 	.word	0x20002708

080067fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b08a      	sub	sp, #40	@ 0x28
 8006800:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006802:	2300      	movs	r3, #0
 8006804:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006806:	f000 fb13 	bl	8006e30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800680a:	4b1d      	ldr	r3, [pc, #116]	@ (8006880 <xTimerCreateTimerTask+0x84>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d021      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006812:	2300      	movs	r3, #0
 8006814:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006816:	2300      	movs	r3, #0
 8006818:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800681a:	1d3a      	adds	r2, r7, #4
 800681c:	f107 0108 	add.w	r1, r7, #8
 8006820:	f107 030c 	add.w	r3, r7, #12
 8006824:	4618      	mov	r0, r3
 8006826:	f7fd ff67 	bl	80046f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800682a:	6879      	ldr	r1, [r7, #4]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	9202      	str	r2, [sp, #8]
 8006832:	9301      	str	r3, [sp, #4]
 8006834:	2302      	movs	r3, #2
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	2300      	movs	r3, #0
 800683a:	460a      	mov	r2, r1
 800683c:	4911      	ldr	r1, [pc, #68]	@ (8006884 <xTimerCreateTimerTask+0x88>)
 800683e:	4812      	ldr	r0, [pc, #72]	@ (8006888 <xTimerCreateTimerTask+0x8c>)
 8006840:	f7fe ffc0 	bl	80057c4 <xTaskCreateStatic>
 8006844:	4603      	mov	r3, r0
 8006846:	4a11      	ldr	r2, [pc, #68]	@ (800688c <xTimerCreateTimerTask+0x90>)
 8006848:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800684a:	4b10      	ldr	r3, [pc, #64]	@ (800688c <xTimerCreateTimerTask+0x90>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006852:	2301      	movs	r3, #1
 8006854:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10b      	bne.n	8006874 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	613b      	str	r3, [r7, #16]
}
 800686e:	bf00      	nop
 8006870:	bf00      	nop
 8006872:	e7fd      	b.n	8006870 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20002744 	.word	0x20002744
 8006884:	08008160 	.word	0x08008160
 8006888:	080069c9 	.word	0x080069c9
 800688c:	20002748 	.word	0x20002748

08006890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08a      	sub	sp, #40	@ 0x28
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
 800689c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800689e:	2300      	movs	r3, #0
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d10b      	bne.n	80068c0 <xTimerGenericCommand+0x30>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	623b      	str	r3, [r7, #32]
}
 80068ba:	bf00      	nop
 80068bc:	bf00      	nop
 80068be:	e7fd      	b.n	80068bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068c0:	4b19      	ldr	r3, [pc, #100]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d02a      	beq.n	800691e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b05      	cmp	r3, #5
 80068d8:	dc18      	bgt.n	800690c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068da:	f7ff fdad 	bl	8006438 <xTaskGetSchedulerState>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d109      	bne.n	80068f8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068e4:	4b10      	ldr	r3, [pc, #64]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068e6:	6818      	ldr	r0, [r3, #0]
 80068e8:	f107 0110 	add.w	r1, r7, #16
 80068ec:	2300      	movs	r3, #0
 80068ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f0:	f7fe f9ce 	bl	8004c90 <xQueueGenericSend>
 80068f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068f6:	e012      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006928 <xTimerGenericCommand+0x98>)
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	f107 0110 	add.w	r1, r7, #16
 8006900:	2300      	movs	r3, #0
 8006902:	2200      	movs	r2, #0
 8006904:	f7fe f9c4 	bl	8004c90 <xQueueGenericSend>
 8006908:	6278      	str	r0, [r7, #36]	@ 0x24
 800690a:	e008      	b.n	800691e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800690c:	4b06      	ldr	r3, [pc, #24]	@ (8006928 <xTimerGenericCommand+0x98>)
 800690e:	6818      	ldr	r0, [r3, #0]
 8006910:	f107 0110 	add.w	r1, r7, #16
 8006914:	2300      	movs	r3, #0
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	f7fe fabc 	bl	8004e94 <xQueueGenericSendFromISR>
 800691c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006920:	4618      	mov	r0, r3
 8006922:	3728      	adds	r7, #40	@ 0x28
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	20002744 	.word	0x20002744

0800692c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af02      	add	r7, sp, #8
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006936:	4b23      	ldr	r3, [pc, #140]	@ (80069c4 <prvProcessExpiredTimer+0x98>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	3304      	adds	r3, #4
 8006944:	4618      	mov	r0, r3
 8006946:	f7fd ff7b 	bl	8004840 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006950:	f003 0304 	and.w	r3, r3, #4
 8006954:	2b00      	cmp	r3, #0
 8006956:	d023      	beq.n	80069a0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	699a      	ldr	r2, [r3, #24]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	18d1      	adds	r1, r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	6978      	ldr	r0, [r7, #20]
 8006966:	f000 f8d5 	bl	8006b14 <prvInsertTimerInActiveList>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006970:	2300      	movs	r3, #0
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	2100      	movs	r1, #0
 800697a:	6978      	ldr	r0, [r7, #20]
 800697c:	f7ff ff88 	bl	8006890 <xTimerGenericCommand>
 8006980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d114      	bne.n	80069b2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	60fb      	str	r3, [r7, #12]
}
 800699a:	bf00      	nop
 800699c:	bf00      	nop
 800699e:	e7fd      	b.n	800699c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069a6:	f023 0301 	bic.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	6978      	ldr	r0, [r7, #20]
 80069b8:	4798      	blx	r3
}
 80069ba:	bf00      	nop
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2000273c 	.word	0x2000273c

080069c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d0:	f107 0308 	add.w	r3, r7, #8
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 f859 	bl	8006a8c <prvGetNextExpireTime>
 80069da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	4619      	mov	r1, r3
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 f805 	bl	80069f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069e6:	f000 f8d7 	bl	8006b98 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ea:	bf00      	nop
 80069ec:	e7f0      	b.n	80069d0 <prvTimerTask+0x8>
	...

080069f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069fa:	f7ff f927 	bl	8005c4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069fe:	f107 0308 	add.w	r3, r7, #8
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 f866 	bl	8006ad4 <prvSampleTimeNow>
 8006a08:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d130      	bne.n	8006a72 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10a      	bne.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d806      	bhi.n	8006a2c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a1e:	f7ff f923 	bl	8005c68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ff81 	bl	800692c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a2a:	e024      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d008      	beq.n	8006a44 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a32:	4b13      	ldr	r3, [pc, #76]	@ (8006a80 <prvProcessTimerOrBlockTask+0x90>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <prvProcessTimerOrBlockTask+0x50>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <prvProcessTimerOrBlockTask+0x52>
 8006a40:	2300      	movs	r3, #0
 8006a42:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a44:	4b0f      	ldr	r3, [pc, #60]	@ (8006a84 <prvProcessTimerOrBlockTask+0x94>)
 8006a46:	6818      	ldr	r0, [r3, #0]
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1ad3      	subs	r3, r2, r3
 8006a4e:	683a      	ldr	r2, [r7, #0]
 8006a50:	4619      	mov	r1, r3
 8006a52:	f7fe fe83 	bl	800575c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a56:	f7ff f907 	bl	8005c68 <xTaskResumeAll>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10a      	bne.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <prvProcessTimerOrBlockTask+0x98>)
 8006a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
}
 8006a70:	e001      	b.n	8006a76 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a72:	f7ff f8f9 	bl	8005c68 <xTaskResumeAll>
}
 8006a76:	bf00      	nop
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	20002740 	.word	0x20002740
 8006a84:	20002744 	.word	0x20002744
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a94:	4b0e      	ldr	r3, [pc, #56]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <prvGetNextExpireTime+0x16>
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	e000      	b.n	8006aa4 <prvGetNextExpireTime+0x18>
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <prvGetNextExpireTime+0x44>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	60fb      	str	r3, [r7, #12]
 8006aba:	e001      	b.n	8006ac0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	2000273c 	.word	0x2000273c

08006ad4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006adc:	f7ff f962 	bl	8005da4 <xTaskGetTickCount>
 8006ae0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68fa      	ldr	r2, [r7, #12]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d205      	bcs.n	8006af8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006aec:	f000 f93a 	bl	8006d64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
 8006af6:	e002      	b.n	8006afe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006afe:	4a04      	ldr	r2, [pc, #16]	@ (8006b10 <prvSampleTimeNow+0x3c>)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3710      	adds	r7, #16
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
 8006b0e:	bf00      	nop
 8006b10:	2000274c 	.word	0x2000274c

08006b14 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b086      	sub	sp, #24
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d812      	bhi.n	8006b60 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	1ad2      	subs	r2, r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d302      	bcc.n	8006b4e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e01b      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b4e:	4b10      	ldr	r3, [pc, #64]	@ (8006b90 <prvInsertTimerInActiveList+0x7c>)
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4619      	mov	r1, r3
 8006b58:	4610      	mov	r0, r2
 8006b5a:	f7fd fe38 	bl	80047ce <vListInsert>
 8006b5e:	e012      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b60:	687a      	ldr	r2, [r7, #4]
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d206      	bcs.n	8006b76 <prvInsertTimerInActiveList+0x62>
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d302      	bcc.n	8006b76 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b70:	2301      	movs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
 8006b74:	e007      	b.n	8006b86 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b76:	4b07      	ldr	r3, [pc, #28]	@ (8006b94 <prvInsertTimerInActiveList+0x80>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f7fd fe24 	bl	80047ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b86:	697b      	ldr	r3, [r7, #20]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20002740 	.word	0x20002740
 8006b94:	2000273c 	.word	0x2000273c

08006b98 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08e      	sub	sp, #56	@ 0x38
 8006b9c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b9e:	e0ce      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da19      	bge.n	8006bda <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ba6:	1d3b      	adds	r3, r7, #4
 8006ba8:	3304      	adds	r3, #4
 8006baa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10b      	bne.n	8006bca <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	61fb      	str	r3, [r7, #28]
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	e7fd      	b.n	8006bc6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd0:	6850      	ldr	r0, [r2, #4]
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	6892      	ldr	r2, [r2, #8]
 8006bd6:	4611      	mov	r1, r2
 8006bd8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f2c0 80ae 	blt.w	8006d3e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d004      	beq.n	8006bf8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7fd fe24 	bl	8004840 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bf8:	463b      	mov	r3, r7
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff ff6a 	bl	8006ad4 <prvSampleTimeNow>
 8006c00:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2b09      	cmp	r3, #9
 8006c06:	f200 8097 	bhi.w	8006d38 <prvProcessReceivedCommands+0x1a0>
 8006c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c10 <prvProcessReceivedCommands+0x78>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c39 	.word	0x08006c39
 8006c18:	08006c39 	.word	0x08006c39
 8006c1c:	08006caf 	.word	0x08006caf
 8006c20:	08006cc3 	.word	0x08006cc3
 8006c24:	08006d0f 	.word	0x08006d0f
 8006c28:	08006c39 	.word	0x08006c39
 8006c2c:	08006c39 	.word	0x08006c39
 8006c30:	08006caf 	.word	0x08006caf
 8006c34:	08006cc3 	.word	0x08006cc3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c3e:	f043 0301 	orr.w	r3, r3, #1
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	18d1      	adds	r1, r2, r3
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c58:	f7ff ff5c 	bl	8006b14 <prvInsertTimerInActiveList>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d06c      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c68:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c70:	f003 0304 	and.w	r3, r3, #4
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d061      	beq.n	8006d3c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	441a      	add	r2, r3
 8006c80:	2300      	movs	r3, #0
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	2100      	movs	r1, #0
 8006c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8a:	f7ff fe01 	bl	8006890 <xTimerGenericCommand>
 8006c8e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d152      	bne.n	8006d3c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc0:	e03d      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cc8:	f043 0301 	orr.w	r3, r3, #1
 8006ccc:	b2da      	uxtb	r2, r3
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10b      	bne.n	8006cfa <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce6:	f383 8811 	msr	BASEPRI, r3
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	f3bf 8f4f 	dsb	sy
 8006cf2:	617b      	str	r3, [r7, #20]
}
 8006cf4:	bf00      	nop
 8006cf6:	bf00      	nop
 8006cf8:	e7fd      	b.n	8006cf6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d08:	f7ff ff04 	bl	8006b14 <prvInsertTimerInActiveList>
					break;
 8006d0c:	e017      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d1e:	f000 fbeb 	bl	80074f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d22:	e00c      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d36:	e002      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3e:	4b08      	ldr	r3, [pc, #32]	@ (8006d60 <prvProcessReceivedCommands+0x1c8>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	1d39      	adds	r1, r7, #4
 8006d44:	2200      	movs	r2, #0
 8006d46:	4618      	mov	r0, r3
 8006d48:	f7fe f942 	bl	8004fd0 <xQueueReceive>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f47f af26 	bne.w	8006ba0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d54:	bf00      	nop
 8006d56:	bf00      	nop
 8006d58:	3730      	adds	r7, #48	@ 0x30
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20002744 	.word	0x20002744

08006d64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b088      	sub	sp, #32
 8006d68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6a:	e049      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d76:	4b2c      	ldr	r3, [pc, #176]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	68db      	ldr	r3, [r3, #12]
 8006d7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	3304      	adds	r3, #4
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7fd fd5b 	bl	8004840 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d98:	f003 0304 	and.w	r3, r3, #4
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d02f      	beq.n	8006e00 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	699b      	ldr	r3, [r3, #24]
 8006da4:	693a      	ldr	r2, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d90e      	bls.n	8006dd0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4610      	mov	r0, r2
 8006dca:	f7fd fd00 	bl	80047ce <vListInsert>
 8006dce:	e017      	b.n	8006e00 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f7ff fd58 	bl	8006890 <xTimerGenericCommand>
 8006de0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10b      	bne.n	8006e00 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	603b      	str	r3, [r7, #0]
}
 8006dfa:	bf00      	nop
 8006dfc:	bf00      	nop
 8006dfe:	e7fd      	b.n	8006dfc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e00:	4b09      	ldr	r3, [pc, #36]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1b0      	bne.n	8006d6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e0a:	4b07      	ldr	r3, [pc, #28]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e10:	4b06      	ldr	r3, [pc, #24]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a04      	ldr	r2, [pc, #16]	@ (8006e28 <prvSwitchTimerLists+0xc4>)
 8006e16:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <prvSwitchTimerLists+0xc8>)
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	2000273c 	.word	0x2000273c
 8006e2c:	20002740 	.word	0x20002740

08006e30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e36:	f000 f96f 	bl	8007118 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e3a:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d120      	bne.n	8006e84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e42:	4814      	ldr	r0, [pc, #80]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e44:	f7fd fc72 	bl	800472c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e48:	4813      	ldr	r0, [pc, #76]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e4a:	f7fd fc6f 	bl	800472c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e4e:	4b13      	ldr	r3, [pc, #76]	@ (8006e9c <prvCheckForValidListAndQueue+0x6c>)
 8006e50:	4a10      	ldr	r2, [pc, #64]	@ (8006e94 <prvCheckForValidListAndQueue+0x64>)
 8006e52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e54:	4b12      	ldr	r3, [pc, #72]	@ (8006ea0 <prvCheckForValidListAndQueue+0x70>)
 8006e56:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <prvCheckForValidListAndQueue+0x68>)
 8006e58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	4b11      	ldr	r3, [pc, #68]	@ (8006ea4 <prvCheckForValidListAndQueue+0x74>)
 8006e60:	4a11      	ldr	r2, [pc, #68]	@ (8006ea8 <prvCheckForValidListAndQueue+0x78>)
 8006e62:	2110      	movs	r1, #16
 8006e64:	200a      	movs	r0, #10
 8006e66:	f7fd fd7f 	bl	8004968 <xQueueGenericCreateStatic>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	4a08      	ldr	r2, [pc, #32]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e70:	4b07      	ldr	r3, [pc, #28]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <prvCheckForValidListAndQueue+0x60>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	490b      	ldr	r1, [pc, #44]	@ (8006eac <prvCheckForValidListAndQueue+0x7c>)
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fc42 	bl	8005708 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e84:	f000 f97a 	bl	800717c <vPortExitCritical>
}
 8006e88:	bf00      	nop
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20002744 	.word	0x20002744
 8006e94:	20002714 	.word	0x20002714
 8006e98:	20002728 	.word	0x20002728
 8006e9c:	2000273c 	.word	0x2000273c
 8006ea0:	20002740 	.word	0x20002740
 8006ea4:	200027f0 	.word	0x200027f0
 8006ea8:	20002750 	.word	0x20002750
 8006eac:	08008168 	.word	0x08008168

08006eb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3b04      	subs	r3, #4
 8006ec0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ec8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	3b04      	subs	r3, #4
 8006ece:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0201 	bic.w	r2, r3, #1
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3b04      	subs	r3, #4
 8006ede:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8006f14 <pxPortInitialiseStack+0x64>)
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b14      	subs	r3, #20
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b04      	subs	r3, #4
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f06f 0202 	mvn.w	r2, #2
 8006efe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3b20      	subs	r3, #32
 8006f04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f06:	68fb      	ldr	r3, [r7, #12]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	08006f19 	.word	0x08006f19

08006f18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f22:	4b13      	ldr	r3, [pc, #76]	@ (8006f70 <prvTaskExitError+0x58>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2a:	d00b      	beq.n	8006f44 <prvTaskExitError+0x2c>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	60fb      	str	r3, [r7, #12]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <prvTaskExitError+0x28>
	__asm volatile
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60bb      	str	r3, [r7, #8]
}
 8006f56:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f58:	bf00      	nop
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d0fc      	beq.n	8006f5a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	2000000c 	.word	0x2000000c
	...

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20002214 	.word	0x20002214
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	@ (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b47      	ldr	r3, [pc, #284]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a47      	ldr	r2, [pc, #284]	@ (80070f8 <xPortStartScheduler+0x128>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10b      	bne.n	8006ff8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	bf00      	nop
 8006ff6:	e7fd      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80070f4 <xPortStartScheduler+0x124>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80070fc <xPortStartScheduler+0x12c>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d10b      	bne.n	800701a <xPortStartScheduler+0x4a>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	60fb      	str	r3, [r7, #12]
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	e7fd      	b.n	8007016 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800701a:	4b39      	ldr	r3, [pc, #228]	@ (8007100 <xPortStartScheduler+0x130>)
 800701c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	22ff      	movs	r2, #255	@ 0xff
 800702a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	b2db      	uxtb	r3, r3
 8007038:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800703c:	b2da      	uxtb	r2, r3
 800703e:	4b31      	ldr	r3, [pc, #196]	@ (8007104 <xPortStartScheduler+0x134>)
 8007040:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007042:	4b31      	ldr	r3, [pc, #196]	@ (8007108 <xPortStartScheduler+0x138>)
 8007044:	2207      	movs	r2, #7
 8007046:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007048:	e009      	b.n	800705e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800704a:	4b2f      	ldr	r3, [pc, #188]	@ (8007108 <xPortStartScheduler+0x138>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3b01      	subs	r3, #1
 8007050:	4a2d      	ldr	r2, [pc, #180]	@ (8007108 <xPortStartScheduler+0x138>)
 8007052:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007054:	78fb      	ldrb	r3, [r7, #3]
 8007056:	b2db      	uxtb	r3, r3
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	b2db      	uxtb	r3, r3
 800705c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	b2db      	uxtb	r3, r3
 8007062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007066:	2b80      	cmp	r3, #128	@ 0x80
 8007068:	d0ef      	beq.n	800704a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <xPortStartScheduler+0x138>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	d00b      	beq.n	800708e <xPortStartScheduler+0xbe>
	__asm volatile
 8007076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707a:	f383 8811 	msr	BASEPRI, r3
 800707e:	f3bf 8f6f 	isb	sy
 8007082:	f3bf 8f4f 	dsb	sy
 8007086:	60bb      	str	r3, [r7, #8]
}
 8007088:	bf00      	nop
 800708a:	bf00      	nop
 800708c:	e7fd      	b.n	800708a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800708e:	4b1e      	ldr	r3, [pc, #120]	@ (8007108 <xPortStartScheduler+0x138>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	021b      	lsls	r3, r3, #8
 8007094:	4a1c      	ldr	r2, [pc, #112]	@ (8007108 <xPortStartScheduler+0x138>)
 8007096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007098:	4b1b      	ldr	r3, [pc, #108]	@ (8007108 <xPortStartScheduler+0x138>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80070a0:	4a19      	ldr	r2, [pc, #100]	@ (8007108 <xPortStartScheduler+0x138>)
 80070a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a16      	ldr	r2, [pc, #88]	@ (800710c <xPortStartScheduler+0x13c>)
 80070b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80070b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b8:	4b14      	ldr	r3, [pc, #80]	@ (800710c <xPortStartScheduler+0x13c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a13      	ldr	r2, [pc, #76]	@ (800710c <xPortStartScheduler+0x13c>)
 80070be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80070c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070c4:	f000 f8da 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c8:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <xPortStartScheduler+0x140>)
 80070ca:	2200      	movs	r2, #0
 80070cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070ce:	f000 f8f9 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070d2:	4b10      	ldr	r3, [pc, #64]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007114 <xPortStartScheduler+0x144>)
 80070d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070de:	f7ff ff63 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070e2:	f7fe ff29 	bl	8005f38 <vTaskSwitchContext>
	prvTaskExitError();
 80070e6:	f7ff ff17 	bl	8006f18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}
 80070f4:	e000ed00 	.word	0xe000ed00
 80070f8:	410fc271 	.word	0x410fc271
 80070fc:	410fc270 	.word	0x410fc270
 8007100:	e000e400 	.word	0xe000e400
 8007104:	20002840 	.word	0x20002840
 8007108:	20002844 	.word	0x20002844
 800710c:	e000ed20 	.word	0xe000ed20
 8007110:	2000000c 	.word	0x2000000c
 8007114:	e000ef34 	.word	0xe000ef34

08007118 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	607b      	str	r3, [r7, #4]
}
 8007130:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <vPortEnterCritical+0x5c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	3301      	adds	r3, #1
 8007138:	4a0e      	ldr	r2, [pc, #56]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800713c:	4b0d      	ldr	r3, [pc, #52]	@ (8007174 <vPortEnterCritical+0x5c>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d110      	bne.n	8007166 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007144:	4b0c      	ldr	r3, [pc, #48]	@ (8007178 <vPortEnterCritical+0x60>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <vPortEnterCritical+0x4e>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	603b      	str	r3, [r7, #0]
}
 8007160:	bf00      	nop
 8007162:	bf00      	nop
 8007164:	e7fd      	b.n	8007162 <vPortEnterCritical+0x4a>
	}
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	2000000c 	.word	0x2000000c
 8007178:	e000ed04 	.word	0xe000ed04

0800717c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007182:	4b12      	ldr	r3, [pc, #72]	@ (80071cc <vPortExitCritical+0x50>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10b      	bne.n	80071a2 <vPortExitCritical+0x26>
	__asm volatile
 800718a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	607b      	str	r3, [r7, #4]
}
 800719c:	bf00      	nop
 800719e:	bf00      	nop
 80071a0:	e7fd      	b.n	800719e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80071a2:	4b0a      	ldr	r3, [pc, #40]	@ (80071cc <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	4a08      	ldr	r2, [pc, #32]	@ (80071cc <vPortExitCritical+0x50>)
 80071aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071ac:	4b07      	ldr	r3, [pc, #28]	@ (80071cc <vPortExitCritical+0x50>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d105      	bne.n	80071c0 <vPortExitCritical+0x44>
 80071b4:	2300      	movs	r3, #0
 80071b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	f383 8811 	msr	BASEPRI, r3
}
 80071be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	2000000c 	.word	0x2000000c

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	@ (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe fe9a 	bl	8005f38 <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20002214 	.word	0x20002214
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe fdb7 	bl	8005dc4 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	@ (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	@ (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	@ (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	@ (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	@ (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	20000000 	.word	0x20000000
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d915      	bls.n	8007316 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a18      	ldr	r2, [pc, #96]	@ (800734c <vPortValidateInterruptPriority+0x74>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <vPortValidateInterruptPriority+0x78>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20b      	bcs.n	8007316 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <vPortValidateInterruptPriority+0x7c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800731e:	4b0e      	ldr	r3, [pc, #56]	@ (8007358 <vPortValidateInterruptPriority+0x80>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	429a      	cmp	r2, r3
 8007324:	d90b      	bls.n	800733e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	603b      	str	r3, [r7, #0]
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	e7fd      	b.n	800733a <vPortValidateInterruptPriority+0x62>
	}
 800733e:	bf00      	nop
 8007340:	3714      	adds	r7, #20
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	e000e3f0 	.word	0xe000e3f0
 8007350:	20002840 	.word	0x20002840
 8007354:	e000ed0c 	.word	0xe000ed0c
 8007358:	20002844 	.word	0x20002844

0800735c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	@ 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007364:	2300      	movs	r3, #0
 8007366:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007368:	f7fe fc70 	bl	8005c4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800736c:	4b5c      	ldr	r3, [pc, #368]	@ (80074e0 <pvPortMalloc+0x184>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007374:	f000 f924 	bl	80075c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007378:	4b5a      	ldr	r3, [pc, #360]	@ (80074e4 <pvPortMalloc+0x188>)
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4013      	ands	r3, r2
 8007380:	2b00      	cmp	r3, #0
 8007382:	f040 8095 	bne.w	80074b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01e      	beq.n	80073ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800738c:	2208      	movs	r2, #8
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4413      	add	r3, r2
 8007392:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d015      	beq.n	80073ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f023 0307 	bic.w	r3, r3, #7
 80073a4:	3308      	adds	r3, #8
 80073a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f003 0307 	and.w	r3, r3, #7
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00b      	beq.n	80073ca <pvPortMalloc+0x6e>
	__asm volatile
 80073b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b6:	f383 8811 	msr	BASEPRI, r3
 80073ba:	f3bf 8f6f 	isb	sy
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	617b      	str	r3, [r7, #20]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d06f      	beq.n	80074b0 <pvPortMalloc+0x154>
 80073d0:	4b45      	ldr	r3, [pc, #276]	@ (80074e8 <pvPortMalloc+0x18c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d86a      	bhi.n	80074b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073da:	4b44      	ldr	r3, [pc, #272]	@ (80074ec <pvPortMalloc+0x190>)
 80073dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073de:	4b43      	ldr	r3, [pc, #268]	@ (80074ec <pvPortMalloc+0x190>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073e4:	e004      	b.n	80073f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d903      	bls.n	8007402 <pvPortMalloc+0xa6>
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1f1      	bne.n	80073e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007402:	4b37      	ldr	r3, [pc, #220]	@ (80074e0 <pvPortMalloc+0x184>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007408:	429a      	cmp	r2, r3
 800740a:	d051      	beq.n	80074b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	4413      	add	r3, r2
 8007414:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800741e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	1ad2      	subs	r2, r2, r3
 8007426:	2308      	movs	r3, #8
 8007428:	005b      	lsls	r3, r3, #1
 800742a:	429a      	cmp	r2, r3
 800742c:	d920      	bls.n	8007470 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800742e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	4413      	add	r3, r2
 8007434:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00b      	beq.n	8007458 <pvPortMalloc+0xfc>
	__asm volatile
 8007440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007444:	f383 8811 	msr	BASEPRI, r3
 8007448:	f3bf 8f6f 	isb	sy
 800744c:	f3bf 8f4f 	dsb	sy
 8007450:	613b      	str	r3, [r7, #16]
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	e7fd      	b.n	8007454 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	1ad2      	subs	r2, r2, r3
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800746a:	69b8      	ldr	r0, [r7, #24]
 800746c:	f000 f90a 	bl	8007684 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	4a1b      	ldr	r2, [pc, #108]	@ (80074e8 <pvPortMalloc+0x18c>)
 800747c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800747e:	4b1a      	ldr	r3, [pc, #104]	@ (80074e8 <pvPortMalloc+0x18c>)
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	4b1b      	ldr	r3, [pc, #108]	@ (80074f0 <pvPortMalloc+0x194>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	429a      	cmp	r2, r3
 8007488:	d203      	bcs.n	8007492 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <pvPortMalloc+0x18c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a18      	ldr	r2, [pc, #96]	@ (80074f0 <pvPortMalloc+0x194>)
 8007490:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	685a      	ldr	r2, [r3, #4]
 8007496:	4b13      	ldr	r3, [pc, #76]	@ (80074e4 <pvPortMalloc+0x188>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	431a      	orrs	r2, r3
 800749c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80074a6:	4b13      	ldr	r3, [pc, #76]	@ (80074f4 <pvPortMalloc+0x198>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	4a11      	ldr	r2, [pc, #68]	@ (80074f4 <pvPortMalloc+0x198>)
 80074ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074b0:	f7fe fbda 	bl	8005c68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <pvPortMalloc+0x17a>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	60fb      	str	r3, [r7, #12]
}
 80074d0:	bf00      	nop
 80074d2:	bf00      	nop
 80074d4:	e7fd      	b.n	80074d2 <pvPortMalloc+0x176>
	return pvReturn;
 80074d6:	69fb      	ldr	r3, [r7, #28]
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3728      	adds	r7, #40	@ 0x28
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20006450 	.word	0x20006450
 80074e4:	20006464 	.word	0x20006464
 80074e8:	20006454 	.word	0x20006454
 80074ec:	20006448 	.word	0x20006448
 80074f0:	20006458 	.word	0x20006458
 80074f4:	2000645c 	.word	0x2000645c

080074f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d04f      	beq.n	80075aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800750a:	2308      	movs	r3, #8
 800750c:	425b      	negs	r3, r3
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4413      	add	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4b25      	ldr	r3, [pc, #148]	@ (80075b4 <vPortFree+0xbc>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4013      	ands	r3, r2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <vPortFree+0x46>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	60fb      	str	r3, [r7, #12]
}
 8007538:	bf00      	nop
 800753a:	bf00      	nop
 800753c:	e7fd      	b.n	800753a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00b      	beq.n	800755e <vPortFree+0x66>
	__asm volatile
 8007546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800754a:	f383 8811 	msr	BASEPRI, r3
 800754e:	f3bf 8f6f 	isb	sy
 8007552:	f3bf 8f4f 	dsb	sy
 8007556:	60bb      	str	r3, [r7, #8]
}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	e7fd      	b.n	800755a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	4b14      	ldr	r3, [pc, #80]	@ (80075b4 <vPortFree+0xbc>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4013      	ands	r3, r2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01e      	beq.n	80075aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d11a      	bne.n	80075aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <vPortFree+0xbc>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	43db      	mvns	r3, r3
 800757e:	401a      	ands	r2, r3
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007584:	f7fe fb62 	bl	8005c4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <vPortFree+0xc0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	4a09      	ldr	r2, [pc, #36]	@ (80075b8 <vPortFree+0xc0>)
 8007594:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f000 f874 	bl	8007684 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800759c:	4b07      	ldr	r3, [pc, #28]	@ (80075bc <vPortFree+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	3301      	adds	r3, #1
 80075a2:	4a06      	ldr	r2, [pc, #24]	@ (80075bc <vPortFree+0xc4>)
 80075a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80075a6:	f7fe fb5f 	bl	8005c68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075aa:	bf00      	nop
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20006464 	.word	0x20006464
 80075b8:	20006454 	.word	0x20006454
 80075bc:	20006460 	.word	0x20006460

080075c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80075ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075cc:	4b27      	ldr	r3, [pc, #156]	@ (800766c <prvHeapInit+0xac>)
 80075ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d00c      	beq.n	80075f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3307      	adds	r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0307 	bic.w	r3, r3, #7
 80075e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	4a1f      	ldr	r2, [pc, #124]	@ (800766c <prvHeapInit+0xac>)
 80075f0:	4413      	add	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007670 <prvHeapInit+0xb0>)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007670 <prvHeapInit+0xb0>)
 8007600:	2200      	movs	r2, #0
 8007602:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	4413      	add	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800760c:	2208      	movs	r2, #8
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	1a9b      	subs	r3, r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0307 	bic.w	r3, r3, #7
 800761a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4a15      	ldr	r2, [pc, #84]	@ (8007674 <prvHeapInit+0xb4>)
 8007620:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvHeapInit+0xb4>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2200      	movs	r2, #0
 8007628:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762a:	4b12      	ldr	r3, [pc, #72]	@ (8007674 <prvHeapInit+0xb4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2200      	movs	r2, #0
 8007630:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007640:	4b0c      	ldr	r3, [pc, #48]	@ (8007674 <prvHeapInit+0xb4>)
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	4a0a      	ldr	r2, [pc, #40]	@ (8007678 <prvHeapInit+0xb8>)
 800764e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	4a09      	ldr	r2, [pc, #36]	@ (800767c <prvHeapInit+0xbc>)
 8007656:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <prvHeapInit+0xc0>)
 800765a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800765e:	601a      	str	r2, [r3, #0]
}
 8007660:	bf00      	nop
 8007662:	3714      	adds	r7, #20
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr
 800766c:	20002848 	.word	0x20002848
 8007670:	20006448 	.word	0x20006448
 8007674:	20006450 	.word	0x20006450
 8007678:	20006458 	.word	0x20006458
 800767c:	20006454 	.word	0x20006454
 8007680:	20006464 	.word	0x20006464

08007684 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007684:	b480      	push	{r7}
 8007686:	b085      	sub	sp, #20
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800768c:	4b28      	ldr	r3, [pc, #160]	@ (8007730 <prvInsertBlockIntoFreeList+0xac>)
 800768e:	60fb      	str	r3, [r7, #12]
 8007690:	e002      	b.n	8007698 <prvInsertBlockIntoFreeList+0x14>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d8f7      	bhi.n	8007692 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d108      	bne.n	80076c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	441a      	add	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	441a      	add	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d118      	bne.n	800770c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	4b15      	ldr	r3, [pc, #84]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d00d      	beq.n	8007702 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	441a      	add	r2, r3
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	e008      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007702:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <prvInsertBlockIntoFreeList+0xb0>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	e003      	b.n	8007714 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	429a      	cmp	r2, r3
 800771a:	d002      	beq.n	8007722 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007722:	bf00      	nop
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20006448 	.word	0x20006448
 8007734:	20006450 	.word	0x20006450

08007738 <_vsniprintf_r>:
 8007738:	b530      	push	{r4, r5, lr}
 800773a:	4614      	mov	r4, r2
 800773c:	2c00      	cmp	r4, #0
 800773e:	b09b      	sub	sp, #108	@ 0x6c
 8007740:	4605      	mov	r5, r0
 8007742:	461a      	mov	r2, r3
 8007744:	da05      	bge.n	8007752 <_vsniprintf_r+0x1a>
 8007746:	238b      	movs	r3, #139	@ 0x8b
 8007748:	6003      	str	r3, [r0, #0]
 800774a:	f04f 30ff 	mov.w	r0, #4294967295
 800774e:	b01b      	add	sp, #108	@ 0x6c
 8007750:	bd30      	pop	{r4, r5, pc}
 8007752:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007756:	f8ad 300c 	strh.w	r3, [sp, #12]
 800775a:	bf14      	ite	ne
 800775c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007760:	4623      	moveq	r3, r4
 8007762:	9302      	str	r3, [sp, #8]
 8007764:	9305      	str	r3, [sp, #20]
 8007766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800776a:	9100      	str	r1, [sp, #0]
 800776c:	9104      	str	r1, [sp, #16]
 800776e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007772:	4669      	mov	r1, sp
 8007774:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007776:	f000 f9af 	bl	8007ad8 <_svfiprintf_r>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	bfbc      	itt	lt
 800777e:	238b      	movlt	r3, #139	@ 0x8b
 8007780:	602b      	strlt	r3, [r5, #0]
 8007782:	2c00      	cmp	r4, #0
 8007784:	d0e3      	beq.n	800774e <_vsniprintf_r+0x16>
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e7df      	b.n	800774e <_vsniprintf_r+0x16>
	...

08007790 <vsniprintf>:
 8007790:	b507      	push	{r0, r1, r2, lr}
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	460a      	mov	r2, r1
 8007798:	4601      	mov	r1, r0
 800779a:	4803      	ldr	r0, [pc, #12]	@ (80077a8 <vsniprintf+0x18>)
 800779c:	6800      	ldr	r0, [r0, #0]
 800779e:	f7ff ffcb 	bl	8007738 <_vsniprintf_r>
 80077a2:	b003      	add	sp, #12
 80077a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80077a8:	20000010 	.word	0x20000010

080077ac <memset>:
 80077ac:	4402      	add	r2, r0
 80077ae:	4603      	mov	r3, r0
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d100      	bne.n	80077b6 <memset+0xa>
 80077b4:	4770      	bx	lr
 80077b6:	f803 1b01 	strb.w	r1, [r3], #1
 80077ba:	e7f9      	b.n	80077b0 <memset+0x4>

080077bc <__errno>:
 80077bc:	4b01      	ldr	r3, [pc, #4]	@ (80077c4 <__errno+0x8>)
 80077be:	6818      	ldr	r0, [r3, #0]
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000010 	.word	0x20000010

080077c8 <__libc_init_array>:
 80077c8:	b570      	push	{r4, r5, r6, lr}
 80077ca:	4d0d      	ldr	r5, [pc, #52]	@ (8007800 <__libc_init_array+0x38>)
 80077cc:	4c0d      	ldr	r4, [pc, #52]	@ (8007804 <__libc_init_array+0x3c>)
 80077ce:	1b64      	subs	r4, r4, r5
 80077d0:	10a4      	asrs	r4, r4, #2
 80077d2:	2600      	movs	r6, #0
 80077d4:	42a6      	cmp	r6, r4
 80077d6:	d109      	bne.n	80077ec <__libc_init_array+0x24>
 80077d8:	4d0b      	ldr	r5, [pc, #44]	@ (8007808 <__libc_init_array+0x40>)
 80077da:	4c0c      	ldr	r4, [pc, #48]	@ (800780c <__libc_init_array+0x44>)
 80077dc:	f000 fc66 	bl	80080ac <_init>
 80077e0:	1b64      	subs	r4, r4, r5
 80077e2:	10a4      	asrs	r4, r4, #2
 80077e4:	2600      	movs	r6, #0
 80077e6:	42a6      	cmp	r6, r4
 80077e8:	d105      	bne.n	80077f6 <__libc_init_array+0x2e>
 80077ea:	bd70      	pop	{r4, r5, r6, pc}
 80077ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80077f0:	4798      	blx	r3
 80077f2:	3601      	adds	r6, #1
 80077f4:	e7ee      	b.n	80077d4 <__libc_init_array+0xc>
 80077f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80077fa:	4798      	blx	r3
 80077fc:	3601      	adds	r6, #1
 80077fe:	e7f2      	b.n	80077e6 <__libc_init_array+0x1e>
 8007800:	0800823c 	.word	0x0800823c
 8007804:	0800823c 	.word	0x0800823c
 8007808:	0800823c 	.word	0x0800823c
 800780c:	08008240 	.word	0x08008240

08007810 <__retarget_lock_acquire_recursive>:
 8007810:	4770      	bx	lr

08007812 <__retarget_lock_release_recursive>:
 8007812:	4770      	bx	lr

08007814 <memcpy>:
 8007814:	440a      	add	r2, r1
 8007816:	4291      	cmp	r1, r2
 8007818:	f100 33ff 	add.w	r3, r0, #4294967295
 800781c:	d100      	bne.n	8007820 <memcpy+0xc>
 800781e:	4770      	bx	lr
 8007820:	b510      	push	{r4, lr}
 8007822:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007826:	f803 4f01 	strb.w	r4, [r3, #1]!
 800782a:	4291      	cmp	r1, r2
 800782c:	d1f9      	bne.n	8007822 <memcpy+0xe>
 800782e:	bd10      	pop	{r4, pc}

08007830 <_free_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4605      	mov	r5, r0
 8007834:	2900      	cmp	r1, #0
 8007836:	d041      	beq.n	80078bc <_free_r+0x8c>
 8007838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800783c:	1f0c      	subs	r4, r1, #4
 800783e:	2b00      	cmp	r3, #0
 8007840:	bfb8      	it	lt
 8007842:	18e4      	addlt	r4, r4, r3
 8007844:	f000 f8e0 	bl	8007a08 <__malloc_lock>
 8007848:	4a1d      	ldr	r2, [pc, #116]	@ (80078c0 <_free_r+0x90>)
 800784a:	6813      	ldr	r3, [r2, #0]
 800784c:	b933      	cbnz	r3, 800785c <_free_r+0x2c>
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	6014      	str	r4, [r2, #0]
 8007852:	4628      	mov	r0, r5
 8007854:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007858:	f000 b8dc 	b.w	8007a14 <__malloc_unlock>
 800785c:	42a3      	cmp	r3, r4
 800785e:	d908      	bls.n	8007872 <_free_r+0x42>
 8007860:	6820      	ldr	r0, [r4, #0]
 8007862:	1821      	adds	r1, r4, r0
 8007864:	428b      	cmp	r3, r1
 8007866:	bf01      	itttt	eq
 8007868:	6819      	ldreq	r1, [r3, #0]
 800786a:	685b      	ldreq	r3, [r3, #4]
 800786c:	1809      	addeq	r1, r1, r0
 800786e:	6021      	streq	r1, [r4, #0]
 8007870:	e7ed      	b.n	800784e <_free_r+0x1e>
 8007872:	461a      	mov	r2, r3
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	b10b      	cbz	r3, 800787c <_free_r+0x4c>
 8007878:	42a3      	cmp	r3, r4
 800787a:	d9fa      	bls.n	8007872 <_free_r+0x42>
 800787c:	6811      	ldr	r1, [r2, #0]
 800787e:	1850      	adds	r0, r2, r1
 8007880:	42a0      	cmp	r0, r4
 8007882:	d10b      	bne.n	800789c <_free_r+0x6c>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	4401      	add	r1, r0
 8007888:	1850      	adds	r0, r2, r1
 800788a:	4283      	cmp	r3, r0
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	d1e0      	bne.n	8007852 <_free_r+0x22>
 8007890:	6818      	ldr	r0, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	6053      	str	r3, [r2, #4]
 8007896:	4408      	add	r0, r1
 8007898:	6010      	str	r0, [r2, #0]
 800789a:	e7da      	b.n	8007852 <_free_r+0x22>
 800789c:	d902      	bls.n	80078a4 <_free_r+0x74>
 800789e:	230c      	movs	r3, #12
 80078a0:	602b      	str	r3, [r5, #0]
 80078a2:	e7d6      	b.n	8007852 <_free_r+0x22>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	1821      	adds	r1, r4, r0
 80078a8:	428b      	cmp	r3, r1
 80078aa:	bf04      	itt	eq
 80078ac:	6819      	ldreq	r1, [r3, #0]
 80078ae:	685b      	ldreq	r3, [r3, #4]
 80078b0:	6063      	str	r3, [r4, #4]
 80078b2:	bf04      	itt	eq
 80078b4:	1809      	addeq	r1, r1, r0
 80078b6:	6021      	streq	r1, [r4, #0]
 80078b8:	6054      	str	r4, [r2, #4]
 80078ba:	e7ca      	b.n	8007852 <_free_r+0x22>
 80078bc:	bd38      	pop	{r3, r4, r5, pc}
 80078be:	bf00      	nop
 80078c0:	200065ac 	.word	0x200065ac

080078c4 <sbrk_aligned>:
 80078c4:	b570      	push	{r4, r5, r6, lr}
 80078c6:	4e0f      	ldr	r6, [pc, #60]	@ (8007904 <sbrk_aligned+0x40>)
 80078c8:	460c      	mov	r4, r1
 80078ca:	6831      	ldr	r1, [r6, #0]
 80078cc:	4605      	mov	r5, r0
 80078ce:	b911      	cbnz	r1, 80078d6 <sbrk_aligned+0x12>
 80078d0:	f000 fba6 	bl	8008020 <_sbrk_r>
 80078d4:	6030      	str	r0, [r6, #0]
 80078d6:	4621      	mov	r1, r4
 80078d8:	4628      	mov	r0, r5
 80078da:	f000 fba1 	bl	8008020 <_sbrk_r>
 80078de:	1c43      	adds	r3, r0, #1
 80078e0:	d103      	bne.n	80078ea <sbrk_aligned+0x26>
 80078e2:	f04f 34ff 	mov.w	r4, #4294967295
 80078e6:	4620      	mov	r0, r4
 80078e8:	bd70      	pop	{r4, r5, r6, pc}
 80078ea:	1cc4      	adds	r4, r0, #3
 80078ec:	f024 0403 	bic.w	r4, r4, #3
 80078f0:	42a0      	cmp	r0, r4
 80078f2:	d0f8      	beq.n	80078e6 <sbrk_aligned+0x22>
 80078f4:	1a21      	subs	r1, r4, r0
 80078f6:	4628      	mov	r0, r5
 80078f8:	f000 fb92 	bl	8008020 <_sbrk_r>
 80078fc:	3001      	adds	r0, #1
 80078fe:	d1f2      	bne.n	80078e6 <sbrk_aligned+0x22>
 8007900:	e7ef      	b.n	80078e2 <sbrk_aligned+0x1e>
 8007902:	bf00      	nop
 8007904:	200065a8 	.word	0x200065a8

08007908 <_malloc_r>:
 8007908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800790c:	1ccd      	adds	r5, r1, #3
 800790e:	f025 0503 	bic.w	r5, r5, #3
 8007912:	3508      	adds	r5, #8
 8007914:	2d0c      	cmp	r5, #12
 8007916:	bf38      	it	cc
 8007918:	250c      	movcc	r5, #12
 800791a:	2d00      	cmp	r5, #0
 800791c:	4606      	mov	r6, r0
 800791e:	db01      	blt.n	8007924 <_malloc_r+0x1c>
 8007920:	42a9      	cmp	r1, r5
 8007922:	d904      	bls.n	800792e <_malloc_r+0x26>
 8007924:	230c      	movs	r3, #12
 8007926:	6033      	str	r3, [r6, #0]
 8007928:	2000      	movs	r0, #0
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007a04 <_malloc_r+0xfc>
 8007932:	f000 f869 	bl	8007a08 <__malloc_lock>
 8007936:	f8d8 3000 	ldr.w	r3, [r8]
 800793a:	461c      	mov	r4, r3
 800793c:	bb44      	cbnz	r4, 8007990 <_malloc_r+0x88>
 800793e:	4629      	mov	r1, r5
 8007940:	4630      	mov	r0, r6
 8007942:	f7ff ffbf 	bl	80078c4 <sbrk_aligned>
 8007946:	1c43      	adds	r3, r0, #1
 8007948:	4604      	mov	r4, r0
 800794a:	d158      	bne.n	80079fe <_malloc_r+0xf6>
 800794c:	f8d8 4000 	ldr.w	r4, [r8]
 8007950:	4627      	mov	r7, r4
 8007952:	2f00      	cmp	r7, #0
 8007954:	d143      	bne.n	80079de <_malloc_r+0xd6>
 8007956:	2c00      	cmp	r4, #0
 8007958:	d04b      	beq.n	80079f2 <_malloc_r+0xea>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	4639      	mov	r1, r7
 800795e:	4630      	mov	r0, r6
 8007960:	eb04 0903 	add.w	r9, r4, r3
 8007964:	f000 fb5c 	bl	8008020 <_sbrk_r>
 8007968:	4581      	cmp	r9, r0
 800796a:	d142      	bne.n	80079f2 <_malloc_r+0xea>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	1a6d      	subs	r5, r5, r1
 8007970:	4629      	mov	r1, r5
 8007972:	4630      	mov	r0, r6
 8007974:	f7ff ffa6 	bl	80078c4 <sbrk_aligned>
 8007978:	3001      	adds	r0, #1
 800797a:	d03a      	beq.n	80079f2 <_malloc_r+0xea>
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	442b      	add	r3, r5
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	f8d8 3000 	ldr.w	r3, [r8]
 8007986:	685a      	ldr	r2, [r3, #4]
 8007988:	bb62      	cbnz	r2, 80079e4 <_malloc_r+0xdc>
 800798a:	f8c8 7000 	str.w	r7, [r8]
 800798e:	e00f      	b.n	80079b0 <_malloc_r+0xa8>
 8007990:	6822      	ldr	r2, [r4, #0]
 8007992:	1b52      	subs	r2, r2, r5
 8007994:	d420      	bmi.n	80079d8 <_malloc_r+0xd0>
 8007996:	2a0b      	cmp	r2, #11
 8007998:	d917      	bls.n	80079ca <_malloc_r+0xc2>
 800799a:	1961      	adds	r1, r4, r5
 800799c:	42a3      	cmp	r3, r4
 800799e:	6025      	str	r5, [r4, #0]
 80079a0:	bf18      	it	ne
 80079a2:	6059      	strne	r1, [r3, #4]
 80079a4:	6863      	ldr	r3, [r4, #4]
 80079a6:	bf08      	it	eq
 80079a8:	f8c8 1000 	streq.w	r1, [r8]
 80079ac:	5162      	str	r2, [r4, r5]
 80079ae:	604b      	str	r3, [r1, #4]
 80079b0:	4630      	mov	r0, r6
 80079b2:	f000 f82f 	bl	8007a14 <__malloc_unlock>
 80079b6:	f104 000b 	add.w	r0, r4, #11
 80079ba:	1d23      	adds	r3, r4, #4
 80079bc:	f020 0007 	bic.w	r0, r0, #7
 80079c0:	1ac2      	subs	r2, r0, r3
 80079c2:	bf1c      	itt	ne
 80079c4:	1a1b      	subne	r3, r3, r0
 80079c6:	50a3      	strne	r3, [r4, r2]
 80079c8:	e7af      	b.n	800792a <_malloc_r+0x22>
 80079ca:	6862      	ldr	r2, [r4, #4]
 80079cc:	42a3      	cmp	r3, r4
 80079ce:	bf0c      	ite	eq
 80079d0:	f8c8 2000 	streq.w	r2, [r8]
 80079d4:	605a      	strne	r2, [r3, #4]
 80079d6:	e7eb      	b.n	80079b0 <_malloc_r+0xa8>
 80079d8:	4623      	mov	r3, r4
 80079da:	6864      	ldr	r4, [r4, #4]
 80079dc:	e7ae      	b.n	800793c <_malloc_r+0x34>
 80079de:	463c      	mov	r4, r7
 80079e0:	687f      	ldr	r7, [r7, #4]
 80079e2:	e7b6      	b.n	8007952 <_malloc_r+0x4a>
 80079e4:	461a      	mov	r2, r3
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	42a3      	cmp	r3, r4
 80079ea:	d1fb      	bne.n	80079e4 <_malloc_r+0xdc>
 80079ec:	2300      	movs	r3, #0
 80079ee:	6053      	str	r3, [r2, #4]
 80079f0:	e7de      	b.n	80079b0 <_malloc_r+0xa8>
 80079f2:	230c      	movs	r3, #12
 80079f4:	6033      	str	r3, [r6, #0]
 80079f6:	4630      	mov	r0, r6
 80079f8:	f000 f80c 	bl	8007a14 <__malloc_unlock>
 80079fc:	e794      	b.n	8007928 <_malloc_r+0x20>
 80079fe:	6005      	str	r5, [r0, #0]
 8007a00:	e7d6      	b.n	80079b0 <_malloc_r+0xa8>
 8007a02:	bf00      	nop
 8007a04:	200065ac 	.word	0x200065ac

08007a08 <__malloc_lock>:
 8007a08:	4801      	ldr	r0, [pc, #4]	@ (8007a10 <__malloc_lock+0x8>)
 8007a0a:	f7ff bf01 	b.w	8007810 <__retarget_lock_acquire_recursive>
 8007a0e:	bf00      	nop
 8007a10:	200065a4 	.word	0x200065a4

08007a14 <__malloc_unlock>:
 8007a14:	4801      	ldr	r0, [pc, #4]	@ (8007a1c <__malloc_unlock+0x8>)
 8007a16:	f7ff befc 	b.w	8007812 <__retarget_lock_release_recursive>
 8007a1a:	bf00      	nop
 8007a1c:	200065a4 	.word	0x200065a4

08007a20 <__ssputs_r>:
 8007a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a24:	688e      	ldr	r6, [r1, #8]
 8007a26:	461f      	mov	r7, r3
 8007a28:	42be      	cmp	r6, r7
 8007a2a:	680b      	ldr	r3, [r1, #0]
 8007a2c:	4682      	mov	sl, r0
 8007a2e:	460c      	mov	r4, r1
 8007a30:	4690      	mov	r8, r2
 8007a32:	d82d      	bhi.n	8007a90 <__ssputs_r+0x70>
 8007a34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a3c:	d026      	beq.n	8007a8c <__ssputs_r+0x6c>
 8007a3e:	6965      	ldr	r5, [r4, #20]
 8007a40:	6909      	ldr	r1, [r1, #16]
 8007a42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a46:	eba3 0901 	sub.w	r9, r3, r1
 8007a4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a4e:	1c7b      	adds	r3, r7, #1
 8007a50:	444b      	add	r3, r9
 8007a52:	106d      	asrs	r5, r5, #1
 8007a54:	429d      	cmp	r5, r3
 8007a56:	bf38      	it	cc
 8007a58:	461d      	movcc	r5, r3
 8007a5a:	0553      	lsls	r3, r2, #21
 8007a5c:	d527      	bpl.n	8007aae <__ssputs_r+0x8e>
 8007a5e:	4629      	mov	r1, r5
 8007a60:	f7ff ff52 	bl	8007908 <_malloc_r>
 8007a64:	4606      	mov	r6, r0
 8007a66:	b360      	cbz	r0, 8007ac2 <__ssputs_r+0xa2>
 8007a68:	6921      	ldr	r1, [r4, #16]
 8007a6a:	464a      	mov	r2, r9
 8007a6c:	f7ff fed2 	bl	8007814 <memcpy>
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a7a:	81a3      	strh	r3, [r4, #12]
 8007a7c:	6126      	str	r6, [r4, #16]
 8007a7e:	6165      	str	r5, [r4, #20]
 8007a80:	444e      	add	r6, r9
 8007a82:	eba5 0509 	sub.w	r5, r5, r9
 8007a86:	6026      	str	r6, [r4, #0]
 8007a88:	60a5      	str	r5, [r4, #8]
 8007a8a:	463e      	mov	r6, r7
 8007a8c:	42be      	cmp	r6, r7
 8007a8e:	d900      	bls.n	8007a92 <__ssputs_r+0x72>
 8007a90:	463e      	mov	r6, r7
 8007a92:	6820      	ldr	r0, [r4, #0]
 8007a94:	4632      	mov	r2, r6
 8007a96:	4641      	mov	r1, r8
 8007a98:	f000 faa8 	bl	8007fec <memmove>
 8007a9c:	68a3      	ldr	r3, [r4, #8]
 8007a9e:	1b9b      	subs	r3, r3, r6
 8007aa0:	60a3      	str	r3, [r4, #8]
 8007aa2:	6823      	ldr	r3, [r4, #0]
 8007aa4:	4433      	add	r3, r6
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aae:	462a      	mov	r2, r5
 8007ab0:	f000 fac6 	bl	8008040 <_realloc_r>
 8007ab4:	4606      	mov	r6, r0
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d1e0      	bne.n	8007a7c <__ssputs_r+0x5c>
 8007aba:	6921      	ldr	r1, [r4, #16]
 8007abc:	4650      	mov	r0, sl
 8007abe:	f7ff feb7 	bl	8007830 <_free_r>
 8007ac2:	230c      	movs	r3, #12
 8007ac4:	f8ca 3000 	str.w	r3, [sl]
 8007ac8:	89a3      	ldrh	r3, [r4, #12]
 8007aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ace:	81a3      	strh	r3, [r4, #12]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	e7e9      	b.n	8007aaa <__ssputs_r+0x8a>
	...

08007ad8 <_svfiprintf_r>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	4698      	mov	r8, r3
 8007ade:	898b      	ldrh	r3, [r1, #12]
 8007ae0:	061b      	lsls	r3, r3, #24
 8007ae2:	b09d      	sub	sp, #116	@ 0x74
 8007ae4:	4607      	mov	r7, r0
 8007ae6:	460d      	mov	r5, r1
 8007ae8:	4614      	mov	r4, r2
 8007aea:	d510      	bpl.n	8007b0e <_svfiprintf_r+0x36>
 8007aec:	690b      	ldr	r3, [r1, #16]
 8007aee:	b973      	cbnz	r3, 8007b0e <_svfiprintf_r+0x36>
 8007af0:	2140      	movs	r1, #64	@ 0x40
 8007af2:	f7ff ff09 	bl	8007908 <_malloc_r>
 8007af6:	6028      	str	r0, [r5, #0]
 8007af8:	6128      	str	r0, [r5, #16]
 8007afa:	b930      	cbnz	r0, 8007b0a <_svfiprintf_r+0x32>
 8007afc:	230c      	movs	r3, #12
 8007afe:	603b      	str	r3, [r7, #0]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	b01d      	add	sp, #116	@ 0x74
 8007b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b0a:	2340      	movs	r3, #64	@ 0x40
 8007b0c:	616b      	str	r3, [r5, #20]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b12:	2320      	movs	r3, #32
 8007b14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b18:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b1c:	2330      	movs	r3, #48	@ 0x30
 8007b1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007cbc <_svfiprintf_r+0x1e4>
 8007b22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b26:	f04f 0901 	mov.w	r9, #1
 8007b2a:	4623      	mov	r3, r4
 8007b2c:	469a      	mov	sl, r3
 8007b2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b32:	b10a      	cbz	r2, 8007b38 <_svfiprintf_r+0x60>
 8007b34:	2a25      	cmp	r2, #37	@ 0x25
 8007b36:	d1f9      	bne.n	8007b2c <_svfiprintf_r+0x54>
 8007b38:	ebba 0b04 	subs.w	fp, sl, r4
 8007b3c:	d00b      	beq.n	8007b56 <_svfiprintf_r+0x7e>
 8007b3e:	465b      	mov	r3, fp
 8007b40:	4622      	mov	r2, r4
 8007b42:	4629      	mov	r1, r5
 8007b44:	4638      	mov	r0, r7
 8007b46:	f7ff ff6b 	bl	8007a20 <__ssputs_r>
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f000 80a7 	beq.w	8007c9e <_svfiprintf_r+0x1c6>
 8007b50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b52:	445a      	add	r2, fp
 8007b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b56:	f89a 3000 	ldrb.w	r3, [sl]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	f000 809f 	beq.w	8007c9e <_svfiprintf_r+0x1c6>
 8007b60:	2300      	movs	r3, #0
 8007b62:	f04f 32ff 	mov.w	r2, #4294967295
 8007b66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b6a:	f10a 0a01 	add.w	sl, sl, #1
 8007b6e:	9304      	str	r3, [sp, #16]
 8007b70:	9307      	str	r3, [sp, #28]
 8007b72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b76:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b78:	4654      	mov	r4, sl
 8007b7a:	2205      	movs	r2, #5
 8007b7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b80:	484e      	ldr	r0, [pc, #312]	@ (8007cbc <_svfiprintf_r+0x1e4>)
 8007b82:	f7f8 fb4d 	bl	8000220 <memchr>
 8007b86:	9a04      	ldr	r2, [sp, #16]
 8007b88:	b9d8      	cbnz	r0, 8007bc2 <_svfiprintf_r+0xea>
 8007b8a:	06d0      	lsls	r0, r2, #27
 8007b8c:	bf44      	itt	mi
 8007b8e:	2320      	movmi	r3, #32
 8007b90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b94:	0711      	lsls	r1, r2, #28
 8007b96:	bf44      	itt	mi
 8007b98:	232b      	movmi	r3, #43	@ 0x2b
 8007b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ba2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ba4:	d015      	beq.n	8007bd2 <_svfiprintf_r+0xfa>
 8007ba6:	9a07      	ldr	r2, [sp, #28]
 8007ba8:	4654      	mov	r4, sl
 8007baa:	2000      	movs	r0, #0
 8007bac:	f04f 0c0a 	mov.w	ip, #10
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007bb6:	3b30      	subs	r3, #48	@ 0x30
 8007bb8:	2b09      	cmp	r3, #9
 8007bba:	d94b      	bls.n	8007c54 <_svfiprintf_r+0x17c>
 8007bbc:	b1b0      	cbz	r0, 8007bec <_svfiprintf_r+0x114>
 8007bbe:	9207      	str	r2, [sp, #28]
 8007bc0:	e014      	b.n	8007bec <_svfiprintf_r+0x114>
 8007bc2:	eba0 0308 	sub.w	r3, r0, r8
 8007bc6:	fa09 f303 	lsl.w	r3, r9, r3
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	9304      	str	r3, [sp, #16]
 8007bce:	46a2      	mov	sl, r4
 8007bd0:	e7d2      	b.n	8007b78 <_svfiprintf_r+0xa0>
 8007bd2:	9b03      	ldr	r3, [sp, #12]
 8007bd4:	1d19      	adds	r1, r3, #4
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	9103      	str	r1, [sp, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bfbb      	ittet	lt
 8007bde:	425b      	neglt	r3, r3
 8007be0:	f042 0202 	orrlt.w	r2, r2, #2
 8007be4:	9307      	strge	r3, [sp, #28]
 8007be6:	9307      	strlt	r3, [sp, #28]
 8007be8:	bfb8      	it	lt
 8007bea:	9204      	strlt	r2, [sp, #16]
 8007bec:	7823      	ldrb	r3, [r4, #0]
 8007bee:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bf0:	d10a      	bne.n	8007c08 <_svfiprintf_r+0x130>
 8007bf2:	7863      	ldrb	r3, [r4, #1]
 8007bf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8007bf6:	d132      	bne.n	8007c5e <_svfiprintf_r+0x186>
 8007bf8:	9b03      	ldr	r3, [sp, #12]
 8007bfa:	1d1a      	adds	r2, r3, #4
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	9203      	str	r2, [sp, #12]
 8007c00:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c04:	3402      	adds	r4, #2
 8007c06:	9305      	str	r3, [sp, #20]
 8007c08:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007ccc <_svfiprintf_r+0x1f4>
 8007c0c:	7821      	ldrb	r1, [r4, #0]
 8007c0e:	2203      	movs	r2, #3
 8007c10:	4650      	mov	r0, sl
 8007c12:	f7f8 fb05 	bl	8000220 <memchr>
 8007c16:	b138      	cbz	r0, 8007c28 <_svfiprintf_r+0x150>
 8007c18:	9b04      	ldr	r3, [sp, #16]
 8007c1a:	eba0 000a 	sub.w	r0, r0, sl
 8007c1e:	2240      	movs	r2, #64	@ 0x40
 8007c20:	4082      	lsls	r2, r0
 8007c22:	4313      	orrs	r3, r2
 8007c24:	3401      	adds	r4, #1
 8007c26:	9304      	str	r3, [sp, #16]
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	4824      	ldr	r0, [pc, #144]	@ (8007cc0 <_svfiprintf_r+0x1e8>)
 8007c2e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c32:	2206      	movs	r2, #6
 8007c34:	f7f8 faf4 	bl	8000220 <memchr>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d036      	beq.n	8007caa <_svfiprintf_r+0x1d2>
 8007c3c:	4b21      	ldr	r3, [pc, #132]	@ (8007cc4 <_svfiprintf_r+0x1ec>)
 8007c3e:	bb1b      	cbnz	r3, 8007c88 <_svfiprintf_r+0x1b0>
 8007c40:	9b03      	ldr	r3, [sp, #12]
 8007c42:	3307      	adds	r3, #7
 8007c44:	f023 0307 	bic.w	r3, r3, #7
 8007c48:	3308      	adds	r3, #8
 8007c4a:	9303      	str	r3, [sp, #12]
 8007c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c4e:	4433      	add	r3, r6
 8007c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c52:	e76a      	b.n	8007b2a <_svfiprintf_r+0x52>
 8007c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c58:	460c      	mov	r4, r1
 8007c5a:	2001      	movs	r0, #1
 8007c5c:	e7a8      	b.n	8007bb0 <_svfiprintf_r+0xd8>
 8007c5e:	2300      	movs	r3, #0
 8007c60:	3401      	adds	r4, #1
 8007c62:	9305      	str	r3, [sp, #20]
 8007c64:	4619      	mov	r1, r3
 8007c66:	f04f 0c0a 	mov.w	ip, #10
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c70:	3a30      	subs	r2, #48	@ 0x30
 8007c72:	2a09      	cmp	r2, #9
 8007c74:	d903      	bls.n	8007c7e <_svfiprintf_r+0x1a6>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d0c6      	beq.n	8007c08 <_svfiprintf_r+0x130>
 8007c7a:	9105      	str	r1, [sp, #20]
 8007c7c:	e7c4      	b.n	8007c08 <_svfiprintf_r+0x130>
 8007c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c82:	4604      	mov	r4, r0
 8007c84:	2301      	movs	r3, #1
 8007c86:	e7f0      	b.n	8007c6a <_svfiprintf_r+0x192>
 8007c88:	ab03      	add	r3, sp, #12
 8007c8a:	9300      	str	r3, [sp, #0]
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc8 <_svfiprintf_r+0x1f0>)
 8007c90:	a904      	add	r1, sp, #16
 8007c92:	4638      	mov	r0, r7
 8007c94:	f3af 8000 	nop.w
 8007c98:	1c42      	adds	r2, r0, #1
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	d1d6      	bne.n	8007c4c <_svfiprintf_r+0x174>
 8007c9e:	89ab      	ldrh	r3, [r5, #12]
 8007ca0:	065b      	lsls	r3, r3, #25
 8007ca2:	f53f af2d 	bmi.w	8007b00 <_svfiprintf_r+0x28>
 8007ca6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ca8:	e72c      	b.n	8007b04 <_svfiprintf_r+0x2c>
 8007caa:	ab03      	add	r3, sp, #12
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	462a      	mov	r2, r5
 8007cb0:	4b05      	ldr	r3, [pc, #20]	@ (8007cc8 <_svfiprintf_r+0x1f0>)
 8007cb2:	a904      	add	r1, sp, #16
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f000 f879 	bl	8007dac <_printf_i>
 8007cba:	e7ed      	b.n	8007c98 <_svfiprintf_r+0x1c0>
 8007cbc:	08008200 	.word	0x08008200
 8007cc0:	0800820a 	.word	0x0800820a
 8007cc4:	00000000 	.word	0x00000000
 8007cc8:	08007a21 	.word	0x08007a21
 8007ccc:	08008206 	.word	0x08008206

08007cd0 <_printf_common>:
 8007cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd4:	4616      	mov	r6, r2
 8007cd6:	4698      	mov	r8, r3
 8007cd8:	688a      	ldr	r2, [r1, #8]
 8007cda:	690b      	ldr	r3, [r1, #16]
 8007cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	bfb8      	it	lt
 8007ce4:	4613      	movlt	r3, r2
 8007ce6:	6033      	str	r3, [r6, #0]
 8007ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cec:	4607      	mov	r7, r0
 8007cee:	460c      	mov	r4, r1
 8007cf0:	b10a      	cbz	r2, 8007cf6 <_printf_common+0x26>
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	6033      	str	r3, [r6, #0]
 8007cf6:	6823      	ldr	r3, [r4, #0]
 8007cf8:	0699      	lsls	r1, r3, #26
 8007cfa:	bf42      	ittt	mi
 8007cfc:	6833      	ldrmi	r3, [r6, #0]
 8007cfe:	3302      	addmi	r3, #2
 8007d00:	6033      	strmi	r3, [r6, #0]
 8007d02:	6825      	ldr	r5, [r4, #0]
 8007d04:	f015 0506 	ands.w	r5, r5, #6
 8007d08:	d106      	bne.n	8007d18 <_printf_common+0x48>
 8007d0a:	f104 0a19 	add.w	sl, r4, #25
 8007d0e:	68e3      	ldr	r3, [r4, #12]
 8007d10:	6832      	ldr	r2, [r6, #0]
 8007d12:	1a9b      	subs	r3, r3, r2
 8007d14:	42ab      	cmp	r3, r5
 8007d16:	dc26      	bgt.n	8007d66 <_printf_common+0x96>
 8007d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d1c:	6822      	ldr	r2, [r4, #0]
 8007d1e:	3b00      	subs	r3, #0
 8007d20:	bf18      	it	ne
 8007d22:	2301      	movne	r3, #1
 8007d24:	0692      	lsls	r2, r2, #26
 8007d26:	d42b      	bmi.n	8007d80 <_printf_common+0xb0>
 8007d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c8      	blx	r9
 8007d32:	3001      	adds	r0, #1
 8007d34:	d01e      	beq.n	8007d74 <_printf_common+0xa4>
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	6922      	ldr	r2, [r4, #16]
 8007d3a:	f003 0306 	and.w	r3, r3, #6
 8007d3e:	2b04      	cmp	r3, #4
 8007d40:	bf02      	ittt	eq
 8007d42:	68e5      	ldreq	r5, [r4, #12]
 8007d44:	6833      	ldreq	r3, [r6, #0]
 8007d46:	1aed      	subeq	r5, r5, r3
 8007d48:	68a3      	ldr	r3, [r4, #8]
 8007d4a:	bf0c      	ite	eq
 8007d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d50:	2500      	movne	r5, #0
 8007d52:	4293      	cmp	r3, r2
 8007d54:	bfc4      	itt	gt
 8007d56:	1a9b      	subgt	r3, r3, r2
 8007d58:	18ed      	addgt	r5, r5, r3
 8007d5a:	2600      	movs	r6, #0
 8007d5c:	341a      	adds	r4, #26
 8007d5e:	42b5      	cmp	r5, r6
 8007d60:	d11a      	bne.n	8007d98 <_printf_common+0xc8>
 8007d62:	2000      	movs	r0, #0
 8007d64:	e008      	b.n	8007d78 <_printf_common+0xa8>
 8007d66:	2301      	movs	r3, #1
 8007d68:	4652      	mov	r2, sl
 8007d6a:	4641      	mov	r1, r8
 8007d6c:	4638      	mov	r0, r7
 8007d6e:	47c8      	blx	r9
 8007d70:	3001      	adds	r0, #1
 8007d72:	d103      	bne.n	8007d7c <_printf_common+0xac>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295
 8007d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d7c:	3501      	adds	r5, #1
 8007d7e:	e7c6      	b.n	8007d0e <_printf_common+0x3e>
 8007d80:	18e1      	adds	r1, r4, r3
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	2030      	movs	r0, #48	@ 0x30
 8007d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d8a:	4422      	add	r2, r4
 8007d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d94:	3302      	adds	r3, #2
 8007d96:	e7c7      	b.n	8007d28 <_printf_common+0x58>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	4622      	mov	r2, r4
 8007d9c:	4641      	mov	r1, r8
 8007d9e:	4638      	mov	r0, r7
 8007da0:	47c8      	blx	r9
 8007da2:	3001      	adds	r0, #1
 8007da4:	d0e6      	beq.n	8007d74 <_printf_common+0xa4>
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7d9      	b.n	8007d5e <_printf_common+0x8e>
	...

08007dac <_printf_i>:
 8007dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db0:	7e0f      	ldrb	r7, [r1, #24]
 8007db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007db4:	2f78      	cmp	r7, #120	@ 0x78
 8007db6:	4691      	mov	r9, r2
 8007db8:	4680      	mov	r8, r0
 8007dba:	460c      	mov	r4, r1
 8007dbc:	469a      	mov	sl, r3
 8007dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dc2:	d807      	bhi.n	8007dd4 <_printf_i+0x28>
 8007dc4:	2f62      	cmp	r7, #98	@ 0x62
 8007dc6:	d80a      	bhi.n	8007dde <_printf_i+0x32>
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	f000 80d2 	beq.w	8007f72 <_printf_i+0x1c6>
 8007dce:	2f58      	cmp	r7, #88	@ 0x58
 8007dd0:	f000 80b9 	beq.w	8007f46 <_printf_i+0x19a>
 8007dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ddc:	e03a      	b.n	8007e54 <_printf_i+0xa8>
 8007dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007de2:	2b15      	cmp	r3, #21
 8007de4:	d8f6      	bhi.n	8007dd4 <_printf_i+0x28>
 8007de6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dec <_printf_i+0x40>)
 8007de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dec:	08007e45 	.word	0x08007e45
 8007df0:	08007e59 	.word	0x08007e59
 8007df4:	08007dd5 	.word	0x08007dd5
 8007df8:	08007dd5 	.word	0x08007dd5
 8007dfc:	08007dd5 	.word	0x08007dd5
 8007e00:	08007dd5 	.word	0x08007dd5
 8007e04:	08007e59 	.word	0x08007e59
 8007e08:	08007dd5 	.word	0x08007dd5
 8007e0c:	08007dd5 	.word	0x08007dd5
 8007e10:	08007dd5 	.word	0x08007dd5
 8007e14:	08007dd5 	.word	0x08007dd5
 8007e18:	08007f59 	.word	0x08007f59
 8007e1c:	08007e83 	.word	0x08007e83
 8007e20:	08007f13 	.word	0x08007f13
 8007e24:	08007dd5 	.word	0x08007dd5
 8007e28:	08007dd5 	.word	0x08007dd5
 8007e2c:	08007f7b 	.word	0x08007f7b
 8007e30:	08007dd5 	.word	0x08007dd5
 8007e34:	08007e83 	.word	0x08007e83
 8007e38:	08007dd5 	.word	0x08007dd5
 8007e3c:	08007dd5 	.word	0x08007dd5
 8007e40:	08007f1b 	.word	0x08007f1b
 8007e44:	6833      	ldr	r3, [r6, #0]
 8007e46:	1d1a      	adds	r2, r3, #4
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	6032      	str	r2, [r6, #0]
 8007e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e54:	2301      	movs	r3, #1
 8007e56:	e09d      	b.n	8007f94 <_printf_i+0x1e8>
 8007e58:	6833      	ldr	r3, [r6, #0]
 8007e5a:	6820      	ldr	r0, [r4, #0]
 8007e5c:	1d19      	adds	r1, r3, #4
 8007e5e:	6031      	str	r1, [r6, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	d501      	bpl.n	8007e68 <_printf_i+0xbc>
 8007e64:	681d      	ldr	r5, [r3, #0]
 8007e66:	e003      	b.n	8007e70 <_printf_i+0xc4>
 8007e68:	0645      	lsls	r5, r0, #25
 8007e6a:	d5fb      	bpl.n	8007e64 <_printf_i+0xb8>
 8007e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e70:	2d00      	cmp	r5, #0
 8007e72:	da03      	bge.n	8007e7c <_printf_i+0xd0>
 8007e74:	232d      	movs	r3, #45	@ 0x2d
 8007e76:	426d      	negs	r5, r5
 8007e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e7c:	4859      	ldr	r0, [pc, #356]	@ (8007fe4 <_printf_i+0x238>)
 8007e7e:	230a      	movs	r3, #10
 8007e80:	e011      	b.n	8007ea6 <_printf_i+0xfa>
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	6833      	ldr	r3, [r6, #0]
 8007e86:	0608      	lsls	r0, r1, #24
 8007e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e8c:	d402      	bmi.n	8007e94 <_printf_i+0xe8>
 8007e8e:	0649      	lsls	r1, r1, #25
 8007e90:	bf48      	it	mi
 8007e92:	b2ad      	uxthmi	r5, r5
 8007e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e96:	4853      	ldr	r0, [pc, #332]	@ (8007fe4 <_printf_i+0x238>)
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	bf14      	ite	ne
 8007e9c:	230a      	movne	r3, #10
 8007e9e:	2308      	moveq	r3, #8
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ea6:	6866      	ldr	r6, [r4, #4]
 8007ea8:	60a6      	str	r6, [r4, #8]
 8007eaa:	2e00      	cmp	r6, #0
 8007eac:	bfa2      	ittt	ge
 8007eae:	6821      	ldrge	r1, [r4, #0]
 8007eb0:	f021 0104 	bicge.w	r1, r1, #4
 8007eb4:	6021      	strge	r1, [r4, #0]
 8007eb6:	b90d      	cbnz	r5, 8007ebc <_printf_i+0x110>
 8007eb8:	2e00      	cmp	r6, #0
 8007eba:	d04b      	beq.n	8007f54 <_printf_i+0x1a8>
 8007ebc:	4616      	mov	r6, r2
 8007ebe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ec2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ec6:	5dc7      	ldrb	r7, [r0, r7]
 8007ec8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ecc:	462f      	mov	r7, r5
 8007ece:	42bb      	cmp	r3, r7
 8007ed0:	460d      	mov	r5, r1
 8007ed2:	d9f4      	bls.n	8007ebe <_printf_i+0x112>
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d10b      	bne.n	8007ef0 <_printf_i+0x144>
 8007ed8:	6823      	ldr	r3, [r4, #0]
 8007eda:	07df      	lsls	r7, r3, #31
 8007edc:	d508      	bpl.n	8007ef0 <_printf_i+0x144>
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	6861      	ldr	r1, [r4, #4]
 8007ee2:	4299      	cmp	r1, r3
 8007ee4:	bfde      	ittt	le
 8007ee6:	2330      	movle	r3, #48	@ 0x30
 8007ee8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eec:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ef0:	1b92      	subs	r2, r2, r6
 8007ef2:	6122      	str	r2, [r4, #16]
 8007ef4:	f8cd a000 	str.w	sl, [sp]
 8007ef8:	464b      	mov	r3, r9
 8007efa:	aa03      	add	r2, sp, #12
 8007efc:	4621      	mov	r1, r4
 8007efe:	4640      	mov	r0, r8
 8007f00:	f7ff fee6 	bl	8007cd0 <_printf_common>
 8007f04:	3001      	adds	r0, #1
 8007f06:	d14a      	bne.n	8007f9e <_printf_i+0x1f2>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	b004      	add	sp, #16
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	f043 0320 	orr.w	r3, r3, #32
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	4833      	ldr	r0, [pc, #204]	@ (8007fe8 <_printf_i+0x23c>)
 8007f1c:	2778      	movs	r7, #120	@ 0x78
 8007f1e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	6831      	ldr	r1, [r6, #0]
 8007f26:	061f      	lsls	r7, r3, #24
 8007f28:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f2c:	d402      	bmi.n	8007f34 <_printf_i+0x188>
 8007f2e:	065f      	lsls	r7, r3, #25
 8007f30:	bf48      	it	mi
 8007f32:	b2ad      	uxthmi	r5, r5
 8007f34:	6031      	str	r1, [r6, #0]
 8007f36:	07d9      	lsls	r1, r3, #31
 8007f38:	bf44      	itt	mi
 8007f3a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3e:	6023      	strmi	r3, [r4, #0]
 8007f40:	b11d      	cbz	r5, 8007f4a <_printf_i+0x19e>
 8007f42:	2310      	movs	r3, #16
 8007f44:	e7ac      	b.n	8007ea0 <_printf_i+0xf4>
 8007f46:	4827      	ldr	r0, [pc, #156]	@ (8007fe4 <_printf_i+0x238>)
 8007f48:	e7e9      	b.n	8007f1e <_printf_i+0x172>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f023 0320 	bic.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	e7f6      	b.n	8007f42 <_printf_i+0x196>
 8007f54:	4616      	mov	r6, r2
 8007f56:	e7bd      	b.n	8007ed4 <_printf_i+0x128>
 8007f58:	6833      	ldr	r3, [r6, #0]
 8007f5a:	6825      	ldr	r5, [r4, #0]
 8007f5c:	6961      	ldr	r1, [r4, #20]
 8007f5e:	1d18      	adds	r0, r3, #4
 8007f60:	6030      	str	r0, [r6, #0]
 8007f62:	062e      	lsls	r6, r5, #24
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	d501      	bpl.n	8007f6c <_printf_i+0x1c0>
 8007f68:	6019      	str	r1, [r3, #0]
 8007f6a:	e002      	b.n	8007f72 <_printf_i+0x1c6>
 8007f6c:	0668      	lsls	r0, r5, #25
 8007f6e:	d5fb      	bpl.n	8007f68 <_printf_i+0x1bc>
 8007f70:	8019      	strh	r1, [r3, #0]
 8007f72:	2300      	movs	r3, #0
 8007f74:	6123      	str	r3, [r4, #16]
 8007f76:	4616      	mov	r6, r2
 8007f78:	e7bc      	b.n	8007ef4 <_printf_i+0x148>
 8007f7a:	6833      	ldr	r3, [r6, #0]
 8007f7c:	1d1a      	adds	r2, r3, #4
 8007f7e:	6032      	str	r2, [r6, #0]
 8007f80:	681e      	ldr	r6, [r3, #0]
 8007f82:	6862      	ldr	r2, [r4, #4]
 8007f84:	2100      	movs	r1, #0
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7f8 f94a 	bl	8000220 <memchr>
 8007f8c:	b108      	cbz	r0, 8007f92 <_printf_i+0x1e6>
 8007f8e:	1b80      	subs	r0, r0, r6
 8007f90:	6060      	str	r0, [r4, #4]
 8007f92:	6863      	ldr	r3, [r4, #4]
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	2300      	movs	r3, #0
 8007f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f9c:	e7aa      	b.n	8007ef4 <_printf_i+0x148>
 8007f9e:	6923      	ldr	r3, [r4, #16]
 8007fa0:	4632      	mov	r2, r6
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	4640      	mov	r0, r8
 8007fa6:	47d0      	blx	sl
 8007fa8:	3001      	adds	r0, #1
 8007faa:	d0ad      	beq.n	8007f08 <_printf_i+0x15c>
 8007fac:	6823      	ldr	r3, [r4, #0]
 8007fae:	079b      	lsls	r3, r3, #30
 8007fb0:	d413      	bmi.n	8007fda <_printf_i+0x22e>
 8007fb2:	68e0      	ldr	r0, [r4, #12]
 8007fb4:	9b03      	ldr	r3, [sp, #12]
 8007fb6:	4298      	cmp	r0, r3
 8007fb8:	bfb8      	it	lt
 8007fba:	4618      	movlt	r0, r3
 8007fbc:	e7a6      	b.n	8007f0c <_printf_i+0x160>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4632      	mov	r2, r6
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	47d0      	blx	sl
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d09d      	beq.n	8007f08 <_printf_i+0x15c>
 8007fcc:	3501      	adds	r5, #1
 8007fce:	68e3      	ldr	r3, [r4, #12]
 8007fd0:	9903      	ldr	r1, [sp, #12]
 8007fd2:	1a5b      	subs	r3, r3, r1
 8007fd4:	42ab      	cmp	r3, r5
 8007fd6:	dcf2      	bgt.n	8007fbe <_printf_i+0x212>
 8007fd8:	e7eb      	b.n	8007fb2 <_printf_i+0x206>
 8007fda:	2500      	movs	r5, #0
 8007fdc:	f104 0619 	add.w	r6, r4, #25
 8007fe0:	e7f5      	b.n	8007fce <_printf_i+0x222>
 8007fe2:	bf00      	nop
 8007fe4:	08008211 	.word	0x08008211
 8007fe8:	08008222 	.word	0x08008222

08007fec <memmove>:
 8007fec:	4288      	cmp	r0, r1
 8007fee:	b510      	push	{r4, lr}
 8007ff0:	eb01 0402 	add.w	r4, r1, r2
 8007ff4:	d902      	bls.n	8007ffc <memmove+0x10>
 8007ff6:	4284      	cmp	r4, r0
 8007ff8:	4623      	mov	r3, r4
 8007ffa:	d807      	bhi.n	800800c <memmove+0x20>
 8007ffc:	1e43      	subs	r3, r0, #1
 8007ffe:	42a1      	cmp	r1, r4
 8008000:	d008      	beq.n	8008014 <memmove+0x28>
 8008002:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008006:	f803 2f01 	strb.w	r2, [r3, #1]!
 800800a:	e7f8      	b.n	8007ffe <memmove+0x12>
 800800c:	4402      	add	r2, r0
 800800e:	4601      	mov	r1, r0
 8008010:	428a      	cmp	r2, r1
 8008012:	d100      	bne.n	8008016 <memmove+0x2a>
 8008014:	bd10      	pop	{r4, pc}
 8008016:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800801a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800801e:	e7f7      	b.n	8008010 <memmove+0x24>

08008020 <_sbrk_r>:
 8008020:	b538      	push	{r3, r4, r5, lr}
 8008022:	4d06      	ldr	r5, [pc, #24]	@ (800803c <_sbrk_r+0x1c>)
 8008024:	2300      	movs	r3, #0
 8008026:	4604      	mov	r4, r0
 8008028:	4608      	mov	r0, r1
 800802a:	602b      	str	r3, [r5, #0]
 800802c:	f7f8 ff14 	bl	8000e58 <_sbrk>
 8008030:	1c43      	adds	r3, r0, #1
 8008032:	d102      	bne.n	800803a <_sbrk_r+0x1a>
 8008034:	682b      	ldr	r3, [r5, #0]
 8008036:	b103      	cbz	r3, 800803a <_sbrk_r+0x1a>
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	bd38      	pop	{r3, r4, r5, pc}
 800803c:	200065a0 	.word	0x200065a0

08008040 <_realloc_r>:
 8008040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008044:	4680      	mov	r8, r0
 8008046:	4615      	mov	r5, r2
 8008048:	460c      	mov	r4, r1
 800804a:	b921      	cbnz	r1, 8008056 <_realloc_r+0x16>
 800804c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008050:	4611      	mov	r1, r2
 8008052:	f7ff bc59 	b.w	8007908 <_malloc_r>
 8008056:	b92a      	cbnz	r2, 8008064 <_realloc_r+0x24>
 8008058:	f7ff fbea 	bl	8007830 <_free_r>
 800805c:	2400      	movs	r4, #0
 800805e:	4620      	mov	r0, r4
 8008060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008064:	f000 f81a 	bl	800809c <_malloc_usable_size_r>
 8008068:	4285      	cmp	r5, r0
 800806a:	4606      	mov	r6, r0
 800806c:	d802      	bhi.n	8008074 <_realloc_r+0x34>
 800806e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008072:	d8f4      	bhi.n	800805e <_realloc_r+0x1e>
 8008074:	4629      	mov	r1, r5
 8008076:	4640      	mov	r0, r8
 8008078:	f7ff fc46 	bl	8007908 <_malloc_r>
 800807c:	4607      	mov	r7, r0
 800807e:	2800      	cmp	r0, #0
 8008080:	d0ec      	beq.n	800805c <_realloc_r+0x1c>
 8008082:	42b5      	cmp	r5, r6
 8008084:	462a      	mov	r2, r5
 8008086:	4621      	mov	r1, r4
 8008088:	bf28      	it	cs
 800808a:	4632      	movcs	r2, r6
 800808c:	f7ff fbc2 	bl	8007814 <memcpy>
 8008090:	4621      	mov	r1, r4
 8008092:	4640      	mov	r0, r8
 8008094:	f7ff fbcc 	bl	8007830 <_free_r>
 8008098:	463c      	mov	r4, r7
 800809a:	e7e0      	b.n	800805e <_realloc_r+0x1e>

0800809c <_malloc_usable_size_r>:
 800809c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080a0:	1f18      	subs	r0, r3, #4
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	bfbc      	itt	lt
 80080a6:	580b      	ldrlt	r3, [r1, r0]
 80080a8:	18c0      	addlt	r0, r0, r3
 80080aa:	4770      	bx	lr

080080ac <_init>:
 80080ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ae:	bf00      	nop
 80080b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b2:	bc08      	pop	{r3}
 80080b4:	469e      	mov	lr, r3
 80080b6:	4770      	bx	lr

080080b8 <_fini>:
 80080b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ba:	bf00      	nop
 80080bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080be:	bc08      	pop	{r3}
 80080c0:	469e      	mov	lr, r3
 80080c2:	4770      	bx	lr
