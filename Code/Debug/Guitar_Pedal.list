
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a54  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08007c24  08007c24  00008c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d48  08007d48  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  08007d48  08007d48  00008d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d50  08007d50  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d50  08007d50  00008d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007d54  08007d54  00008d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08007d58  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d08  20000060  08007db8  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006d68  08007db8  00009d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000197bc  00000000  00000000  00009090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a51  00000000  00000000  0002284c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  000262a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001148  00000000  00000000  000278e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002522f  00000000  00000000  00028a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a5ac  00000000  00000000  0004dc57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8369  00000000  00000000  00068203  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015056c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  001505b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00156868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c0c 	.word	0x08007c0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08007c0c 	.word	0x08007c0c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_ADC_ConvHalfCpltCallback>:


	}

	// Called when the **first half** of the DMA buffer is filled
	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <HAL_ADC_ConvHalfCpltCallback+0x34>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d10b      	bne.n	80005da <HAL_ADC_ConvHalfCpltCallback+0x2a>
	        memcpy(tx_buf, adc_buf, (ADC_BUF_LEN/2) * sizeof(uint16_t));
 80005c2:	4a09      	ldr	r2, [pc, #36]	@ (80005e8 <HAL_ADC_ConvHalfCpltCallback+0x38>)
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80005c6:	4610      	mov	r0, r2
 80005c8:	4619      	mov	r1, r3
 80005ca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80005ce:	461a      	mov	r2, r3
 80005d0:	f006 fed0 	bl	8007374 <memcpy>
	        send_to_queue = 1;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <HAL_ADC_ConvHalfCpltCallback+0x40>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40012000 	.word	0x40012000
 80005e8:	2000107c 	.word	0x2000107c
 80005ec:	2000007c 	.word	0x2000007c
 80005f0:	2000207c 	.word	0x2000207c

080005f4 <HAL_ADC_ConvCpltCallback>:

	// Called when the **second half** is filled (full transfer complete)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <HAL_ADC_ConvCpltCallback+0x34>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d10c      	bne.n	8000620 <HAL_ADC_ConvCpltCallback+0x2c>
	        // Process the second half of the buffer
	    	memcpy(tx_buf, &adc_buf[ADC_BUF_LEN / 2], (ADC_BUF_LEN/2) * sizeof(uint16_t));
 8000606:	4a09      	ldr	r2, [pc, #36]	@ (800062c <HAL_ADC_ConvCpltCallback+0x38>)
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <HAL_ADC_ConvCpltCallback+0x3c>)
 800060a:	4610      	mov	r0, r2
 800060c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000614:	4619      	mov	r1, r3
 8000616:	f006 fead 	bl	8007374 <memcpy>
	    	send_to_queue = 1;
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_ADC_ConvCpltCallback+0x40>)
 800061c:	2201      	movs	r2, #1
 800061e:	701a      	strb	r2, [r3, #0]
	    }
	}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40012000 	.word	0x40012000
 800062c:	2000107c 	.word	0x2000107c
 8000630:	2000007c 	.word	0x2000007c
 8000634:	2000207c 	.word	0x2000207c

08000638 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 8000638:	b40f      	push	{r0, r1, r2, r3}
 800063a:	b580      	push	{r7, lr}
 800063c:	b084      	sub	sp, #16
 800063e:	af00      	add	r7, sp, #0

	osStatus res = osMutexWait(USART_lockHandle, 1000);
 8000640:	4b16      	ldr	r3, [pc, #88]	@ (800069c <myprintf+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fc36 	bl	8003eba <osMutexAcquire>
 800064e:	60f8      	str	r0, [r7, #12]

	if(res == osOK){
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	2b00      	cmp	r3, #0
 8000654:	d116      	bne.n	8000684 <myprintf+0x4c>

  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	607b      	str	r3, [r7, #4]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	69ba      	ldr	r2, [r7, #24]
 8000660:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000664:	480e      	ldr	r0, [pc, #56]	@ (80006a0 <myprintf+0x68>)
 8000666:	f006 fe43 	bl	80072f0 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 800066a:	480d      	ldr	r0, [pc, #52]	@ (80006a0 <myprintf+0x68>)
 800066c:	f7ff fdd0 	bl	8000210 <strlen>
 8000670:	4603      	mov	r3, r0
 8000672:	60bb      	str	r3, [r7, #8]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000674:	68bb      	ldr	r3, [r7, #8]
 8000676:	b29a      	uxth	r2, r3
 8000678:	f04f 33ff 	mov.w	r3, #4294967295
 800067c:	4908      	ldr	r1, [pc, #32]	@ (80006a0 <myprintf+0x68>)
 800067e:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <myprintf+0x6c>)
 8000680:	f002 fe9e 	bl	80033c0 <HAL_UART_Transmit>

	}

	osMutexRelease(USART_lockHandle);
 8000684:	4b05      	ldr	r3, [pc, #20]	@ (800069c <myprintf+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4618      	mov	r0, r3
 800068a:	f003 fc61 	bl	8003f50 <osMutexRelease>

}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000698:	b004      	add	sp, #16
 800069a:	4770      	bx	lr
 800069c:	2000217c 	.word	0x2000217c
 80006a0:	20002180 	.word	0x20002180
 80006a4:	20002128 	.word	0x20002128

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ac:	f000 fbce 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b0:	f000 f842 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b4:	f000 f93c 	bl	8000930 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b8:	f000 f91a 	bl	80008f0 <MX_DMA_Init>
  MX_ADC1_Init();
 80006bc:	f000 f89c 	bl	80007f8 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006c0:	f000 f8ec 	bl	800089c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006c4:	f003 fa7c 	bl	8003bc0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of USART_lock */
  USART_lockHandle = osMutexNew(&USART_lock_attributes);
 80006c8:	4811      	ldr	r0, [pc, #68]	@ (8000710 <main+0x68>)
 80006ca:	f003 fb70 	bl	8003dae <osMutexNew>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4a10      	ldr	r2, [pc, #64]	@ (8000714 <main+0x6c>)
 80006d2:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ADC_Out */
  ADC_OutHandle = osMessageQueueNew (1024, sizeof(uint16_t), &ADC_Out_attributes);
 80006d4:	4a10      	ldr	r2, [pc, #64]	@ (8000718 <main+0x70>)
 80006d6:	2102      	movs	r1, #2
 80006d8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80006dc:	f003 fc75 	bl	8003fca <osMessageQueueNew>
 80006e0:	4603      	mov	r3, r0
 80006e2:	4a0e      	ldr	r2, [pc, #56]	@ (800071c <main+0x74>)
 80006e4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PCM1802_ADC */
  PCM1802_ADCHandle = osThreadNew(Start_ADC, NULL, &PCM1802_ADC_attributes);
 80006e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000720 <main+0x78>)
 80006e8:	2100      	movs	r1, #0
 80006ea:	480e      	ldr	r0, [pc, #56]	@ (8000724 <main+0x7c>)
 80006ec:	f003 fab2 	bl	8003c54 <osThreadNew>
 80006f0:	4603      	mov	r3, r0
 80006f2:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <main+0x80>)
 80006f4:	6013      	str	r3, [r2, #0]

  /* creation of ProcessData */
  ProcessDataHandle = osThreadNew(Start_Process_Data, NULL, &ProcessData_attributes);
 80006f6:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <main+0x84>)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480d      	ldr	r0, [pc, #52]	@ (8000730 <main+0x88>)
 80006fc:	f003 faaa 	bl	8003c54 <osThreadNew>
 8000700:	4603      	mov	r3, r0
 8000702:	4a0c      	ldr	r2, [pc, #48]	@ (8000734 <main+0x8c>)
 8000704:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000706:	f003 fa7f 	bl	8003c08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <main+0x62>
 800070e:	bf00      	nop
 8000710:	08007ce4 	.word	0x08007ce4
 8000714:	2000217c 	.word	0x2000217c
 8000718:	08007ccc 	.word	0x08007ccc
 800071c:	20002178 	.word	0x20002178
 8000720:	08007c84 	.word	0x08007c84
 8000724:	08000965 	.word	0x08000965
 8000728:	20002170 	.word	0x20002170
 800072c:	08007ca8 	.word	0x08007ca8
 8000730:	080009d1 	.word	0x080009d1
 8000734:	20002174 	.word	0x20002174

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	@ 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fde0 	bl	800730c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemClock_Config+0xb8>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a22      	ldr	r2, [pc, #136]	@ (80007f0 <SystemClock_Config+0xb8>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <SystemClock_Config+0xb8>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b1d      	ldr	r3, [pc, #116]	@ (80007f4 <SystemClock_Config+0xbc>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000784:	4a1b      	ldr	r2, [pc, #108]	@ (80007f4 <SystemClock_Config+0xbc>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b19      	ldr	r3, [pc, #100]	@ (80007f4 <SystemClock_Config+0xbc>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	2301      	movs	r3, #1
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a0:	2310      	movs	r3, #16
 80007a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a4:	2300      	movs	r3, #0
 80007a6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 f87d 	bl	80028ac <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80007b8:	f000 f938 	bl	8000a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fd72 	bl	80022c0 <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80007e2:	f000 f923 	bl	8000a2c <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3750      	adds	r7, #80	@ 0x50
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fe:	463b      	mov	r3, r7
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800080a:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <MX_ADC1_Init+0x98>)
 800080c:	4a21      	ldr	r2, [pc, #132]	@ (8000894 <MX_ADC1_Init+0x9c>)
 800080e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000810:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000816:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_ADC1_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000822:	4b1b      	ldr	r3, [pc, #108]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000824:	2201      	movs	r2, #1
 8000826:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000828:	4b19      	ldr	r3, [pc, #100]	@ (8000890 <MX_ADC1_Init+0x98>)
 800082a:	2200      	movs	r2, #0
 800082c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000830:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000836:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000838:	4a17      	ldr	r2, [pc, #92]	@ (8000898 <MX_ADC1_Init+0xa0>)
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000844:	2201      	movs	r2, #1
 8000846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_ADC1_Init+0x98>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000852:	2201      	movs	r2, #1
 8000854:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000858:	f000 fb3a 	bl	8000ed0 <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 f8e3 	bl	8000a2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_ADC1_Init+0x98>)
 8000878:	f000 fc8c 	bl	8001194 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000882:	f000 f8d3 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20002080 	.word	0x20002080
 8000894:	40012000 	.word	0x40012000
 8000898:	0f000001 	.word	0x0f000001

0800089c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a0:	4b11      	ldr	r3, [pc, #68]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a2:	4a12      	ldr	r2, [pc, #72]	@ (80008ec <MX_USART2_UART_Init+0x50>)
 80008a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80008a6:	4b10      	ldr	r3, [pc, #64]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008a8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80008ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c0:	4b09      	ldr	r3, [pc, #36]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c2:	220c      	movs	r2, #12
 80008c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c6:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	@ (80008e8 <MX_USART2_UART_Init+0x4c>)
 80008d4:	f002 fd24 	bl	8003320 <HAL_UART_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008de:	f000 f8a5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20002128 	.word	0x20002128
 80008ec:	40004400 	.word	0x40004400

080008f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_DMA_Init+0x3c>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <MX_DMA_Init+0x3c>)
 8000900:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000904:	6313      	str	r3, [r2, #48]	@ 0x30
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_DMA_Init+0x3c>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2105      	movs	r1, #5
 8000916:	2038      	movs	r0, #56	@ 0x38
 8000918:	f000 ffa4 	bl	8001864 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800091c:	2038      	movs	r0, #56	@ 0x38
 800091e:	f000 ffbd 	bl	800189c <HAL_NVIC_EnableIRQ>

}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800

08000930 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <MX_GPIO_Init+0x30>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <MX_GPIO_Init+0x30>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <MX_GPIO_Init+0x30>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <Start_ADC>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_ADC */
void Start_ADC(void *argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  osStatus_t status;
  uint8_t i;


  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 800096c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000970:	4911      	ldr	r1, [pc, #68]	@ (80009b8 <Start_ADC+0x54>)
 8000972:	4812      	ldr	r0, [pc, #72]	@ (80009bc <Start_ADC+0x58>)
 8000974:	f000 faf0 	bl	8000f58 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  for(;;)
  {

	//recieves data to process
	if(send_to_queue){
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <Start_ADC+0x5c>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d017      	beq.n	80009b0 <Start_ADC+0x4c>
	for(i = 0; i < TX_BUF_LEN; i++){
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]
	status = osMessageQueuePut(ADC_OutHandle, &tx_buf[i], 0, 0);
 8000984:	4b0f      	ldr	r3, [pc, #60]	@ (80009c4 <Start_ADC+0x60>)
 8000986:	6818      	ldr	r0, [r3, #0]
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <Start_ADC+0x64>)
 800098e:	1899      	adds	r1, r3, r2
 8000990:	2300      	movs	r3, #0
 8000992:	2200      	movs	r2, #0
 8000994:	f003 fb8c 	bl	80040b0 <osMessageQueuePut>
 8000998:	60b8      	str	r0, [r7, #8]
	if(status != osOK){
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <Start_ADC+0x44>
		//print error message
		myprintf("Errpr in OS Message : %d\n", status);
 80009a0:	68b9      	ldr	r1, [r7, #8]
 80009a2:	480a      	ldr	r0, [pc, #40]	@ (80009cc <Start_ADC+0x68>)
 80009a4:	f7ff fe48 	bl	8000638 <myprintf>
	for(i = 0; i < TX_BUF_LEN; i++){
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3301      	adds	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
	status = osMessageQueuePut(ADC_OutHandle, &tx_buf[i], 0, 0);
 80009ae:	e7e9      	b.n	8000984 <Start_ADC+0x20>
	}
		//complete tx buffer send
		send_to_queue = 0;
	}

    osDelay(10);
 80009b0:	200a      	movs	r0, #10
 80009b2:	f003 f9e1 	bl	8003d78 <osDelay>
	if(send_to_queue){
 80009b6:	e7df      	b.n	8000978 <Start_ADC+0x14>
 80009b8:	2000007c 	.word	0x2000007c
 80009bc:	20002080 	.word	0x20002080
 80009c0:	2000207c 	.word	0x2000207c
 80009c4:	20002178 	.word	0x20002178
 80009c8:	2000107c 	.word	0x2000107c
 80009cc:	08007c50 	.word	0x08007c50

080009d0 <Start_Process_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Process_Data */
void Start_Process_Data(void *argument)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	 uint8_t i;

  /* Infinite loop */
  for(;;)
  {
		for(i = 0; i < TX_BUF_LEN; i++){
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
		status = osMessageQueueGet(ADC_OutHandle, &rx_buf[i], NULL, 0);
 80009dc:	4b08      	ldr	r3, [pc, #32]	@ (8000a00 <Start_Process_Data+0x30>)
 80009de:	6818      	ldr	r0, [r3, #0]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	4a07      	ldr	r2, [pc, #28]	@ (8000a04 <Start_Process_Data+0x34>)
 80009e6:	1899      	adds	r1, r3, r2
 80009e8:	2300      	movs	r3, #0
 80009ea:	2200      	movs	r2, #0
 80009ec:	f003 fbc0 	bl	8004170 <osMessageQueueGet>
 80009f0:	60b8      	str	r0, [r7, #8]
		}




    osDelay(1);
 80009f2:	2001      	movs	r0, #1
 80009f4:	f003 f9c0 	bl	8003d78 <osDelay>
		for(i = 0; i < TX_BUF_LEN; i++){
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	3301      	adds	r3, #1
 80009fc:	73fb      	strb	r3, [r7, #15]
		status = osMessageQueueGet(ADC_OutHandle, &rx_buf[i], NULL, 0);
 80009fe:	e7ed      	b.n	80009dc <Start_Process_Data+0xc>
 8000a00:	20002178 	.word	0x20002178
 8000a04:	2000187c 	.word	0x2000187c

08000a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a04      	ldr	r2, [pc, #16]	@ (8000a28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d101      	bne.n	8000a1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1a:	f000 fa39 	bl	8000e90 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40010000 	.word	0x40010000

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <Error_Handler+0x8>

08000a38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a11      	ldr	r2, [pc, #68]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	210f      	movs	r1, #15
 8000a7a:	f06f 0001 	mvn.w	r0, #1
 8000a7e:	f000 fef1 	bl	8001864 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a34      	ldr	r2, [pc, #208]	@ (8000b80 <HAL_ADC_MspInit+0xf0>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d162      	bne.n	8000b78 <HAL_ADC_MspInit+0xe8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	4a32      	ldr	r2, [pc, #200]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac2:	4b30      	ldr	r3, [pc, #192]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b2c      	ldr	r3, [pc, #176]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b29      	ldr	r3, [pc, #164]	@ (8000b84 <HAL_ADC_MspInit+0xf4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aea:	2301      	movs	r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aee:	2303      	movs	r3, #3
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4822      	ldr	r0, [pc, #136]	@ (8000b88 <HAL_ADC_MspInit+0xf8>)
 8000afe:	f001 fa4b 	bl	8001f98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b02:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b04:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <HAL_ADC_MspInit+0x100>)
 8000b06:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b08:	4b20      	ldr	r3, [pc, #128]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b20:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b24:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b28:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b30:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b38:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b3c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b40:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b42:	4b12      	ldr	r3, [pc, #72]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b44:	2204      	movs	r2, #4
 8000b46:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b48:	4b10      	ldr	r3, [pc, #64]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b4a:	2203      	movs	r2, #3
 8000b4c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC8;
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b56:	4b0d      	ldr	r3, [pc, #52]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b5c:	480b      	ldr	r0, [pc, #44]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b5e:	f000 feab 	bl	80018b8 <HAL_DMA_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <HAL_ADC_MspInit+0xdc>
    {
      Error_Handler();
 8000b68:	f7ff ff60 	bl	8000a2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b72:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <HAL_ADC_MspInit+0xfc>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	@ 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40012000 	.word	0x40012000
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	200020c8 	.word	0x200020c8
 8000b90:	40026410 	.word	0x40026410

08000b94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a19      	ldr	r2, [pc, #100]	@ (8000c18 <HAL_UART_MspInit+0x84>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d12b      	bne.n	8000c0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	4a17      	ldr	r2, [pc, #92]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc6:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a10      	ldr	r2, [pc, #64]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <HAL_UART_MspInit+0x88>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bee:	230c      	movs	r3, #12
 8000bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfe:	2307      	movs	r3, #7
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <HAL_UART_MspInit+0x8c>)
 8000c0a:	f001 f9c5 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c0e:	bf00      	nop
 8000c10:	3728      	adds	r7, #40	@ 0x28
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40020000 	.word	0x40020000

08000c24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08c      	sub	sp, #48	@ 0x30
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c30:	2300      	movs	r3, #0
 8000c32:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c34:	2300      	movs	r3, #0
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <HAL_InitTick+0xd0>)
 8000c3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <HAL_InitTick+0xd0>)
 8000c3e:	f043 0301 	orr.w	r3, r3, #1
 8000c42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <HAL_InitTick+0xd0>)
 8000c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c50:	f107 020c 	add.w	r2, r7, #12
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4611      	mov	r1, r2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fc4a 	bl	80024f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c60:	f001 fc34 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8000c64:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c68:	4a23      	ldr	r2, [pc, #140]	@ (8000cf8 <HAL_InitTick+0xd4>)
 8000c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6e:	0c9b      	lsrs	r3, r3, #18
 8000c70:	3b01      	subs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c74:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c76:	4a22      	ldr	r2, [pc, #136]	@ (8000d00 <HAL_InitTick+0xdc>)
 8000c78:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c7c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c80:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000c82:	4a1e      	ldr	r2, [pc, #120]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c86:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000c88:	4b1c      	ldr	r3, [pc, #112]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b19      	ldr	r3, [pc, #100]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c9a:	4818      	ldr	r0, [pc, #96]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000c9c:	f002 f8a4 	bl	8002de8 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000ca6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d11b      	bne.n	8000ce6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cae:	4813      	ldr	r0, [pc, #76]	@ (8000cfc <HAL_InitTick+0xd8>)
 8000cb0:	f002 f8f4 	bl	8002e9c <HAL_TIM_Base_Start_IT>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d111      	bne.n	8000ce6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cc2:	2019      	movs	r0, #25
 8000cc4:	f000 fdea 	bl	800189c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b0f      	cmp	r3, #15
 8000ccc:	d808      	bhi.n	8000ce0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	6879      	ldr	r1, [r7, #4]
 8000cd2:	2019      	movs	r0, #25
 8000cd4:	f000 fdc6 	bl	8001864 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cd8:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <HAL_InitTick+0xe0>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e002      	b.n	8000ce6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000ce6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3730      	adds	r7, #48	@ 0x30
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	20002280 	.word	0x20002280
 8000d00:	40010000 	.word	0x40010000
 8000d04:	20000004 	.word	0x20000004

08000d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <NMI_Handler+0x4>

08000d10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <MemManage_Handler+0x4>

08000d20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <BusFault_Handler+0x4>

08000d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <UsageFault_Handler+0x4>

08000d30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
	...

08000d40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d44:	4802      	ldr	r0, [pc, #8]	@ (8000d50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d46:	f002 f919 	bl	8002f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20002280 	.word	0x20002280

08000d54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d58:	4802      	ldr	r0, [pc, #8]	@ (8000d64 <DMA2_Stream0_IRQHandler+0x10>)
 8000d5a:	f000 feb3 	bl	8001ac4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200020c8 	.word	0x200020c8

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f006 fac0 	bl	800731c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20020000 	.word	0x20020000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	200022c8 	.word	0x200022c8
 8000dd0:	20006d68 	.word	0x20006d68

08000dd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e26:	f006 fa7f 	bl	8007328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e2a:	f7ff fc3d 	bl	80006a8 <main>
  bx  lr    
 8000e2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e38:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000e3c:	08007d58 	.word	0x08007d58
  ldr r2, =_sbss
 8000e40:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000e44:	20006d68 	.word	0x20006d68

08000e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0d      	ldr	r2, [pc, #52]	@ (8000e8c <HAL_Init+0x40>)
 8000e56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e8c <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <HAL_Init+0x40>)
 8000e62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e68:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a07      	ldr	r2, [pc, #28]	@ (8000e8c <HAL_Init+0x40>)
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e74:	2003      	movs	r0, #3
 8000e76:	f000 fcea 	bl	800184e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7a:	200f      	movs	r0, #15
 8000e7c:	f7ff fed2 	bl	8000c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e80:	f7ff fdda 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40023c00 	.word	0x40023c00

08000e90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x20>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a04      	ldr	r2, [pc, #16]	@ (8000eb4 <HAL_IncTick+0x24>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop
 8000eb0:	20000008 	.word	0x20000008
 8000eb4:	200022cc 	.word	0x200022cc

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <HAL_GetTick+0x14>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	200022cc 	.word	0x200022cc

08000ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e033      	b.n	8000f4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d109      	bne.n	8000f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff fdce 	bl	8000a90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f06:	f003 0310 	and.w	r3, r3, #16
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d118      	bne.n	8000f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f12:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f16:	f023 0302 	bic.w	r3, r3, #2
 8000f1a:	f043 0202 	orr.w	r2, r3, #2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f000 fa68 	bl	80013f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f023 0303 	bic.w	r3, r3, #3
 8000f36:	f043 0201 	orr.w	r2, r3, #1
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f3e:	e001      	b.n	8000f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
	...

08000f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d101      	bne.n	8000f7a <HAL_ADC_Start_DMA+0x22>
 8000f76:	2302      	movs	r3, #2
 8000f78:	e0eb      	b.n	8001152 <HAL_ADC_Start_DMA+0x1fa>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	d018      	beq.n	8000fc2 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	689a      	ldr	r2, [r3, #8]
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f042 0201 	orr.w	r2, r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa0:	4b6e      	ldr	r3, [pc, #440]	@ (800115c <HAL_ADC_Start_DMA+0x204>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a6e      	ldr	r2, [pc, #440]	@ (8001160 <HAL_ADC_Start_DMA+0x208>)
 8000fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8000faa:	0c9a      	lsrs	r2, r3, #18
 8000fac:	4613      	mov	r3, r2
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fb4:	e002      	b.n	8000fbc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	689b      	ldr	r3, [r3, #8]
 8000fc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fd0:	d107      	bne.n	8000fe2 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000fe0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	f003 0301 	and.w	r3, r3, #1
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	f040 80a3 	bne.w	8001138 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ffa:	f023 0301 	bic.w	r3, r3, #1
 8000ffe:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001010:	2b00      	cmp	r3, #0
 8001012:	d007      	beq.n	8001024 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800101c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800102c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001030:	d106      	bne.n	8001040 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001036:	f023 0206 	bic.w	r2, r3, #6
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	645a      	str	r2, [r3, #68]	@ 0x44
 800103e:	e002      	b.n	8001046 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	2200      	movs	r2, #0
 800104a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800104e:	4b45      	ldr	r3, [pc, #276]	@ (8001164 <HAL_ADC_Start_DMA+0x20c>)
 8001050:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001056:	4a44      	ldr	r2, [pc, #272]	@ (8001168 <HAL_ADC_Start_DMA+0x210>)
 8001058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800105e:	4a43      	ldr	r2, [pc, #268]	@ (800116c <HAL_ADC_Start_DMA+0x214>)
 8001060:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001066:	4a42      	ldr	r2, [pc, #264]	@ (8001170 <HAL_ADC_Start_DMA+0x218>)
 8001068:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001072:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	685a      	ldr	r2, [r3, #4]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001082:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001092:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	334c      	adds	r3, #76	@ 0x4c
 800109e:	4619      	mov	r1, r3
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f000 fcb6 	bl	8001a14 <HAL_DMA_Start_IT>
 80010a8:	4603      	mov	r3, r0
 80010aa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 031f 	and.w	r3, r3, #31
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d12a      	bne.n	800110e <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001174 <HAL_ADC_Start_DMA+0x21c>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d015      	beq.n	80010ee <HAL_ADC_Start_DMA+0x196>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a2c      	ldr	r2, [pc, #176]	@ (8001178 <HAL_ADC_Start_DMA+0x220>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d105      	bne.n	80010d8 <HAL_ADC_Start_DMA+0x180>
 80010cc:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <HAL_ADC_Start_DMA+0x20c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 031f 	and.w	r3, r3, #31
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00a      	beq.n	80010ee <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a27      	ldr	r2, [pc, #156]	@ (800117c <HAL_ADC_Start_DMA+0x224>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d136      	bne.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
 80010e2:	4b20      	ldr	r3, [pc, #128]	@ (8001164 <HAL_ADC_Start_DMA+0x20c>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d130      	bne.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d129      	bne.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	e020      	b.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a18      	ldr	r2, [pc, #96]	@ (8001174 <HAL_ADC_Start_DMA+0x21c>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d11b      	bne.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d114      	bne.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	e00b      	b.n	8001150 <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	f043 0210 	orr.w	r2, r3, #16
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8001150:	7ffb      	ldrb	r3, [r7, #31]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000
 8001160:	431bde83 	.word	0x431bde83
 8001164:	40012300 	.word	0x40012300
 8001168:	080015f1 	.word	0x080015f1
 800116c:	080016ab 	.word	0x080016ab
 8001170:	080016c7 	.word	0x080016c7
 8001174:	40012000 	.word	0x40012000
 8001178:	40012100 	.word	0x40012100
 800117c:	40012200 	.word	0x40012200

08001180 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x1c>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e113      	b.n	80013d8 <HAL_ADC_ConfigChannel+0x244>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b09      	cmp	r3, #9
 80011be:	d925      	bls.n	800120c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	68d9      	ldr	r1, [r3, #12]
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	4613      	mov	r3, r2
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	4413      	add	r3, r2
 80011d4:	3b1e      	subs	r3, #30
 80011d6:	2207      	movs	r2, #7
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43da      	mvns	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	400a      	ands	r2, r1
 80011e4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	68d9      	ldr	r1, [r3, #12]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	4603      	mov	r3, r0
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	4403      	add	r3, r0
 80011fe:	3b1e      	subs	r3, #30
 8001200:	409a      	lsls	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	430a      	orrs	r2, r1
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	e022      	b.n	8001252 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6919      	ldr	r1, [r3, #16]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	2207      	movs	r2, #7
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43da      	mvns	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	400a      	ands	r2, r1
 800122e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6919      	ldr	r1, [r3, #16]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	4603      	mov	r3, r0
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4403      	add	r3, r0
 8001248:	409a      	lsls	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b06      	cmp	r3, #6
 8001258:	d824      	bhi.n	80012a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	4613      	mov	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	4413      	add	r3, r2
 800126a:	3b05      	subs	r3, #5
 800126c:	221f      	movs	r2, #31
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b29b      	uxth	r3, r3
 8001288:	4618      	mov	r0, r3
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	3b05      	subs	r3, #5
 8001296:	fa00 f203 	lsl.w	r2, r0, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80012a2:	e04c      	b.n	800133e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b0c      	cmp	r3, #12
 80012aa:	d824      	bhi.n	80012f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	4413      	add	r3, r2
 80012bc:	3b23      	subs	r3, #35	@ 0x23
 80012be:	221f      	movs	r2, #31
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43da      	mvns	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	400a      	ands	r2, r1
 80012cc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	3b23      	subs	r3, #35	@ 0x23
 80012e8:	fa00 f203 	lsl.w	r2, r0, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	430a      	orrs	r2, r1
 80012f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80012f4:	e023      	b.n	800133e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	4613      	mov	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	4413      	add	r3, r2
 8001306:	3b41      	subs	r3, #65	@ 0x41
 8001308:	221f      	movs	r2, #31
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43da      	mvns	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	400a      	ands	r2, r1
 8001316:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	4618      	mov	r0, r3
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b41      	subs	r3, #65	@ 0x41
 8001332:	fa00 f203 	lsl.w	r2, r0, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	430a      	orrs	r2, r1
 800133c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <HAL_ADC_ConfigChannel+0x250>)
 8001340:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <HAL_ADC_ConfigChannel+0x254>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d10f      	bne.n	800136c <HAL_ADC_ConfigChannel+0x1d8>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b12      	cmp	r3, #18
 8001352:	d10b      	bne.n	800136c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	@ (80013e8 <HAL_ADC_ConfigChannel+0x254>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d12b      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x23a>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ec <HAL_ADC_ConfigChannel+0x258>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_ADC_ConfigChannel+0x1f4>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b11      	cmp	r3, #17
 8001386:	d122      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a11      	ldr	r2, [pc, #68]	@ (80013ec <HAL_ADC_ConfigChannel+0x258>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d111      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013aa:	4b11      	ldr	r3, [pc, #68]	@ (80013f0 <HAL_ADC_ConfigChannel+0x25c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a11      	ldr	r2, [pc, #68]	@ (80013f4 <HAL_ADC_ConfigChannel+0x260>)
 80013b0:	fba2 2303 	umull	r2, r3, r2, r3
 80013b4:	0c9a      	lsrs	r2, r3, #18
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80013d6:	2300      	movs	r3, #0
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40012300 	.word	0x40012300
 80013e8:	40012000 	.word	0x40012000
 80013ec:	10000012 	.word	0x10000012
 80013f0:	20000000 	.word	0x20000000
 80013f4:	431bde83 	.word	0x431bde83

080013f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001400:	4b79      	ldr	r3, [pc, #484]	@ (80015e8 <ADC_Init+0x1f0>)
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	685a      	ldr	r2, [r3, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	431a      	orrs	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800142c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	691b      	ldr	r3, [r3, #16]
 8001438:	021a      	lsls	r2, r3, #8
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001450:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6859      	ldr	r1, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	430a      	orrs	r2, r1
 8001462:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	689a      	ldr	r2, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001472:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6899      	ldr	r1, [r3, #8]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68da      	ldr	r2, [r3, #12]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	430a      	orrs	r2, r1
 8001484:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148a:	4a58      	ldr	r2, [pc, #352]	@ (80015ec <ADC_Init+0x1f4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d022      	beq.n	80014d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800149e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6899      	ldr	r1, [r3, #8]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	6899      	ldr	r1, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	e00f      	b.n	80014f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80014f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0202 	bic.w	r2, r2, #2
 8001504:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	6899      	ldr	r1, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e1b      	ldrb	r3, [r3, #24]
 8001510:	005a      	lsls	r2, r3, #1
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d01b      	beq.n	800155c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001532:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001542:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6859      	ldr	r1, [r3, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154e:	3b01      	subs	r3, #1
 8001550:	035a      	lsls	r2, r3, #13
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	e007      	b.n	800156c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800156a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	3b01      	subs	r3, #1
 8001588:	051a      	lsls	r2, r3, #20
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689a      	ldr	r2, [r3, #8]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6899      	ldr	r1, [r3, #8]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015ae:	025a      	lsls	r2, r3, #9
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	430a      	orrs	r2, r1
 80015b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80015c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6899      	ldr	r1, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	029a      	lsls	r2, r3, #10
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	430a      	orrs	r2, r1
 80015da:	609a      	str	r2, [r3, #8]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40012300 	.word	0x40012300
 80015ec:	0f000001 	.word	0x0f000001

080015f0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001606:	2b00      	cmp	r3, #0
 8001608:	d13c      	bne.n	8001684 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d12b      	bne.n	800167c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001628:	2b00      	cmp	r3, #0
 800162a:	d127      	bne.n	800167c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001632:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001636:	2b00      	cmp	r3, #0
 8001638:	d006      	beq.n	8001648 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001644:	2b00      	cmp	r3, #0
 8001646:	d119      	bne.n	800167c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0220 	bic.w	r2, r2, #32
 8001656:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d105      	bne.n	800167c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	f043 0201 	orr.w	r2, r3, #1
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f7fe ffb9 	bl	80005f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001682:	e00e      	b.n	80016a2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fd75 	bl	8001180 <HAL_ADC_ErrorCallback>
}
 8001696:	e004      	b.n	80016a2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	4798      	blx	r3
}
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016b6:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f7fe ff79 	bl	80005b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b084      	sub	sp, #16
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016d2:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2240      	movs	r2, #64	@ 0x40
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016de:	f043 0204 	orr.w	r2, r3, #4
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f7ff fd4a 	bl	8001180 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016ec:	bf00      	nop
 80016ee:	3710      	adds	r7, #16
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	@ (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	@ (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	2b00      	cmp	r3, #0
 8001768:	db0b      	blt.n	8001782 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800176a:	79fb      	ldrb	r3, [r7, #7]
 800176c:	f003 021f 	and.w	r2, r3, #31
 8001770:	4907      	ldr	r1, [pc, #28]	@ (8001790 <__NVIC_EnableIRQ+0x38>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	095b      	lsrs	r3, r3, #5
 8001778:	2001      	movs	r0, #1
 800177a:	fa00 f202 	lsl.w	r2, r0, r2
 800177e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100

08001794 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	6039      	str	r1, [r7, #0]
 800179e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	db0a      	blt.n	80017be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	490c      	ldr	r1, [pc, #48]	@ (80017e0 <__NVIC_SetPriority+0x4c>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	0112      	lsls	r2, r2, #4
 80017b4:	b2d2      	uxtb	r2, r2
 80017b6:	440b      	add	r3, r1
 80017b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017bc:	e00a      	b.n	80017d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4908      	ldr	r1, [pc, #32]	@ (80017e4 <__NVIC_SetPriority+0x50>)
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	3b04      	subs	r3, #4
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	440b      	add	r3, r1
 80017d2:	761a      	strb	r2, [r3, #24]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	e000e100 	.word	0xe000e100
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b089      	sub	sp, #36	@ 0x24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2b04      	cmp	r3, #4
 8001804:	bf28      	it	cs
 8001806:	2304      	movcs	r3, #4
 8001808:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3304      	adds	r3, #4
 800180e:	2b06      	cmp	r3, #6
 8001810:	d902      	bls.n	8001818 <NVIC_EncodePriority+0x30>
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	3b03      	subs	r3, #3
 8001816:	e000      	b.n	800181a <NVIC_EncodePriority+0x32>
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	401a      	ands	r2, r3
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001830:	f04f 31ff 	mov.w	r1, #4294967295
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	fa01 f303 	lsl.w	r3, r1, r3
 800183a:	43d9      	mvns	r1, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001840:	4313      	orrs	r3, r2
         );
}
 8001842:	4618      	mov	r0, r3
 8001844:	3724      	adds	r7, #36	@ 0x24
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b082      	sub	sp, #8
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff ff4c 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
 8001870:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001876:	f7ff ff61 	bl	800173c <__NVIC_GetPriorityGrouping>
 800187a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	68b9      	ldr	r1, [r7, #8]
 8001880:	6978      	ldr	r0, [r7, #20]
 8001882:	f7ff ffb1 	bl	80017e8 <NVIC_EncodePriority>
 8001886:	4602      	mov	r2, r0
 8001888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff80 	bl	8001794 <__NVIC_SetPriority>
}
 8001894:	bf00      	nop
 8001896:	3718      	adds	r7, #24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff ff54 	bl	8001758 <__NVIC_EnableIRQ>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018c4:	f7ff faf8 	bl	8000eb8 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e099      	b.n	8001a08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f022 0201 	bic.w	r2, r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018f4:	e00f      	b.n	8001916 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018f6:	f7ff fadf 	bl	8000eb8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b05      	cmp	r3, #5
 8001902:	d908      	bls.n	8001916 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2220      	movs	r2, #32
 8001908:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2203      	movs	r2, #3
 800190e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e078      	b.n	8001a08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1e8      	bne.n	80018f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	4b38      	ldr	r3, [pc, #224]	@ (8001a10 <HAL_DMA_Init+0x158>)
 8001930:	4013      	ands	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800195a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4313      	orrs	r3, r2
 8001966:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800196c:	2b04      	cmp	r3, #4
 800196e:	d107      	bne.n	8001980 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001978:	4313      	orrs	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4313      	orrs	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f023 0307 	bic.w	r3, r3, #7
 8001996:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d117      	bne.n	80019da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00e      	beq.n	80019da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 fa6f 	bl	8001ea0 <DMA_CheckFifoParam>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2240      	movs	r2, #64	@ 0x40
 80019cc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80019d6:	2301      	movs	r3, #1
 80019d8:	e016      	b.n	8001a08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	697a      	ldr	r2, [r7, #20]
 80019e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fa26 	bl	8001e34 <DMA_CalcBaseAndBitshift>
 80019e8:	4603      	mov	r3, r0
 80019ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	223f      	movs	r2, #63	@ 0x3f
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3718      	adds	r7, #24
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	f010803f 	.word	0xf010803f

08001a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
 8001a20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d101      	bne.n	8001a3a <HAL_DMA_Start_IT+0x26>
 8001a36:	2302      	movs	r3, #2
 8001a38:	e040      	b.n	8001abc <HAL_DMA_Start_IT+0xa8>
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d12f      	bne.n	8001aae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2202      	movs	r2, #2
 8001a52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f9b8 	bl	8001dd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6c:	223f      	movs	r2, #63	@ 0x3f
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f042 0216 	orr.w	r2, r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d007      	beq.n	8001a9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0208 	orr.w	r2, r2, #8
 8001a9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f042 0201 	orr.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	e005      	b.n	8001aba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3718      	adds	r7, #24
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8001d0c <HAL_DMA_IRQHandler+0x248>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a8e      	ldr	r2, [pc, #568]	@ (8001d10 <HAL_DMA_IRQHandler+0x24c>)
 8001ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ada:	0a9b      	lsrs	r3, r3, #10
 8001adc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aee:	2208      	movs	r2, #8
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f022 0204 	bic.w	r2, r2, #4
 8001b16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b1c:	2208      	movs	r2, #8
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b28:	f043 0201 	orr.w	r2, r3, #1
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	2201      	movs	r2, #1
 8001b36:	409a      	lsls	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d012      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d00b      	beq.n	8001b66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b52:	2201      	movs	r2, #1
 8001b54:	409a      	lsls	r2, r3
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b5e:	f043 0202 	orr.w	r2, r3, #2
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	4013      	ands	r3, r2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d00b      	beq.n	8001b9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b88:	2204      	movs	r2, #4
 8001b8a:	409a      	lsls	r2, r3
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b94:	f043 0204 	orr.w	r2, r3, #4
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba0:	2210      	movs	r2, #16
 8001ba2:	409a      	lsls	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d043      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d03c      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbe:	2210      	movs	r2, #16
 8001bc0:	409a      	lsls	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d018      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d108      	bne.n	8001bf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d024      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	4798      	blx	r3
 8001bf2:	e01f      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d01b      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	4798      	blx	r3
 8001c04:	e016      	b.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f022 0208 	bic.w	r2, r2, #8
 8001c22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	2220      	movs	r2, #32
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 808f 	beq.w	8001d64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8087 	beq.w	8001d64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	409a      	lsls	r2, r3
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d136      	bne.n	8001cdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0216 	bic.w	r2, r2, #22
 8001c7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d103      	bne.n	8001c9e <HAL_DMA_IRQHandler+0x1da>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d007      	beq.n	8001cae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0208 	bic.w	r2, r2, #8
 8001cac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb2:	223f      	movs	r2, #63	@ 0x3f
 8001cb4:	409a      	lsls	r2, r3
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d07e      	beq.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
        }
        return;
 8001cda:	e079      	b.n	8001dd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01d      	beq.n	8001d26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d10d      	bne.n	8001d14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d031      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
 8001d08:	e02c      	b.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
 8001d0a:	bf00      	nop
 8001d0c:	20000000 	.word	0x20000000
 8001d10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	4798      	blx	r3
 8001d24:	e01e      	b.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d10f      	bne.n	8001d54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0210 	bic.w	r2, r2, #16
 8001d42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d003      	beq.n	8001d64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d032      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d022      	beq.n	8001dbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2205      	movs	r2, #5
 8001d7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0201 	bic.w	r2, r2, #1
 8001d8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	3301      	adds	r3, #1
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d307      	bcc.n	8001dac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f2      	bne.n	8001d90 <HAL_DMA_IRQHandler+0x2cc>
 8001daa:	e000      	b.n	8001dae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001dac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d005      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	4798      	blx	r3
 8001dce:	e000      	b.n	8001dd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001dd0:	bf00      	nop
    }
  }
}
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001df4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b40      	cmp	r3, #64	@ 0x40
 8001e04:	d108      	bne.n	8001e18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e16:	e007      	b.n	8001e28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	60da      	str	r2, [r3, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	3714      	adds	r7, #20
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	3b10      	subs	r3, #16
 8001e44:	4a14      	ldr	r2, [pc, #80]	@ (8001e98 <DMA_CalcBaseAndBitshift+0x64>)
 8001e46:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4a:	091b      	lsrs	r3, r3, #4
 8001e4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e4e:	4a13      	ldr	r2, [pc, #76]	@ (8001e9c <DMA_CalcBaseAndBitshift+0x68>)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	d909      	bls.n	8001e76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e6a:	f023 0303 	bic.w	r3, r3, #3
 8001e6e:	1d1a      	adds	r2, r3, #4
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e74:	e007      	b.n	8001e86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001e7e:	f023 0303 	bic.w	r3, r3, #3
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	aaaaaaab 	.word	0xaaaaaaab
 8001e9c:	08007d0c 	.word	0x08007d0c

08001ea0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b085      	sub	sp, #20
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d11f      	bne.n	8001efa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d856      	bhi.n	8001f6e <DMA_CheckFifoParam+0xce>
 8001ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <DMA_CheckFifoParam+0x28>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ed9 	.word	0x08001ed9
 8001ecc:	08001eeb 	.word	0x08001eeb
 8001ed0:	08001ed9 	.word	0x08001ed9
 8001ed4:	08001f6f 	.word	0x08001f6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001edc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d046      	beq.n	8001f72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee8:	e043      	b.n	8001f72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001ef2:	d140      	bne.n	8001f76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ef8:	e03d      	b.n	8001f76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f02:	d121      	bne.n	8001f48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d837      	bhi.n	8001f7a <DMA_CheckFifoParam+0xda>
 8001f0a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f10 <DMA_CheckFifoParam+0x70>)
 8001f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f10:	08001f21 	.word	0x08001f21
 8001f14:	08001f27 	.word	0x08001f27
 8001f18:	08001f21 	.word	0x08001f21
 8001f1c:	08001f39 	.word	0x08001f39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
      break;
 8001f24:	e030      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d025      	beq.n	8001f7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f36:	e022      	b.n	8001f7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f40:	d11f      	bne.n	8001f82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f46:	e01c      	b.n	8001f82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	d903      	bls.n	8001f56 <DMA_CheckFifoParam+0xb6>
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	d003      	beq.n	8001f5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f54:	e018      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5a:	e015      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d00e      	beq.n	8001f86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f6c:	e00b      	b.n	8001f86 <DMA_CheckFifoParam+0xe6>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e00a      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e008      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;
 8001f76:	bf00      	nop
 8001f78:	e006      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
 8001f7c:	e004      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;
 8001f7e:	bf00      	nop
 8001f80:	e002      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f82:	bf00      	nop
 8001f84:	e000      	b.n	8001f88 <DMA_CheckFifoParam+0xe8>
      break;
 8001f86:	bf00      	nop
    }
  } 
  
  return status; 
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3714      	adds	r7, #20
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b089      	sub	sp, #36	@ 0x24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e165      	b.n	8002280 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	697a      	ldr	r2, [r7, #20]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	f040 8154 	bne.w	800227a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d005      	beq.n	8001fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b03      	cmp	r3, #3
 8002056:	d017      	beq.n	8002088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d123      	bne.n	80020dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	220f      	movs	r2, #15
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3208      	adds	r2, #8
 80020d6:	69b9      	ldr	r1, [r7, #24]
 80020d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	2203      	movs	r2, #3
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	4013      	ands	r3, r2
 80020f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002118:	2b00      	cmp	r3, #0
 800211a:	f000 80ae 	beq.w	800227a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	4b5d      	ldr	r3, [pc, #372]	@ (8002298 <HAL_GPIO_Init+0x300>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	4a5c      	ldr	r2, [pc, #368]	@ (8002298 <HAL_GPIO_Init+0x300>)
 8002128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800212c:	6453      	str	r3, [r2, #68]	@ 0x44
 800212e:	4b5a      	ldr	r3, [pc, #360]	@ (8002298 <HAL_GPIO_Init+0x300>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002132:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213a:	4a58      	ldr	r2, [pc, #352]	@ (800229c <HAL_GPIO_Init+0x304>)
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	089b      	lsrs	r3, r3, #2
 8002140:	3302      	adds	r3, #2
 8002142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	220f      	movs	r2, #15
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a4f      	ldr	r2, [pc, #316]	@ (80022a0 <HAL_GPIO_Init+0x308>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d025      	beq.n	80021b2 <HAL_GPIO_Init+0x21a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4e      	ldr	r2, [pc, #312]	@ (80022a4 <HAL_GPIO_Init+0x30c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d01f      	beq.n	80021ae <HAL_GPIO_Init+0x216>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4d      	ldr	r2, [pc, #308]	@ (80022a8 <HAL_GPIO_Init+0x310>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d019      	beq.n	80021aa <HAL_GPIO_Init+0x212>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4c      	ldr	r2, [pc, #304]	@ (80022ac <HAL_GPIO_Init+0x314>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d013      	beq.n	80021a6 <HAL_GPIO_Init+0x20e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4b      	ldr	r2, [pc, #300]	@ (80022b0 <HAL_GPIO_Init+0x318>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d00d      	beq.n	80021a2 <HAL_GPIO_Init+0x20a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4a      	ldr	r2, [pc, #296]	@ (80022b4 <HAL_GPIO_Init+0x31c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d007      	beq.n	800219e <HAL_GPIO_Init+0x206>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a49      	ldr	r2, [pc, #292]	@ (80022b8 <HAL_GPIO_Init+0x320>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <HAL_GPIO_Init+0x202>
 8002196:	2306      	movs	r3, #6
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 800219a:	2307      	movs	r3, #7
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x21c>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	@ (800229c <HAL_GPIO_Init+0x304>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b3a      	ldr	r3, [pc, #232]	@ (80022bc <HAL_GPIO_Init+0x324>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a31      	ldr	r2, [pc, #196]	@ (80022bc <HAL_GPIO_Init+0x324>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <HAL_GPIO_Init+0x324>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a26      	ldr	r2, [pc, #152]	@ (80022bc <HAL_GPIO_Init+0x324>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b25      	ldr	r3, [pc, #148]	@ (80022bc <HAL_GPIO_Init+0x324>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_GPIO_Init+0x324>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <HAL_GPIO_Init+0x324>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <HAL_GPIO_Init+0x324>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae96 	bls.w	8001fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	@ 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40013c00 	.word	0x40013c00

080022c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0cc      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b68      	ldr	r3, [pc, #416]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d90c      	bls.n	80022fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b65      	ldr	r3, [pc, #404]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ea:	4b63      	ldr	r3, [pc, #396]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d001      	beq.n	80022fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0b8      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d020      	beq.n	800234a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002314:	4b59      	ldr	r3, [pc, #356]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	4a58      	ldr	r2, [pc, #352]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800231e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232c:	4b53      	ldr	r3, [pc, #332]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4a52      	ldr	r2, [pc, #328]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002338:	4b50      	ldr	r3, [pc, #320]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	494d      	ldr	r1, [pc, #308]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	d044      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	2b01      	cmp	r3, #1
 800235c:	d107      	bne.n	800236e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235e:	4b47      	ldr	r3, [pc, #284]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d119      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e07f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800237a:	2b03      	cmp	r3, #3
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b3f      	ldr	r3, [pc, #252]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e06f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3b      	ldr	r3, [pc, #236]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e067      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b37      	ldr	r3, [pc, #220]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4934      	ldr	r1, [pc, #208]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fd82 	bl	8000eb8 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fd7e 	bl	8000eb8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e04f      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2b      	ldr	r3, [pc, #172]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b25      	ldr	r3, [pc, #148]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 030f 	and.w	r3, r3, #15
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d20c      	bcs.n	8002408 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b22      	ldr	r3, [pc, #136]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	b2d2      	uxtb	r2, r2
 80023f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b20      	ldr	r3, [pc, #128]	@ (8002478 <HAL_RCC_ClockConfig+0x1b8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e032      	b.n	800246e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4916      	ldr	r1, [pc, #88]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0308 	and.w	r3, r3, #8
 800242e:	2b00      	cmp	r3, #0
 8002430:	d009      	beq.n	8002446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002432:	4b12      	ldr	r3, [pc, #72]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	4313      	orrs	r3, r2
 8002444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002446:	f000 f887 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 800244a:	4602      	mov	r2, r0
 800244c:	4b0b      	ldr	r3, [pc, #44]	@ (800247c <HAL_RCC_ClockConfig+0x1bc>)
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 030f 	and.w	r3, r3, #15
 8002456:	490a      	ldr	r1, [pc, #40]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002458:	5ccb      	ldrb	r3, [r1, r3]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a09      	ldr	r2, [pc, #36]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002462:	4b09      	ldr	r3, [pc, #36]	@ (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fbdc 	bl	8000c24 <HAL_InitTick>

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40023c00 	.word	0x40023c00
 800247c:	40023800 	.word	0x40023800
 8002480:	08007cf4 	.word	0x08007cf4
 8002484:	20000000 	.word	0x20000000
 8002488:	20000004 	.word	0x20000004

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	@ (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	@ (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	@ (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08007d04 	.word	0x08007d04

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	@ (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08007d04 	.word	0x08007d04

080024f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	220f      	movs	r2, #15
 8002502:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002504:	4b12      	ldr	r3, [pc, #72]	@ (8002550 <HAL_RCC_GetClockConfig+0x5c>)
 8002506:	689b      	ldr	r3, [r3, #8]
 8002508:	f003 0203 	and.w	r2, r3, #3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002510:	4b0f      	ldr	r3, [pc, #60]	@ (8002550 <HAL_RCC_GetClockConfig+0x5c>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800251c:	4b0c      	ldr	r3, [pc, #48]	@ (8002550 <HAL_RCC_GetClockConfig+0x5c>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002528:	4b09      	ldr	r3, [pc, #36]	@ (8002550 <HAL_RCC_GetClockConfig+0x5c>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <HAL_RCC_GetClockConfig+0x60>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	601a      	str	r2, [r3, #0]
}
 8002542:	bf00      	nop
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40023c00 	.word	0x40023c00

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b0a6      	sub	sp, #152	@ 0x98
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8002578:	2300      	movs	r3, #0
 800257a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800257e:	4bc8      	ldr	r3, [pc, #800]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
 8002586:	2b0c      	cmp	r3, #12
 8002588:	f200 817e 	bhi.w	8002888 <HAL_RCC_GetSysClockFreq+0x330>
 800258c:	a201      	add	r2, pc, #4	@ (adr r2, 8002594 <HAL_RCC_GetSysClockFreq+0x3c>)
 800258e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002592:	bf00      	nop
 8002594:	080025c9 	.word	0x080025c9
 8002598:	08002889 	.word	0x08002889
 800259c:	08002889 	.word	0x08002889
 80025a0:	08002889 	.word	0x08002889
 80025a4:	080025d1 	.word	0x080025d1
 80025a8:	08002889 	.word	0x08002889
 80025ac:	08002889 	.word	0x08002889
 80025b0:	08002889 	.word	0x08002889
 80025b4:	080025d9 	.word	0x080025d9
 80025b8:	08002889 	.word	0x08002889
 80025bc:	08002889 	.word	0x08002889
 80025c0:	08002889 	.word	0x08002889
 80025c4:	08002743 	.word	0x08002743
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025c8:	4bb6      	ldr	r3, [pc, #728]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 80025ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025ce:	e15f      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025d0:	4bb5      	ldr	r3, [pc, #724]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x350>)
 80025d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80025d6:	e15b      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d8:	4bb1      	ldr	r3, [pc, #708]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e4:	4bae      	ldr	r3, [pc, #696]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d031      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025f0:	4bab      	ldr	r3, [pc, #684]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	099b      	lsrs	r3, r3, #6
 80025f6:	2200      	movs	r2, #0
 80025f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002602:	663b      	str	r3, [r7, #96]	@ 0x60
 8002604:	2300      	movs	r3, #0
 8002606:	667b      	str	r3, [r7, #100]	@ 0x64
 8002608:	4ba7      	ldr	r3, [pc, #668]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800260a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800260e:	462a      	mov	r2, r5
 8002610:	fb03 f202 	mul.w	r2, r3, r2
 8002614:	2300      	movs	r3, #0
 8002616:	4621      	mov	r1, r4
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	4413      	add	r3, r2
 800261e:	4aa2      	ldr	r2, [pc, #648]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002620:	4621      	mov	r1, r4
 8002622:	fba1 1202 	umull	r1, r2, r1, r2
 8002626:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002628:	460a      	mov	r2, r1
 800262a:	67ba      	str	r2, [r7, #120]	@ 0x78
 800262c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800262e:	4413      	add	r3, r2
 8002630:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002632:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002636:	2200      	movs	r2, #0
 8002638:	65bb      	str	r3, [r7, #88]	@ 0x58
 800263a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800263c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002640:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002644:	f7fd fe3c 	bl	80002c0 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4613      	mov	r3, r2
 800264e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002652:	e064      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002654:	4b92      	ldr	r3, [pc, #584]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	2200      	movs	r2, #0
 800265c:	653b      	str	r3, [r7, #80]	@ 0x50
 800265e:	657a      	str	r2, [r7, #84]	@ 0x54
 8002660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002668:	2300      	movs	r3, #0
 800266a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800266c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002670:	4622      	mov	r2, r4
 8002672:	462b      	mov	r3, r5
 8002674:	f04f 0000 	mov.w	r0, #0
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	0159      	lsls	r1, r3, #5
 800267e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002682:	0150      	lsls	r0, r2, #5
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4621      	mov	r1, r4
 800268a:	1a51      	subs	r1, r2, r1
 800268c:	6139      	str	r1, [r7, #16]
 800268e:	4629      	mov	r1, r5
 8002690:	eb63 0301 	sbc.w	r3, r3, r1
 8002694:	617b      	str	r3, [r7, #20]
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026a2:	4659      	mov	r1, fp
 80026a4:	018b      	lsls	r3, r1, #6
 80026a6:	4651      	mov	r1, sl
 80026a8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ac:	4651      	mov	r1, sl
 80026ae:	018a      	lsls	r2, r1, #6
 80026b0:	4651      	mov	r1, sl
 80026b2:	ebb2 0801 	subs.w	r8, r2, r1
 80026b6:	4659      	mov	r1, fp
 80026b8:	eb63 0901 	sbc.w	r9, r3, r1
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026d0:	4690      	mov	r8, r2
 80026d2:	4699      	mov	r9, r3
 80026d4:	4623      	mov	r3, r4
 80026d6:	eb18 0303 	adds.w	r3, r8, r3
 80026da:	60bb      	str	r3, [r7, #8]
 80026dc:	462b      	mov	r3, r5
 80026de:	eb49 0303 	adc.w	r3, r9, r3
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	f04f 0300 	mov.w	r3, #0
 80026ec:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026f0:	4629      	mov	r1, r5
 80026f2:	028b      	lsls	r3, r1, #10
 80026f4:	4621      	mov	r1, r4
 80026f6:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026fa:	4621      	mov	r1, r4
 80026fc:	028a      	lsls	r2, r1, #10
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002706:	2200      	movs	r2, #0
 8002708:	643b      	str	r3, [r7, #64]	@ 0x40
 800270a:	647a      	str	r2, [r7, #68]	@ 0x44
 800270c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002710:	f7fd fdd6 	bl	80002c0 <__aeabi_uldivmod>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4613      	mov	r3, r2
 800271a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800271e:	4b60      	ldr	r3, [pc, #384]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	f003 0303 	and.w	r3, r3, #3
 8002728:	3301      	adds	r3, #1
 800272a:	005b      	lsls	r3, r3, #1
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8002730:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002734:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002738:	fbb2 f3f3 	udiv	r3, r2, r3
 800273c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002740:	e0a6      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002742:	4b57      	ldr	r3, [pc, #348]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800274a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800274e:	4b54      	ldr	r3, [pc, #336]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d02a      	beq.n	80027b0 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275a:	4b51      	ldr	r3, [pc, #324]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	099b      	lsrs	r3, r3, #6
 8002760:	2200      	movs	r2, #0
 8002762:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002764:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002768:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800276c:	2100      	movs	r1, #0
 800276e:	4b4e      	ldr	r3, [pc, #312]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x350>)
 8002770:	fb03 f201 	mul.w	r2, r3, r1
 8002774:	2300      	movs	r3, #0
 8002776:	fb00 f303 	mul.w	r3, r0, r3
 800277a:	4413      	add	r3, r2
 800277c:	4a4a      	ldr	r2, [pc, #296]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0x350>)
 800277e:	fba0 1202 	umull	r1, r2, r0, r2
 8002782:	677a      	str	r2, [r7, #116]	@ 0x74
 8002784:	460a      	mov	r2, r1
 8002786:	673a      	str	r2, [r7, #112]	@ 0x70
 8002788:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800278a:	4413      	add	r3, r2
 800278c:	677b      	str	r3, [r7, #116]	@ 0x74
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002792:	2200      	movs	r2, #0
 8002794:	633b      	str	r3, [r7, #48]	@ 0x30
 8002796:	637a      	str	r2, [r7, #52]	@ 0x34
 8002798:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800279c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80027a0:	f7fd fd8e 	bl	80002c0 <__aeabi_uldivmod>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4613      	mov	r3, r2
 80027aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027ae:	e05b      	b.n	8002868 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027b0:	4b3b      	ldr	r3, [pc, #236]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	099b      	lsrs	r3, r3, #6
 80027b6:	2200      	movs	r2, #0
 80027b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	2300      	movs	r3, #0
 80027c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80027c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80027cc:	4642      	mov	r2, r8
 80027ce:	464b      	mov	r3, r9
 80027d0:	f04f 0000 	mov.w	r0, #0
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	0159      	lsls	r1, r3, #5
 80027da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027de:	0150      	lsls	r0, r2, #5
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4641      	mov	r1, r8
 80027e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80027ea:	4649      	mov	r1, r9
 80027ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80027f0:	f04f 0200 	mov.w	r2, #0
 80027f4:	f04f 0300 	mov.w	r3, #0
 80027f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80027fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002804:	ebb2 040a 	subs.w	r4, r2, sl
 8002808:	eb63 050b 	sbc.w	r5, r3, fp
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	00eb      	lsls	r3, r5, #3
 8002816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800281a:	00e2      	lsls	r2, r4, #3
 800281c:	4614      	mov	r4, r2
 800281e:	461d      	mov	r5, r3
 8002820:	4643      	mov	r3, r8
 8002822:	18e3      	adds	r3, r4, r3
 8002824:	603b      	str	r3, [r7, #0]
 8002826:	464b      	mov	r3, r9
 8002828:	eb45 0303 	adc.w	r3, r5, r3
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	f04f 0200 	mov.w	r2, #0
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800283a:	4629      	mov	r1, r5
 800283c:	028b      	lsls	r3, r1, #10
 800283e:	4621      	mov	r1, r4
 8002840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002844:	4621      	mov	r1, r4
 8002846:	028a      	lsls	r2, r1, #10
 8002848:	4610      	mov	r0, r2
 800284a:	4619      	mov	r1, r3
 800284c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002850:	2200      	movs	r2, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	61fa      	str	r2, [r7, #28]
 8002856:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800285a:	f7fd fd31 	bl	80002c0 <__aeabi_uldivmod>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4613      	mov	r3, r2
 8002864:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002868:	4b0d      	ldr	r3, [pc, #52]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x348>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	0f1b      	lsrs	r3, r3, #28
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8002876:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800287a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002886:	e003      	b.n	8002890 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002888:	4b06      	ldr	r3, [pc, #24]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0x34c>)
 800288a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800288e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002890:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002894:	4618      	mov	r0, r3
 8002896:	3798      	adds	r7, #152	@ 0x98
 8002898:	46bd      	mov	sp, r7
 800289a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800289e:	bf00      	nop
 80028a0:	40023800 	.word	0x40023800
 80028a4:	00f42400 	.word	0x00f42400
 80028a8:	017d7840 	.word	0x017d7840

080028ac <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e28d      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8083 	beq.w	80029d2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028cc:	4b94      	ldr	r3, [pc, #592]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d019      	beq.n	800290c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028d8:	4b91      	ldr	r3, [pc, #580]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
        || \
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d106      	bne.n	80028f2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028e4:	4b8e      	ldr	r3, [pc, #568]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028f0:	d00c      	beq.n	800290c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d112      	bne.n	8002924 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028fe:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800290a:	d10b      	bne.n	8002924 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800290c:	4b84      	ldr	r3, [pc, #528]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d05b      	beq.n	80029d0 <HAL_RCC_OscConfig+0x124>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d157      	bne.n	80029d0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e25a      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800292c:	d106      	bne.n	800293c <HAL_RCC_OscConfig+0x90>
 800292e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a7b      	ldr	r2, [pc, #492]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e01d      	b.n	8002978 <HAL_RCC_OscConfig+0xcc>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002944:	d10c      	bne.n	8002960 <HAL_RCC_OscConfig+0xb4>
 8002946:	4b76      	ldr	r3, [pc, #472]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	4b73      	ldr	r3, [pc, #460]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a72      	ldr	r2, [pc, #456]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	e00b      	b.n	8002978 <HAL_RCC_OscConfig+0xcc>
 8002960:	4b6f      	ldr	r3, [pc, #444]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a6e      	ldr	r2, [pc, #440]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800296a:	6013      	str	r3, [r2, #0]
 800296c:	4b6c      	ldr	r3, [pc, #432]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a6b      	ldr	r2, [pc, #428]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7fe fa9a 	bl	8000eb8 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7fe fa96 	bl	8000eb8 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	@ 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e21f      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299a:	4b61      	ldr	r3, [pc, #388]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0f0      	beq.n	8002988 <HAL_RCC_OscConfig+0xdc>
 80029a6:	e014      	b.n	80029d2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a8:	f7fe fa86 	bl	8000eb8 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b0:	f7fe fa82 	bl	8000eb8 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b64      	cmp	r3, #100	@ 0x64
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e20b      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c2:	4b57      	ldr	r3, [pc, #348]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x104>
 80029ce:	e000      	b.n	80029d2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d06f      	beq.n	8002abe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80029de:	4b50      	ldr	r3, [pc, #320]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d017      	beq.n	8002a1a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029ea:	4b4d      	ldr	r3, [pc, #308]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f003 030c 	and.w	r3, r3, #12
        || \
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d105      	bne.n	8002a02 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b47      	ldr	r3, [pc, #284]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a0a:	2b0c      	cmp	r3, #12
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b44      	ldr	r3, [pc, #272]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b41      	ldr	r3, [pc, #260]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x186>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1d3      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4937      	ldr	r1, [pc, #220]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b34      	ldr	r3, [pc, #208]	@ (8002b24 <HAL_RCC_OscConfig+0x278>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fa2f 	bl	8000eb8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fa2b 	bl	8000eb8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1b4      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2b      	ldr	r3, [pc, #172]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4925      	ldr	r1, [pc, #148]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b24      	ldr	r3, [pc, #144]	@ (8002b24 <HAL_RCC_OscConfig+0x278>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fa0e 	bl	8000eb8 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fa0a 	bl	8000eb8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e193      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_RCC_OscConfig+0x27c>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe f9ee 	bl	8000eb8 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fe f9ea 	bl	8000eb8 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e173      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x234>
 8002afe:	e01b      	b.n	8002b38 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b00:	4b09      	ldr	r3, [pc, #36]	@ (8002b28 <HAL_RCC_OscConfig+0x27c>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b06:	f7fe f9d7 	bl	8000eb8 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fe f9d3 	bl	8000eb8 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d907      	bls.n	8002b2c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e15c      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b8a      	ldr	r3, [pc, #552]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ea      	bne.n	8002b0e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8097 	beq.w	8002c74 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b83      	ldr	r3, [pc, #524]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b66:	4b7c      	ldr	r3, [pc, #496]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b79      	ldr	r3, [pc, #484]	@ (8002d5c <HAL_RCC_OscConfig+0x4b0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b76      	ldr	r3, [pc, #472]	@ (8002d5c <HAL_RCC_OscConfig+0x4b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a75      	ldr	r2, [pc, #468]	@ (8002d5c <HAL_RCC_OscConfig+0x4b0>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe f993 	bl	8000eb8 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fe f98f 	bl	8000eb8 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e118      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d5c <HAL_RCC_OscConfig+0x4b0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x31e>
 8002bbc:	4b66      	ldr	r3, [pc, #408]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc0:	4a65      	ldr	r2, [pc, #404]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x358>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x340>
 8002bd2:	4b61      	ldr	r3, [pc, #388]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bd6:	4a60      	ldr	r2, [pc, #384]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bde:	4b5e      	ldr	r3, [pc, #376]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002be2:	4a5d      	ldr	r2, [pc, #372]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x358>
 8002bec:	4b5a      	ldr	r3, [pc, #360]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a59      	ldr	r2, [pc, #356]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf8:	4b57      	ldr	r3, [pc, #348]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a56      	ldr	r2, [pc, #344]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe f954 	bl	8000eb8 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe f950 	bl	8000eb8 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0d7      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	4b4b      	ldr	r3, [pc, #300]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ee      	beq.n	8002c14 <HAL_RCC_OscConfig+0x368>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c38:	f7fe f93e 	bl	8000eb8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe f93a 	bl	8000eb8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0c1      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	4b40      	ldr	r3, [pc, #256]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ee      	bne.n	8002c40 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80ad 	beq.w	8002dd8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7e:	4b36      	ldr	r3, [pc, #216]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d060      	beq.n	8002d4c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d145      	bne.n	8002d1e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b33      	ldr	r3, [pc, #204]	@ (8002d60 <HAL_RCC_OscConfig+0x4b4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c98:	f7fe f90e 	bl	8000eb8 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe f90a 	bl	8000eb8 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e093      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b29      	ldr	r3, [pc, #164]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce8:	071b      	lsls	r3, r3, #28
 8002cea:	491b      	ldr	r1, [pc, #108]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8002d60 <HAL_RCC_OscConfig+0x4b4>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7fe f8df 	bl	8000eb8 <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe f8db 	bl	8000eb8 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e064      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d10:	4b11      	ldr	r3, [pc, #68]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x452>
 8002d1c:	e05c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <HAL_RCC_OscConfig+0x4b4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d24:	f7fe f8c8 	bl	8000eb8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe f8c4 	bl	8000eb8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e04d      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b06      	ldr	r3, [pc, #24]	@ (8002d58 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x480>
 8002d4a:	e045      	b.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d107      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e040      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40007000 	.word	0x40007000
 8002d60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d64:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <HAL_RCC_OscConfig+0x538>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d030      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d129      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d122      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d119      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d10f      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d107      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e000      	b.n	8002dda <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800

08002de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e041      	b.n	8002e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d106      	bne.n	8002e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f839 	bl	8002e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2202      	movs	r2, #2
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3304      	adds	r3, #4
 8002e24:	4619      	mov	r1, r3
 8002e26:	4610      	mov	r0, r2
 8002e28:	f000 f9c0 	bl	80031ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
	...

08002e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e04e      	b.n	8002f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a23      	ldr	r2, [pc, #140]	@ (8002f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d01d      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8002f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1b      	ldr	r2, [pc, #108]	@ (8002f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a19      	ldr	r2, [pc, #100]	@ (8002f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_Base_Start_IT+0x80>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d111      	bne.n	8002f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d010      	beq.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0201 	orr.w	r2, r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3e:	e007      	b.n	8002f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3714      	adds	r7, #20
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40010000 	.word	0x40010000
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800
 8002f6c:	40000c00 	.word	0x40000c00
 8002f70:	40010400 	.word	0x40010400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40001800 	.word	0x40001800

08002f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d020      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d01b      	beq.n	8002fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0202 	mvn.w	r2, #2
 8002fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d003      	beq.n	8002fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8d2 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8002fcc:	e005      	b.n	8002fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 f8c4 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f8d5 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d020      	beq.n	800302c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0204 	mvn.w	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8ac 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f89e 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8af 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0208 	mvn.w	r2, #8
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2204      	movs	r2, #4
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f886 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f878 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f889 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d020      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01b      	beq.n	80030c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f860 	bl	8003170 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f852 	bl	800315c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f863 	bl	8003184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0201 	mvn.w	r2, #1
 80030e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f7fd fc90 	bl	8000a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00c      	beq.n	800310c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f900 	bl	800330c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00c      	beq.n	8003130 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800311c:	2b00      	cmp	r3, #0
 800311e:	d007      	beq.n	8003130 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f834 	bl	8003198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00c      	beq.n	8003154 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0220 	mvn.w	r2, #32
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f8d2 	bl	80032f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a43      	ldr	r2, [pc, #268]	@ (80032cc <TIM_Base_SetConfig+0x120>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d013      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ca:	d00f      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a40      	ldr	r2, [pc, #256]	@ (80032d0 <TIM_Base_SetConfig+0x124>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00b      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a3f      	ldr	r2, [pc, #252]	@ (80032d4 <TIM_Base_SetConfig+0x128>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a3e      	ldr	r2, [pc, #248]	@ (80032d8 <TIM_Base_SetConfig+0x12c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d003      	beq.n	80031ec <TIM_Base_SetConfig+0x40>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a3d      	ldr	r2, [pc, #244]	@ (80032dc <TIM_Base_SetConfig+0x130>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d108      	bne.n	80031fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a32      	ldr	r2, [pc, #200]	@ (80032cc <TIM_Base_SetConfig+0x120>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320c:	d027      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a2f      	ldr	r2, [pc, #188]	@ (80032d0 <TIM_Base_SetConfig+0x124>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d023      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a2e      	ldr	r2, [pc, #184]	@ (80032d4 <TIM_Base_SetConfig+0x128>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d01f      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a2d      	ldr	r2, [pc, #180]	@ (80032d8 <TIM_Base_SetConfig+0x12c>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d01b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a2c      	ldr	r2, [pc, #176]	@ (80032dc <TIM_Base_SetConfig+0x130>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d017      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a2b      	ldr	r2, [pc, #172]	@ (80032e0 <TIM_Base_SetConfig+0x134>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d013      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a2a      	ldr	r2, [pc, #168]	@ (80032e4 <TIM_Base_SetConfig+0x138>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d00f      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a29      	ldr	r2, [pc, #164]	@ (80032e8 <TIM_Base_SetConfig+0x13c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00b      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a28      	ldr	r2, [pc, #160]	@ (80032ec <TIM_Base_SetConfig+0x140>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d007      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	4a27      	ldr	r2, [pc, #156]	@ (80032f0 <TIM_Base_SetConfig+0x144>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d003      	beq.n	800325e <TIM_Base_SetConfig+0xb2>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	4a26      	ldr	r2, [pc, #152]	@ (80032f4 <TIM_Base_SetConfig+0x148>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d108      	bne.n	8003270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	4313      	orrs	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a0e      	ldr	r2, [pc, #56]	@ (80032cc <TIM_Base_SetConfig+0x120>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <TIM_Base_SetConfig+0xf2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a10      	ldr	r2, [pc, #64]	@ (80032dc <TIM_Base_SetConfig+0x130>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d103      	bne.n	80032a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f043 0204 	orr.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	601a      	str	r2, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40010000 	.word	0x40010000
 80032d0:	40000400 	.word	0x40000400
 80032d4:	40000800 	.word	0x40000800
 80032d8:	40000c00 	.word	0x40000c00
 80032dc:	40010400 	.word	0x40010400
 80032e0:	40014000 	.word	0x40014000
 80032e4:	40014400 	.word	0x40014400
 80032e8:	40014800 	.word	0x40014800
 80032ec:	40001800 	.word	0x40001800
 80032f0:	40001c00 	.word	0x40001c00
 80032f4:	40002000 	.word	0x40002000

080032f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr

08003320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e042      	b.n	80033b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d106      	bne.n	800334c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7fd fc24 	bl	8000b94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2224      	movs	r2, #36	@ 0x24
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f973 	bl	8003650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	691a      	ldr	r2, [r3, #16]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695a      	ldr	r2, [r3, #20]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	@ 0x28
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d175      	bne.n	80034cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_UART_Transmit+0x2c>
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d101      	bne.n	80033f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e06e      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	@ 0x21
 80033fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033fe:	f7fd fd5b 	bl	8000eb8 <HAL_GetTick>
 8003402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	88fa      	ldrh	r2, [r7, #6]
 8003408:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	88fa      	ldrh	r2, [r7, #6]
 800340e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003418:	d108      	bne.n	800342c <HAL_UART_Transmit+0x6c>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d104      	bne.n	800342c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	61bb      	str	r3, [r7, #24]
 800342a:	e003      	b.n	8003434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003430:	2300      	movs	r3, #0
 8003432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003434:	e02e      	b.n	8003494 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2200      	movs	r2, #0
 800343e:	2180      	movs	r1, #128	@ 0x80
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f848 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e03a      	b.n	80034ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	881b      	ldrh	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800346c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	3302      	adds	r3, #2
 8003472:	61bb      	str	r3, [r7, #24]
 8003474:	e007      	b.n	8003486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	781a      	ldrb	r2, [r3, #0]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003480:	69fb      	ldr	r3, [r7, #28]
 8003482:	3301      	adds	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d1cb      	bne.n	8003436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2200      	movs	r2, #0
 80034a6:	2140      	movs	r1, #64	@ 0x40
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f814 	bl	80034d6 <UART_WaitOnFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d005      	beq.n	80034c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e006      	b.n	80034ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2220      	movs	r2, #32
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	e000      	b.n	80034ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034cc:	2302      	movs	r3, #2
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}

080034d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b086      	sub	sp, #24
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e6:	e03b      	b.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ee:	d037      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f0:	f7fd fce2 	bl	8000eb8 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6a3a      	ldr	r2, [r7, #32]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d302      	bcc.n	8003506 <UART_WaitOnFlagUntilTimeout+0x30>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e03a      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d023      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b80      	cmp	r3, #128	@ 0x80
 800351c:	d020      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b40      	cmp	r3, #64	@ 0x40
 8003522:	d01d      	beq.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b08      	cmp	r3, #8
 8003530:	d116      	bne.n	8003560 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f81d 	bl	8003588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2208      	movs	r2, #8
 8003552:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e00f      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	68ba      	ldr	r2, [r7, #8]
 800356c:	429a      	cmp	r2, r3
 800356e:	bf0c      	ite	eq
 8003570:	2301      	moveq	r3, #1
 8003572:	2300      	movne	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	79fb      	ldrb	r3, [r7, #7]
 800357a:	429a      	cmp	r2, r3
 800357c:	d0b4      	beq.n	80034e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003588:	b480      	push	{r7}
 800358a:	b095      	sub	sp, #84	@ 0x54
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	330c      	adds	r3, #12
 80035ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e5      	bne.n	8003590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3314      	adds	r3, #20
 80035ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3314      	adds	r3, #20
 80035e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d119      	bne.n	8003634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	330c      	adds	r3, #12
 8003606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f023 0310 	bic.w	r3, r3, #16
 8003616:	647b      	str	r3, [r7, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003620:	61ba      	str	r2, [r7, #24]
 8003622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	6979      	ldr	r1, [r7, #20]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	613b      	str	r3, [r7, #16]
   return(result);
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2220      	movs	r2, #32
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003642:	bf00      	nop
 8003644:	3754      	adds	r7, #84	@ 0x54
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
	...

08003650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003654:	b0c0      	sub	sp, #256	@ 0x100
 8003656:	af00      	add	r7, sp, #0
 8003658:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800365c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800366c:	68d9      	ldr	r1, [r3, #12]
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	ea40 0301 	orr.w	r3, r0, r1
 8003678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	431a      	orrs	r2, r3
 8003688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	431a      	orrs	r2, r3
 8003690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	4313      	orrs	r3, r2
 8003698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800369c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80036a8:	f021 010c 	bic.w	r1, r1, #12
 80036ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80036b6:	430b      	orrs	r3, r1
 80036b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80036c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036ca:	6999      	ldr	r1, [r3, #24]
 80036cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	ea40 0301 	orr.w	r3, r0, r1
 80036d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80036d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	4b8f      	ldr	r3, [pc, #572]	@ (800391c <UART_SetConfig+0x2cc>)
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d005      	beq.n	80036f0 <UART_SetConfig+0xa0>
 80036e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4b8d      	ldr	r3, [pc, #564]	@ (8003920 <UART_SetConfig+0x2d0>)
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036f0:	f7fe feec 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 80036f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80036f8:	e003      	b.n	8003702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036fa:	f7fe fed3 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 80036fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800370c:	f040 810c 	bne.w	8003928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800371e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003722:	4622      	mov	r2, r4
 8003724:	462b      	mov	r3, r5
 8003726:	1891      	adds	r1, r2, r2
 8003728:	65b9      	str	r1, [r7, #88]	@ 0x58
 800372a:	415b      	adcs	r3, r3
 800372c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800372e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003732:	4621      	mov	r1, r4
 8003734:	eb12 0801 	adds.w	r8, r2, r1
 8003738:	4629      	mov	r1, r5
 800373a:	eb43 0901 	adc.w	r9, r3, r1
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800374a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800374e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003752:	4690      	mov	r8, r2
 8003754:	4699      	mov	r9, r3
 8003756:	4623      	mov	r3, r4
 8003758:	eb18 0303 	adds.w	r3, r8, r3
 800375c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003760:	462b      	mov	r3, r5
 8003762:	eb49 0303 	adc.w	r3, r9, r3
 8003766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800376a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800377a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800377e:	460b      	mov	r3, r1
 8003780:	18db      	adds	r3, r3, r3
 8003782:	653b      	str	r3, [r7, #80]	@ 0x50
 8003784:	4613      	mov	r3, r2
 8003786:	eb42 0303 	adc.w	r3, r2, r3
 800378a:	657b      	str	r3, [r7, #84]	@ 0x54
 800378c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003794:	f7fc fd94 	bl	80002c0 <__aeabi_uldivmod>
 8003798:	4602      	mov	r2, r0
 800379a:	460b      	mov	r3, r1
 800379c:	4b61      	ldr	r3, [pc, #388]	@ (8003924 <UART_SetConfig+0x2d4>)
 800379e:	fba3 2302 	umull	r2, r3, r3, r2
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	011c      	lsls	r4, r3, #4
 80037a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037aa:	2200      	movs	r2, #0
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80037b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80037b8:	4642      	mov	r2, r8
 80037ba:	464b      	mov	r3, r9
 80037bc:	1891      	adds	r1, r2, r2
 80037be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80037c0:	415b      	adcs	r3, r3
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80037c8:	4641      	mov	r1, r8
 80037ca:	eb12 0a01 	adds.w	sl, r2, r1
 80037ce:	4649      	mov	r1, r9
 80037d0:	eb43 0b01 	adc.w	fp, r3, r1
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80037e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037e8:	4692      	mov	sl, r2
 80037ea:	469b      	mov	fp, r3
 80037ec:	4643      	mov	r3, r8
 80037ee:	eb1a 0303 	adds.w	r3, sl, r3
 80037f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80037f6:	464b      	mov	r3, r9
 80037f8:	eb4b 0303 	adc.w	r3, fp, r3
 80037fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800380c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003814:	460b      	mov	r3, r1
 8003816:	18db      	adds	r3, r3, r3
 8003818:	643b      	str	r3, [r7, #64]	@ 0x40
 800381a:	4613      	mov	r3, r2
 800381c:	eb42 0303 	adc.w	r3, r2, r3
 8003820:	647b      	str	r3, [r7, #68]	@ 0x44
 8003822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800382a:	f7fc fd49 	bl	80002c0 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4611      	mov	r1, r2
 8003834:	4b3b      	ldr	r3, [pc, #236]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003836:	fba3 2301 	umull	r2, r3, r3, r1
 800383a:	095b      	lsrs	r3, r3, #5
 800383c:	2264      	movs	r2, #100	@ 0x64
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	1acb      	subs	r3, r1, r3
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800384a:	4b36      	ldr	r3, [pc, #216]	@ (8003924 <UART_SetConfig+0x2d4>)
 800384c:	fba3 2302 	umull	r2, r3, r3, r2
 8003850:	095b      	lsrs	r3, r3, #5
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003858:	441c      	add	r4, r3
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003864:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800386c:	4642      	mov	r2, r8
 800386e:	464b      	mov	r3, r9
 8003870:	1891      	adds	r1, r2, r2
 8003872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003874:	415b      	adcs	r3, r3
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800387c:	4641      	mov	r1, r8
 800387e:	1851      	adds	r1, r2, r1
 8003880:	6339      	str	r1, [r7, #48]	@ 0x30
 8003882:	4649      	mov	r1, r9
 8003884:	414b      	adcs	r3, r1
 8003886:	637b      	str	r3, [r7, #52]	@ 0x34
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003894:	4659      	mov	r1, fp
 8003896:	00cb      	lsls	r3, r1, #3
 8003898:	4651      	mov	r1, sl
 800389a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389e:	4651      	mov	r1, sl
 80038a0:	00ca      	lsls	r2, r1, #3
 80038a2:	4610      	mov	r0, r2
 80038a4:	4619      	mov	r1, r3
 80038a6:	4603      	mov	r3, r0
 80038a8:	4642      	mov	r2, r8
 80038aa:	189b      	adds	r3, r3, r2
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038b0:	464b      	mov	r3, r9
 80038b2:	460a      	mov	r2, r1
 80038b4:	eb42 0303 	adc.w	r3, r2, r3
 80038b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80038bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80038cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038d0:	460b      	mov	r3, r1
 80038d2:	18db      	adds	r3, r3, r3
 80038d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038d6:	4613      	mov	r3, r2
 80038d8:	eb42 0303 	adc.w	r3, r2, r3
 80038dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80038e6:	f7fc fceb 	bl	80002c0 <__aeabi_uldivmod>
 80038ea:	4602      	mov	r2, r0
 80038ec:	460b      	mov	r3, r1
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <UART_SetConfig+0x2d4>)
 80038f0:	fba3 1302 	umull	r1, r3, r3, r2
 80038f4:	095b      	lsrs	r3, r3, #5
 80038f6:	2164      	movs	r1, #100	@ 0x64
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	3332      	adds	r3, #50	@ 0x32
 8003902:	4a08      	ldr	r2, [pc, #32]	@ (8003924 <UART_SetConfig+0x2d4>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	095b      	lsrs	r3, r3, #5
 800390a:	f003 0207 	and.w	r2, r3, #7
 800390e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4422      	add	r2, r4
 8003916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003918:	e106      	b.n	8003b28 <UART_SetConfig+0x4d8>
 800391a:	bf00      	nop
 800391c:	40011000 	.word	0x40011000
 8003920:	40011400 	.word	0x40011400
 8003924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003932:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800393a:	4642      	mov	r2, r8
 800393c:	464b      	mov	r3, r9
 800393e:	1891      	adds	r1, r2, r2
 8003940:	6239      	str	r1, [r7, #32]
 8003942:	415b      	adcs	r3, r3
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
 8003946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800394a:	4641      	mov	r1, r8
 800394c:	1854      	adds	r4, r2, r1
 800394e:	4649      	mov	r1, r9
 8003950:	eb43 0501 	adc.w	r5, r3, r1
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	f04f 0300 	mov.w	r3, #0
 800395c:	00eb      	lsls	r3, r5, #3
 800395e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003962:	00e2      	lsls	r2, r4, #3
 8003964:	4614      	mov	r4, r2
 8003966:	461d      	mov	r5, r3
 8003968:	4643      	mov	r3, r8
 800396a:	18e3      	adds	r3, r4, r3
 800396c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003970:	464b      	mov	r3, r9
 8003972:	eb45 0303 	adc.w	r3, r5, r3
 8003976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800397a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003996:	4629      	mov	r1, r5
 8003998:	008b      	lsls	r3, r1, #2
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039a0:	4621      	mov	r1, r4
 80039a2:	008a      	lsls	r2, r1, #2
 80039a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80039a8:	f7fc fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4b60      	ldr	r3, [pc, #384]	@ (8003b34 <UART_SetConfig+0x4e4>)
 80039b2:	fba3 2302 	umull	r2, r3, r3, r2
 80039b6:	095b      	lsrs	r3, r3, #5
 80039b8:	011c      	lsls	r4, r3, #4
 80039ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80039c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80039c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80039cc:	4642      	mov	r2, r8
 80039ce:	464b      	mov	r3, r9
 80039d0:	1891      	adds	r1, r2, r2
 80039d2:	61b9      	str	r1, [r7, #24]
 80039d4:	415b      	adcs	r3, r3
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039dc:	4641      	mov	r1, r8
 80039de:	1851      	adds	r1, r2, r1
 80039e0:	6139      	str	r1, [r7, #16]
 80039e2:	4649      	mov	r1, r9
 80039e4:	414b      	adcs	r3, r1
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039f4:	4659      	mov	r1, fp
 80039f6:	00cb      	lsls	r3, r1, #3
 80039f8:	4651      	mov	r1, sl
 80039fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039fe:	4651      	mov	r1, sl
 8003a00:	00ca      	lsls	r2, r1, #3
 8003a02:	4610      	mov	r0, r2
 8003a04:	4619      	mov	r1, r3
 8003a06:	4603      	mov	r3, r0
 8003a08:	4642      	mov	r2, r8
 8003a0a:	189b      	adds	r3, r3, r2
 8003a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003a10:	464b      	mov	r3, r9
 8003a12:	460a      	mov	r2, r1
 8003a14:	eb42 0303 	adc.w	r3, r2, r3
 8003a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003a28:	f04f 0200 	mov.w	r2, #0
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003a34:	4649      	mov	r1, r9
 8003a36:	008b      	lsls	r3, r1, #2
 8003a38:	4641      	mov	r1, r8
 8003a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a3e:	4641      	mov	r1, r8
 8003a40:	008a      	lsls	r2, r1, #2
 8003a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003a46:	f7fc fc3b 	bl	80002c0 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4b38      	ldr	r3, [pc, #224]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a52:	fba3 2301 	umull	r2, r3, r3, r1
 8003a56:	095b      	lsrs	r3, r3, #5
 8003a58:	2264      	movs	r2, #100	@ 0x64
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	1acb      	subs	r3, r1, r3
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	3332      	adds	r3, #50	@ 0x32
 8003a64:	4a33      	ldr	r2, [pc, #204]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003a66:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6a:	095b      	lsrs	r3, r3, #5
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a70:	441c      	add	r4, r3
 8003a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a76:	2200      	movs	r2, #0
 8003a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8003a7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003a80:	4642      	mov	r2, r8
 8003a82:	464b      	mov	r3, r9
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	60b9      	str	r1, [r7, #8]
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a90:	4641      	mov	r1, r8
 8003a92:	1851      	adds	r1, r2, r1
 8003a94:	6039      	str	r1, [r7, #0]
 8003a96:	4649      	mov	r1, r9
 8003a98:	414b      	adcs	r3, r1
 8003a9a:	607b      	str	r3, [r7, #4]
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003aa8:	4659      	mov	r1, fp
 8003aaa:	00cb      	lsls	r3, r1, #3
 8003aac:	4651      	mov	r1, sl
 8003aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ab2:	4651      	mov	r1, sl
 8003ab4:	00ca      	lsls	r2, r1, #3
 8003ab6:	4610      	mov	r0, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4603      	mov	r3, r0
 8003abc:	4642      	mov	r2, r8
 8003abe:	189b      	adds	r3, r3, r2
 8003ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003ac2:	464b      	mov	r3, r9
 8003ac4:	460a      	mov	r2, r1
 8003ac6:	eb42 0303 	adc.w	r3, r2, r3
 8003aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ad6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ae4:	4649      	mov	r1, r9
 8003ae6:	008b      	lsls	r3, r1, #2
 8003ae8:	4641      	mov	r1, r8
 8003aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aee:	4641      	mov	r1, r8
 8003af0:	008a      	lsls	r2, r1, #2
 8003af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003af6:	f7fc fbe3 	bl	80002c0 <__aeabi_uldivmod>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b00:	fba3 1302 	umull	r1, r3, r3, r2
 8003b04:	095b      	lsrs	r3, r3, #5
 8003b06:	2164      	movs	r1, #100	@ 0x64
 8003b08:	fb01 f303 	mul.w	r3, r1, r3
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	3332      	adds	r3, #50	@ 0x32
 8003b12:	4a08      	ldr	r2, [pc, #32]	@ (8003b34 <UART_SetConfig+0x4e4>)
 8003b14:	fba2 2303 	umull	r2, r3, r2, r3
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4422      	add	r2, r4
 8003b26:	609a      	str	r2, [r3, #8]
}
 8003b28:	bf00      	nop
 8003b2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b34:	51eb851f 	.word	0x51eb851f

08003b38 <__NVIC_SetPriority>:
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	6039      	str	r1, [r7, #0]
 8003b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	db0a      	blt.n	8003b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	490c      	ldr	r1, [pc, #48]	@ (8003b84 <__NVIC_SetPriority+0x4c>)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	0112      	lsls	r2, r2, #4
 8003b58:	b2d2      	uxtb	r2, r2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003b60:	e00a      	b.n	8003b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	4908      	ldr	r1, [pc, #32]	@ (8003b88 <__NVIC_SetPriority+0x50>)
 8003b68:	79fb      	ldrb	r3, [r7, #7]
 8003b6a:	f003 030f 	and.w	r3, r3, #15
 8003b6e:	3b04      	subs	r3, #4
 8003b70:	0112      	lsls	r2, r2, #4
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	440b      	add	r3, r1
 8003b76:	761a      	strb	r2, [r3, #24]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e100 	.word	0xe000e100
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <SysTick_Handler+0x1c>)
 8003b92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b94:	f002 fa04 	bl	8005fa0 <xTaskGetSchedulerState>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d001      	beq.n	8003ba2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b9e:	f003 f8fb 	bl	8006d98 <xPortSysTickHandler>
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	e000e010 	.word	0xe000e010

08003bac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	f06f 0004 	mvn.w	r0, #4
 8003bb6:	f7ff ffbf 	bl	8003b38 <__NVIC_SetPriority>
#endif
}
 8003bba:	bf00      	nop
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc6:	f3ef 8305 	mrs	r3, IPSR
 8003bca:	603b      	str	r3, [r7, #0]
  return(result);
 8003bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003bd2:	f06f 0305 	mvn.w	r3, #5
 8003bd6:	607b      	str	r3, [r7, #4]
 8003bd8:	e00c      	b.n	8003bf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003bda:	4b0a      	ldr	r3, [pc, #40]	@ (8003c04 <osKernelInitialize+0x44>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d105      	bne.n	8003bee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003be2:	4b08      	ldr	r3, [pc, #32]	@ (8003c04 <osKernelInitialize+0x44>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	e002      	b.n	8003bf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bf4:	687b      	ldr	r3, [r7, #4]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	200022d0 	.word	0x200022d0

08003c08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0e:	f3ef 8305 	mrs	r3, IPSR
 8003c12:	603b      	str	r3, [r7, #0]
  return(result);
 8003c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c1a:	f06f 0305 	mvn.w	r3, #5
 8003c1e:	607b      	str	r3, [r7, #4]
 8003c20:	e010      	b.n	8003c44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c22:	4b0b      	ldr	r3, [pc, #44]	@ (8003c50 <osKernelStart+0x48>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d109      	bne.n	8003c3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c2a:	f7ff ffbf 	bl	8003bac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c2e:	4b08      	ldr	r3, [pc, #32]	@ (8003c50 <osKernelStart+0x48>)
 8003c30:	2202      	movs	r2, #2
 8003c32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c34:	f001 fd56 	bl	80056e4 <vTaskStartScheduler>
      stat = osOK;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	e002      	b.n	8003c44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c44:	687b      	ldr	r3, [r7, #4]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200022d0 	.word	0x200022d0

08003c54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b08e      	sub	sp, #56	@ 0x38
 8003c58:	af04      	add	r7, sp, #16
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c64:	f3ef 8305 	mrs	r3, IPSR
 8003c68:	617b      	str	r3, [r7, #20]
  return(result);
 8003c6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d17e      	bne.n	8003d6e <osThreadNew+0x11a>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d07b      	beq.n	8003d6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c76:	2380      	movs	r3, #128	@ 0x80
 8003c78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c7a:	2318      	movs	r3, #24
 8003c7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003c82:	f04f 33ff 	mov.w	r3, #4294967295
 8003c86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d045      	beq.n	8003d1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <osThreadNew+0x48>
        name = attr->name;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d002      	beq.n	8003caa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <osThreadNew+0x6e>
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	2b38      	cmp	r3, #56	@ 0x38
 8003cb4:	d805      	bhi.n	8003cc2 <osThreadNew+0x6e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <osThreadNew+0x72>
        return (NULL);
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e054      	b.n	8003d70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d00e      	beq.n	8003cfc <osThreadNew+0xa8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b5b      	cmp	r3, #91	@ 0x5b
 8003ce4:	d90a      	bls.n	8003cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d006      	beq.n	8003cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <osThreadNew+0xa8>
        mem = 1;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e010      	b.n	8003d1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d10c      	bne.n	8003d1e <osThreadNew+0xca>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d108      	bne.n	8003d1e <osThreadNew+0xca>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <osThreadNew+0xca>
          mem = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	61bb      	str	r3, [r7, #24]
 8003d18:	e001      	b.n	8003d1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d110      	bne.n	8003d46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d2c:	9202      	str	r2, [sp, #8]
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6a3a      	ldr	r2, [r7, #32]
 8003d38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f001 faf6 	bl	800532c <xTaskCreateStatic>
 8003d40:	4603      	mov	r3, r0
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e013      	b.n	8003d6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d110      	bne.n	8003d6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	f107 0310 	add.w	r3, r7, #16
 8003d54:	9301      	str	r3, [sp, #4]
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f001 fb44 	bl	80053ec <xTaskCreate>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d001      	beq.n	8003d6e <osThreadNew+0x11a>
            hTask = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d6e:	693b      	ldr	r3, [r7, #16]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3728      	adds	r7, #40	@ 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d80:	f3ef 8305 	mrs	r3, IPSR
 8003d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <osDelay+0x1c>
    stat = osErrorISR;
 8003d8c:	f06f 0305 	mvn.w	r3, #5
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e007      	b.n	8003da4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f001 fc6a 	bl	8005678 <vTaskDelay>
    }
  }

  return (stat);
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b088      	sub	sp, #32
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dba:	f3ef 8305 	mrs	r3, IPSR
 8003dbe:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dc0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d174      	bne.n	8003eb0 <osMutexNew+0x102>
    if (attr != NULL) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d003      	beq.n	8003dd4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	61bb      	str	r3, [r7, #24]
 8003dd2:	e001      	b.n	8003dd8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <osMutexNew+0x3a>
      rmtx = 1U;
 8003de2:	2301      	movs	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e001      	b.n	8003dec <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f003 0308 	and.w	r3, r3, #8
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d15c      	bne.n	8003eb0 <osMutexNew+0x102>
      mem = -1;
 8003df6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dfa:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d015      	beq.n	8003e2e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d006      	beq.n	8003e18 <osMutexNew+0x6a>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b4f      	cmp	r3, #79	@ 0x4f
 8003e10:	d902      	bls.n	8003e18 <osMutexNew+0x6a>
          mem = 1;
 8003e12:	2301      	movs	r3, #1
 8003e14:	613b      	str	r3, [r7, #16]
 8003e16:	e00c      	b.n	8003e32 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d108      	bne.n	8003e32 <osMutexNew+0x84>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d104      	bne.n	8003e32 <osMutexNew+0x84>
            mem = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	613b      	str	r3, [r7, #16]
 8003e2c:	e001      	b.n	8003e32 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d112      	bne.n	8003e5e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d007      	beq.n	8003e4e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	4619      	mov	r1, r3
 8003e44:	2004      	movs	r0, #4
 8003e46:	f000 fc50 	bl	80046ea <xQueueCreateMutexStatic>
 8003e4a:	61f8      	str	r0, [r7, #28]
 8003e4c:	e016      	b.n	8003e7c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	4619      	mov	r1, r3
 8003e54:	2001      	movs	r0, #1
 8003e56:	f000 fc48 	bl	80046ea <xQueueCreateMutexStatic>
 8003e5a:	61f8      	str	r0, [r7, #28]
 8003e5c:	e00e      	b.n	8003e7c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003e6a:	2004      	movs	r0, #4
 8003e6c:	f000 fc25 	bl	80046ba <xQueueCreateMutex>
 8003e70:	61f8      	str	r0, [r7, #28]
 8003e72:	e003      	b.n	8003e7c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003e74:	2001      	movs	r0, #1
 8003e76:	f000 fc20 	bl	80046ba <xQueueCreateMutex>
 8003e7a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00c      	beq.n	8003e9c <osMutexNew+0xee>
        if (attr != NULL) {
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <osMutexNew+0xe2>
          name = attr->name;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e001      	b.n	8003e94 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	69f8      	ldr	r0, [r7, #28]
 8003e98:	f001 f9ea 	bl	8005270 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d006      	beq.n	8003eb0 <osMutexNew+0x102>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d003      	beq.n	8003eb0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003eb0:	69fb      	ldr	r3, [r7, #28]
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3720      	adds	r7, #32
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}

08003eba <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b086      	sub	sp, #24
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f023 0301 	bic.w	r3, r3, #1
 8003eca:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ed8:	f3ef 8305 	mrs	r3, IPSR
 8003edc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ede:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d003      	beq.n	8003eec <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003ee4:	f06f 0305 	mvn.w	r3, #5
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e02c      	b.n	8003f46 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d103      	bne.n	8003efa <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003ef2:	f06f 0303 	mvn.w	r3, #3
 8003ef6:	617b      	str	r3, [r7, #20]
 8003ef8:	e025      	b.n	8003f46 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d011      	beq.n	8003f24 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	6938      	ldr	r0, [r7, #16]
 8003f04:	f000 fc41 	bl	800478a <xQueueTakeMutexRecursive>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d01b      	beq.n	8003f46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d003      	beq.n	8003f1c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003f14:	f06f 0301 	mvn.w	r3, #1
 8003f18:	617b      	str	r3, [r7, #20]
 8003f1a:	e014      	b.n	8003f46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003f1c:	f06f 0302 	mvn.w	r3, #2
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e010      	b.n	8003f46 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	6938      	ldr	r0, [r7, #16]
 8003f28:	f000 fee8 	bl	8004cfc <xQueueSemaphoreTake>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d009      	beq.n	8003f46 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003f38:	f06f 0301 	mvn.w	r3, #1
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	e002      	b.n	8003f46 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003f40:	f06f 0302 	mvn.w	r3, #2
 8003f44:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003f46:	697b      	ldr	r3, [r7, #20]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f6c:	f3ef 8305 	mrs	r3, IPSR
 8003f70:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f72:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d003      	beq.n	8003f80 <osMutexRelease+0x30>
    stat = osErrorISR;
 8003f78:	f06f 0305 	mvn.w	r3, #5
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	e01f      	b.n	8003fc0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003f86:	f06f 0303 	mvn.w	r3, #3
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	e018      	b.n	8003fc0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d009      	beq.n	8003fa8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003f94:	6938      	ldr	r0, [r7, #16]
 8003f96:	f000 fbc3 	bl	8004720 <xQueueGiveMutexRecursive>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d00f      	beq.n	8003fc0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003fa0:	f06f 0302 	mvn.w	r3, #2
 8003fa4:	617b      	str	r3, [r7, #20]
 8003fa6:	e00b      	b.n	8003fc0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2200      	movs	r2, #0
 8003fac:	2100      	movs	r1, #0
 8003fae:	6938      	ldr	r0, [r7, #16]
 8003fb0:	f000 fc22 	bl	80047f8 <xQueueGenericSend>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d002      	beq.n	8003fc0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8003fba:	f06f 0302 	mvn.w	r3, #2
 8003fbe:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003fc0:	697b      	ldr	r3, [r7, #20]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3718      	adds	r7, #24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b08a      	sub	sp, #40	@ 0x28
 8003fce:	af02      	add	r7, sp, #8
 8003fd0:	60f8      	str	r0, [r7, #12]
 8003fd2:	60b9      	str	r1, [r7, #8]
 8003fd4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fda:	f3ef 8305 	mrs	r3, IPSR
 8003fde:	613b      	str	r3, [r7, #16]
  return(result);
 8003fe0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d15f      	bne.n	80040a6 <osMessageQueueNew+0xdc>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05c      	beq.n	80040a6 <osMessageQueueNew+0xdc>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d059      	beq.n	80040a6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d029      	beq.n	8004052 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d012      	beq.n	800402c <osMessageQueueNew+0x62>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	2b4f      	cmp	r3, #79	@ 0x4f
 800400c:	d90e      	bls.n	800402c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	429a      	cmp	r2, r3
 8004024:	d302      	bcc.n	800402c <osMessageQueueNew+0x62>
        mem = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	e014      	b.n	8004056 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d110      	bne.n	8004056 <osMessageQueueNew+0x8c>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10c      	bne.n	8004056 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004040:	2b00      	cmp	r3, #0
 8004042:	d108      	bne.n	8004056 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <osMessageQueueNew+0x8c>
          mem = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e001      	b.n	8004056 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004052:	2300      	movs	r3, #0
 8004054:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d10b      	bne.n	8004074 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2100      	movs	r1, #0
 8004066:	9100      	str	r1, [sp, #0]
 8004068:	68b9      	ldr	r1, [r7, #8]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 fa30 	bl	80044d0 <xQueueGenericCreateStatic>
 8004070:	61f8      	str	r0, [r7, #28]
 8004072:	e008      	b.n	8004086 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d105      	bne.n	8004086 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800407a:	2200      	movs	r2, #0
 800407c:	68b9      	ldr	r1, [r7, #8]
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 faa3 	bl	80045ca <xQueueGenericCreate>
 8004084:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00c      	beq.n	80040a6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <osMessageQueueNew+0xd0>
        name = attr->name;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e001      	b.n	800409e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800409e:	6979      	ldr	r1, [r7, #20]
 80040a0:	69f8      	ldr	r0, [r7, #28]
 80040a2:	f001 f8e5 	bl	8005270 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80040a6:	69fb      	ldr	r3, [r7, #28]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3720      	adds	r7, #32
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	4613      	mov	r3, r2
 80040be:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80040c4:	2300      	movs	r3, #0
 80040c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c8:	f3ef 8305 	mrs	r3, IPSR
 80040cc:	617b      	str	r3, [r7, #20]
  return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d028      	beq.n	8004126 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80040d4:	69bb      	ldr	r3, [r7, #24]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d005      	beq.n	80040e6 <osMessageQueuePut+0x36>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d002      	beq.n	80040e6 <osMessageQueuePut+0x36>
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80040e6:	f06f 0303 	mvn.w	r3, #3
 80040ea:	61fb      	str	r3, [r7, #28]
 80040ec:	e038      	b.n	8004160 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80040f2:	f107 0210 	add.w	r2, r7, #16
 80040f6:	2300      	movs	r3, #0
 80040f8:	68b9      	ldr	r1, [r7, #8]
 80040fa:	69b8      	ldr	r0, [r7, #24]
 80040fc:	f000 fc7e 	bl	80049fc <xQueueGenericSendFromISR>
 8004100:	4603      	mov	r3, r0
 8004102:	2b01      	cmp	r3, #1
 8004104:	d003      	beq.n	800410e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004106:	f06f 0302 	mvn.w	r3, #2
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	e028      	b.n	8004160 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d025      	beq.n	8004160 <osMessageQueuePut+0xb0>
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <osMessageQueuePut+0xbc>)
 8004116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	f3bf 8f6f 	isb	sy
 8004124:	e01c      	b.n	8004160 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d002      	beq.n	8004132 <osMessageQueuePut+0x82>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d103      	bne.n	800413a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004132:	f06f 0303 	mvn.w	r3, #3
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	e012      	b.n	8004160 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800413a:	2300      	movs	r3, #0
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	69b8      	ldr	r0, [r7, #24]
 8004142:	f000 fb59 	bl	80047f8 <xQueueGenericSend>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d009      	beq.n	8004160 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d003      	beq.n	800415a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004152:	f06f 0301 	mvn.w	r3, #1
 8004156:	61fb      	str	r3, [r7, #28]
 8004158:	e002      	b.n	8004160 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800415a:	f06f 0302 	mvn.w	r3, #2
 800415e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004160:	69fb      	ldr	r3, [r7, #28]
}
 8004162:	4618      	mov	r0, r3
 8004164:	3720      	adds	r7, #32
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b088      	sub	sp, #32
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004186:	f3ef 8305 	mrs	r3, IPSR
 800418a:	617b      	str	r3, [r7, #20]
  return(result);
 800418c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800418e:	2b00      	cmp	r3, #0
 8004190:	d028      	beq.n	80041e4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <osMessageQueueGet+0x34>
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <osMessageQueueGet+0x34>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80041a4:	f06f 0303 	mvn.w	r3, #3
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	e037      	b.n	800421c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80041ac:	2300      	movs	r3, #0
 80041ae:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	461a      	mov	r2, r3
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	69b8      	ldr	r0, [r7, #24]
 80041ba:	f000 feaf 	bl	8004f1c <xQueueReceiveFromISR>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d003      	beq.n	80041cc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80041c4:	f06f 0302 	mvn.w	r3, #2
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	e027      	b.n	800421c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d024      	beq.n	800421c <osMessageQueueGet+0xac>
 80041d2:	4b15      	ldr	r3, [pc, #84]	@ (8004228 <osMessageQueueGet+0xb8>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	e01b      	b.n	800421c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <osMessageQueueGet+0x80>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d103      	bne.n	80041f8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80041f0:	f06f 0303 	mvn.w	r3, #3
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e011      	b.n	800421c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	68b9      	ldr	r1, [r7, #8]
 80041fc:	69b8      	ldr	r0, [r7, #24]
 80041fe:	f000 fc9b 	bl	8004b38 <xQueueReceive>
 8004202:	4603      	mov	r3, r0
 8004204:	2b01      	cmp	r3, #1
 8004206:	d009      	beq.n	800421c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800420e:	f06f 0301 	mvn.w	r3, #1
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e002      	b.n	800421c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004216:	f06f 0302 	mvn.w	r3, #2
 800421a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800421c:	69fb      	ldr	r3, [r7, #28]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a07      	ldr	r2, [pc, #28]	@ (8004258 <vApplicationGetIdleTaskMemory+0x2c>)
 800423c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	4a06      	ldr	r2, [pc, #24]	@ (800425c <vApplicationGetIdleTaskMemory+0x30>)
 8004242:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2280      	movs	r2, #128	@ 0x80
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	200022d4 	.word	0x200022d4
 800425c:	20002330 	.word	0x20002330

08004260 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a07      	ldr	r2, [pc, #28]	@ (800428c <vApplicationGetTimerTaskMemory+0x2c>)
 8004270:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4a06      	ldr	r2, [pc, #24]	@ (8004290 <vApplicationGetTimerTaskMemory+0x30>)
 8004276:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800427e:	601a      	str	r2, [r3, #0]
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	20002530 	.word	0x20002530
 8004290:	2000258c 	.word	0x2000258c

08004294 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f103 0208 	add.w	r2, r3, #8
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 32ff 	mov.w	r2, #4294967295
 80042ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f103 0208 	add.w	r2, r3, #8
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f103 0208 	add.w	r2, r3, #8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80042e2:	bf00      	nop
 80042e4:	370c      	adds	r7, #12
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ee:	b480      	push	{r7}
 80042f0:	b085      	sub	sp, #20
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689a      	ldr	r2, [r3, #8]
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	601a      	str	r2, [r3, #0]
}
 800432a:	bf00      	nop
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004336:	b480      	push	{r7}
 8004338:	b085      	sub	sp, #20
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
 800433e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800434c:	d103      	bne.n	8004356 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e00c      	b.n	8004370 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3308      	adds	r3, #8
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e002      	b.n	8004364 <vListInsert+0x2e>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	429a      	cmp	r2, r3
 800436e:	d2f6      	bcs.n	800435e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	683a      	ldr	r2, [r7, #0]
 800437e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	601a      	str	r2, [r3, #0]
}
 800439c:	bf00      	nop
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043a8:	b480      	push	{r7}
 80043aa:	b085      	sub	sp, #20
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	6892      	ldr	r2, [r2, #8]
 80043be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6852      	ldr	r2, [r2, #4]
 80043c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d103      	bne.n	80043dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	1e5a      	subs	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004414:	f383 8811 	msr	BASEPRI, r3
 8004418:	f3bf 8f6f 	isb	sy
 800441c:	f3bf 8f4f 	dsb	sy
 8004420:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004422:	bf00      	nop
 8004424:	bf00      	nop
 8004426:	e7fd      	b.n	8004424 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004428:	f002 fc26 	bl	8006c78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	68f9      	ldr	r1, [r7, #12]
 8004436:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	441a      	add	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004458:	3b01      	subs	r3, #1
 800445a:	68f9      	ldr	r1, [r7, #12]
 800445c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800445e:	fb01 f303 	mul.w	r3, r1, r3
 8004462:	441a      	add	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	22ff      	movs	r2, #255	@ 0xff
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	22ff      	movs	r2, #255	@ 0xff
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d114      	bne.n	80044a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01a      	beq.n	80044bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	3310      	adds	r3, #16
 800448a:	4618      	mov	r0, r3
 800448c:	f001 fbb8 	bl	8005c00 <xTaskRemoveFromEventList>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d012      	beq.n	80044bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004496:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <xQueueGenericReset+0xd0>)
 8004498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	e009      	b.n	80044bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	3310      	adds	r3, #16
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fef1 	bl	8004294 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	3324      	adds	r3, #36	@ 0x24
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7ff feec 	bl	8004294 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80044bc:	f002 fc0e 	bl	8006cdc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80044c0:	2301      	movs	r3, #1
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	e000ed04 	.word	0xe000ed04

080044d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	@ 0x38
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10b      	bne.n	800451a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004506:	f383 8811 	msr	BASEPRI, r3
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	e7fd      	b.n	8004516 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <xQueueGenericCreateStatic+0x56>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <xQueueGenericCreateStatic+0x5a>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <xQueueGenericCreateStatic+0x5c>
 800452a:	2300      	movs	r3, #0
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	623b      	str	r3, [r7, #32]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d102      	bne.n	8004554 <xQueueGenericCreateStatic+0x84>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <xQueueGenericCreateStatic+0x88>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <xQueueGenericCreateStatic+0x8a>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10b      	bne.n	8004576 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	61fb      	str	r3, [r7, #28]
}
 8004570:	bf00      	nop
 8004572:	bf00      	nop
 8004574:	e7fd      	b.n	8004572 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004576:	2350      	movs	r3, #80	@ 0x50
 8004578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b50      	cmp	r3, #80	@ 0x50
 800457e:	d00b      	beq.n	8004598 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	61bb      	str	r3, [r7, #24]
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	e7fd      	b.n	8004594 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004598:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800459e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d00d      	beq.n	80045c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80045a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80045ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80045b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b2:	9300      	str	r3, [sp, #0]
 80045b4:	4613      	mov	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	68b9      	ldr	r1, [r7, #8]
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 f840 	bl	8004640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80045c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3730      	adds	r7, #48	@ 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b08a      	sub	sp, #40	@ 0x28
 80045ce:	af02      	add	r7, sp, #8
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10b      	bne.n	80045f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	613b      	str	r3, [r7, #16]
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	e7fd      	b.n	80045f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	fb02 f303 	mul.w	r3, r2, r3
 80045fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3350      	adds	r3, #80	@ 0x50
 8004604:	4618      	mov	r0, r3
 8004606:	f002 fc59 	bl	8006ebc <pvPortMalloc>
 800460a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	3350      	adds	r3, #80	@ 0x50
 800461a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004624:	79fa      	ldrb	r2, [r7, #7]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	68b9      	ldr	r1, [r7, #8]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 f805 	bl	8004640 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004636:	69bb      	ldr	r3, [r7, #24]
	}
 8004638:	4618      	mov	r0, r3
 800463a:	3720      	adds	r7, #32
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	601a      	str	r2, [r3, #0]
 800465a:	e002      	b.n	8004662 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800466e:	2101      	movs	r1, #1
 8004670:	69b8      	ldr	r0, [r7, #24]
 8004672:	f7ff fec3 	bl	80043fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00e      	beq.n	80046b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80046a6:	2300      	movs	r3, #0
 80046a8:	2200      	movs	r2, #0
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 f8a3 	bl	80047f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80046b2:	bf00      	nop
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b086      	sub	sp, #24
 80046be:	af00      	add	r7, sp, #0
 80046c0:	4603      	mov	r3, r0
 80046c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046c4:	2301      	movs	r3, #1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	2300      	movs	r3, #0
 80046ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	461a      	mov	r2, r3
 80046d0:	6939      	ldr	r1, [r7, #16]
 80046d2:	6978      	ldr	r0, [r7, #20]
 80046d4:	f7ff ff79 	bl	80045ca <xQueueGenericCreate>
 80046d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ffd3 	bl	8004686 <prvInitialiseMutex>

		return xNewQueue;
 80046e0:	68fb      	ldr	r3, [r7, #12]
	}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3718      	adds	r7, #24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b088      	sub	sp, #32
 80046ee:	af02      	add	r7, sp, #8
 80046f0:	4603      	mov	r3, r0
 80046f2:	6039      	str	r1, [r7, #0]
 80046f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80046f6:	2301      	movs	r3, #1
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	9300      	str	r3, [sp, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	6939      	ldr	r1, [r7, #16]
 8004708:	6978      	ldr	r0, [r7, #20]
 800470a:	f7ff fee1 	bl	80044d0 <xQueueGenericCreateStatic>
 800470e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f7ff ffb8 	bl	8004686 <prvInitialiseMutex>

		return xNewQueue;
 8004716:	68fb      	ldr	r3, [r7, #12]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004720:	b590      	push	{r4, r7, lr}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10b      	bne.n	800474a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	60fb      	str	r3, [r7, #12]
}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	689c      	ldr	r4, [r3, #8]
 800474e:	f001 fc17 	bl	8005f80 <xTaskGetCurrentTaskHandle>
 8004752:	4603      	mov	r3, r0
 8004754:	429c      	cmp	r4, r3
 8004756:	d111      	bne.n	800477c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	1e5a      	subs	r2, r3, #1
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800476a:	2300      	movs	r3, #0
 800476c:	2200      	movs	r2, #0
 800476e:	2100      	movs	r1, #0
 8004770:	6938      	ldr	r0, [r7, #16]
 8004772:	f000 f841 	bl	80047f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8004776:	2301      	movs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
 800477a:	e001      	b.n	8004780 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004780:	697b      	ldr	r3, [r7, #20]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	371c      	adds	r7, #28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd90      	pop	{r4, r7, pc}

0800478a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800478a:	b590      	push	{r4, r7, lr}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	689c      	ldr	r4, [r3, #8]
 80047ba:	f001 fbe1 	bl	8005f80 <xTaskGetCurrentTaskHandle>
 80047be:	4603      	mov	r3, r0
 80047c0:	429c      	cmp	r4, r3
 80047c2:	d107      	bne.n	80047d4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	1c5a      	adds	r2, r3, #1
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e00c      	b.n	80047ee <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	6938      	ldr	r0, [r7, #16]
 80047d8:	f000 fa90 	bl	8004cfc <xQueueSemaphoreTake>
 80047dc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d004      	beq.n	80047ee <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	1c5a      	adds	r2, r3, #1
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80047ee:	697b      	ldr	r3, [r7, #20]
	}
 80047f0:	4618      	mov	r0, r3
 80047f2:	371c      	adds	r7, #28
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd90      	pop	{r4, r7, pc}

080047f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08e      	sub	sp, #56	@ 0x38
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004806:	2300      	movs	r3, #0
 8004808:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800480e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10b      	bne.n	800482c <xQueueGenericSend+0x34>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d103      	bne.n	800483a <xQueueGenericSend+0x42>
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <xQueueGenericSend+0x46>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <xQueueGenericSend+0x48>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <xQueueGenericSend+0x64>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004856:	bf00      	nop
 8004858:	bf00      	nop
 800485a:	e7fd      	b.n	8004858 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	2b02      	cmp	r3, #2
 8004860:	d103      	bne.n	800486a <xQueueGenericSend+0x72>
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004866:	2b01      	cmp	r3, #1
 8004868:	d101      	bne.n	800486e <xQueueGenericSend+0x76>
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <xQueueGenericSend+0x78>
 800486e:	2300      	movs	r3, #0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <xQueueGenericSend+0x94>
	__asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	623b      	str	r3, [r7, #32]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800488c:	f001 fb88 	bl	8005fa0 <xTaskGetSchedulerState>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d102      	bne.n	800489c <xQueueGenericSend+0xa4>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <xQueueGenericSend+0xa8>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <xQueueGenericSend+0xaa>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <xQueueGenericSend+0xc6>
	__asm volatile
 80048a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048aa:	f383 8811 	msr	BASEPRI, r3
 80048ae:	f3bf 8f6f 	isb	sy
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	61fb      	str	r3, [r7, #28]
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	e7fd      	b.n	80048ba <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048be:	f002 f9db 	bl	8006c78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d302      	bcc.n	80048d4 <xQueueGenericSend+0xdc>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d129      	bne.n	8004928 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	68b9      	ldr	r1, [r7, #8]
 80048d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048da:	f000 fbb9 	bl	8005050 <prvCopyDataToQueue>
 80048de:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ea:	3324      	adds	r3, #36	@ 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f001 f987 	bl	8005c00 <xTaskRemoveFromEventList>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d013      	beq.n	8004920 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048f8:	4b3f      	ldr	r3, [pc, #252]	@ (80049f8 <xQueueGenericSend+0x200>)
 80048fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	e00a      	b.n	8004920 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800490a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004910:	4b39      	ldr	r3, [pc, #228]	@ (80049f8 <xQueueGenericSend+0x200>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004920:	f002 f9dc 	bl	8006cdc <vPortExitCritical>
				return pdPASS;
 8004924:	2301      	movs	r3, #1
 8004926:	e063      	b.n	80049f0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492e:	f002 f9d5 	bl	8006cdc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004932:	2300      	movs	r3, #0
 8004934:	e05c      	b.n	80049f0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004938:	2b00      	cmp	r3, #0
 800493a:	d106      	bne.n	800494a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800493c:	f107 0314 	add.w	r3, r7, #20
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f9c1 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004946:	2301      	movs	r3, #1
 8004948:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800494a:	f002 f9c7 	bl	8006cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494e:	f000 ff31 	bl	80057b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004952:	f002 f991 	bl	8006c78 <vPortEnterCritical>
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800495c:	b25b      	sxtb	r3, r3
 800495e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004962:	d103      	bne.n	800496c <xQueueGenericSend+0x174>
 8004964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800496c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004972:	b25b      	sxtb	r3, r3
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004978:	d103      	bne.n	8004982 <xQueueGenericSend+0x18a>
 800497a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497c:	2200      	movs	r2, #0
 800497e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004982:	f002 f9ab 	bl	8006cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004986:	1d3a      	adds	r2, r7, #4
 8004988:	f107 0314 	add.w	r3, r7, #20
 800498c:	4611      	mov	r1, r2
 800498e:	4618      	mov	r0, r3
 8004990:	f001 f9b0 	bl	8005cf4 <xTaskCheckForTimeOut>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d124      	bne.n	80049e4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800499a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800499c:	f000 fc50 	bl	8005240 <prvIsQueueFull>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d018      	beq.n	80049d8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a8:	3310      	adds	r3, #16
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 f8d4 	bl	8005b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049b6:	f000 fbdb 	bl	8005170 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049ba:	f000 ff09 	bl	80057d0 <xTaskResumeAll>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f47f af7c 	bne.w	80048be <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80049c6:	4b0c      	ldr	r3, [pc, #48]	@ (80049f8 <xQueueGenericSend+0x200>)
 80049c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	f3bf 8f6f 	isb	sy
 80049d6:	e772      	b.n	80048be <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049da:	f000 fbc9 	bl	8005170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049de:	f000 fef7 	bl	80057d0 <xTaskResumeAll>
 80049e2:	e76c      	b.n	80048be <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049e6:	f000 fbc3 	bl	8005170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049ea:	f000 fef1 	bl	80057d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3738      	adds	r7, #56	@ 0x38
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	e000ed04 	.word	0xe000ed04

080049fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b090      	sub	sp, #64	@ 0x40
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d103      	bne.n	8004a3a <xQueueGenericSendFromISR+0x3e>
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d101      	bne.n	8004a3e <xQueueGenericSendFromISR+0x42>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e000      	b.n	8004a40 <xQueueGenericSendFromISR+0x44>
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d103      	bne.n	8004a6a <xQueueGenericSendFromISR+0x6e>
 8004a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d101      	bne.n	8004a6e <xQueueGenericSendFromISR+0x72>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e000      	b.n	8004a70 <xQueueGenericSendFromISR+0x74>
 8004a6e:	2300      	movs	r3, #0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	623b      	str	r3, [r7, #32]
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a8c:	f002 f9d4 	bl	8006e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a90:	f3ef 8211 	mrs	r2, BASEPRI
 8004a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	61fa      	str	r2, [r7, #28]
 8004aa6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004aaa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d302      	bcc.n	8004abe <xQueueGenericSendFromISR+0xc2>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d12f      	bne.n	8004b1e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ad4:	f000 fabc 	bl	8005050 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ad8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d112      	bne.n	8004b08 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aec:	3324      	adds	r3, #36	@ 0x24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 f886 	bl	8005c00 <xTaskRemoveFromEventList>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	b25a      	sxtb	r2, r3
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004b1c:	e001      	b.n	8004b22 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b24:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3740      	adds	r7, #64	@ 0x40
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08c      	sub	sp, #48	@ 0x30
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b44:	2300      	movs	r3, #0
 8004b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <xQueueReceive+0x32>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	623b      	str	r3, [r7, #32]
}
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <xQueueReceive+0x40>
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <xQueueReceive+0x44>
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e000      	b.n	8004b7e <xQueueReceive+0x46>
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10b      	bne.n	8004b9a <xQueueReceive+0x62>
	__asm volatile
 8004b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b86:	f383 8811 	msr	BASEPRI, r3
 8004b8a:	f3bf 8f6f 	isb	sy
 8004b8e:	f3bf 8f4f 	dsb	sy
 8004b92:	61fb      	str	r3, [r7, #28]
}
 8004b94:	bf00      	nop
 8004b96:	bf00      	nop
 8004b98:	e7fd      	b.n	8004b96 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b9a:	f001 fa01 	bl	8005fa0 <xTaskGetSchedulerState>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <xQueueReceive+0x72>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <xQueueReceive+0x76>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueReceive+0x78>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10b      	bne.n	8004bcc <xQueueReceive+0x94>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	61bb      	str	r3, [r7, #24]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bcc:	f002 f854 	bl	8006c78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d01f      	beq.n	8004c1c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bdc:	68b9      	ldr	r1, [r7, #8]
 8004bde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004be0:	f000 faa0 	bl	8005124 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be6:	1e5a      	subs	r2, r3, #1
 8004be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bea:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00f      	beq.n	8004c14 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	3310      	adds	r3, #16
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f801 	bl	8005c00 <xTaskRemoveFromEventList>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c04:	4b3c      	ldr	r3, [pc, #240]	@ (8004cf8 <xQueueReceive+0x1c0>)
 8004c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c14:	f002 f862 	bl	8006cdc <vPortExitCritical>
				return pdPASS;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e069      	b.n	8004cf0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c22:	f002 f85b 	bl	8006cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c26:	2300      	movs	r3, #0
 8004c28:	e062      	b.n	8004cf0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c30:	f107 0310 	add.w	r3, r7, #16
 8004c34:	4618      	mov	r0, r3
 8004c36:	f001 f847 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c3e:	f002 f84d 	bl	8006cdc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c42:	f000 fdb7 	bl	80057b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c46:	f002 f817 	bl	8006c78 <vPortEnterCritical>
 8004c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c50:	b25b      	sxtb	r3, r3
 8004c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c56:	d103      	bne.n	8004c60 <xQueueReceive+0x128>
 8004c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c66:	b25b      	sxtb	r3, r3
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6c:	d103      	bne.n	8004c76 <xQueueReceive+0x13e>
 8004c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c70:	2200      	movs	r2, #0
 8004c72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c76:	f002 f831 	bl	8006cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c7a:	1d3a      	adds	r2, r7, #4
 8004c7c:	f107 0310 	add.w	r3, r7, #16
 8004c80:	4611      	mov	r1, r2
 8004c82:	4618      	mov	r0, r3
 8004c84:	f001 f836 	bl	8005cf4 <xTaskCheckForTimeOut>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d123      	bne.n	8004cd6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c90:	f000 fac0 	bl	8005214 <prvIsQueueEmpty>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d017      	beq.n	8004cca <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9c:	3324      	adds	r3, #36	@ 0x24
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	4611      	mov	r1, r2
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 ff5a 	bl	8005b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ca8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004caa:	f000 fa61 	bl	8005170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cae:	f000 fd8f 	bl	80057d0 <xTaskResumeAll>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d189      	bne.n	8004bcc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <xQueueReceive+0x1c0>)
 8004cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	f3bf 8f6f 	isb	sy
 8004cc8:	e780      	b.n	8004bcc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ccc:	f000 fa50 	bl	8005170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cd0:	f000 fd7e 	bl	80057d0 <xTaskResumeAll>
 8004cd4:	e77a      	b.n	8004bcc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd8:	f000 fa4a 	bl	8005170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cdc:	f000 fd78 	bl	80057d0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce2:	f000 fa97 	bl	8005214 <prvIsQueueEmpty>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f43f af6f 	beq.w	8004bcc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004cee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3730      	adds	r7, #48	@ 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08e      	sub	sp, #56	@ 0x38
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10b      	bne.n	8004d30 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	623b      	str	r3, [r7, #32]
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	e7fd      	b.n	8004d2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d3c:	f383 8811 	msr	BASEPRI, r3
 8004d40:	f3bf 8f6f 	isb	sy
 8004d44:	f3bf 8f4f 	dsb	sy
 8004d48:	61fb      	str	r3, [r7, #28]
}
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	e7fd      	b.n	8004d4c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d50:	f001 f926 	bl	8005fa0 <xTaskGetSchedulerState>
 8004d54:	4603      	mov	r3, r0
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d102      	bne.n	8004d60 <xQueueSemaphoreTake+0x64>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <xQueueSemaphoreTake+0x68>
 8004d60:	2301      	movs	r3, #1
 8004d62:	e000      	b.n	8004d66 <xQueueSemaphoreTake+0x6a>
 8004d64:	2300      	movs	r3, #0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10b      	bne.n	8004d82 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	61bb      	str	r3, [r7, #24]
}
 8004d7c:	bf00      	nop
 8004d7e:	bf00      	nop
 8004d80:	e7fd      	b.n	8004d7e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004d82:	f001 ff79 	bl	8006c78 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d024      	beq.n	8004ddc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d94:	1e5a      	subs	r2, r3, #1
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d104      	bne.n	8004dac <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004da2:	f001 fa77 	bl	8006294 <pvTaskIncrementMutexHeldCount>
 8004da6:	4602      	mov	r2, r0
 8004da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004daa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00f      	beq.n	8004dd4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db6:	3310      	adds	r3, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f000 ff21 	bl	8005c00 <xTaskRemoveFromEventList>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d007      	beq.n	8004dd4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004dc4:	4b54      	ldr	r3, [pc, #336]	@ (8004f18 <xQueueSemaphoreTake+0x21c>)
 8004dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004dd4:	f001 ff82 	bl	8006cdc <vPortExitCritical>
				return pdPASS;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e098      	b.n	8004f0e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d112      	bne.n	8004e08 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00b      	beq.n	8004e00 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	617b      	str	r3, [r7, #20]
}
 8004dfa:	bf00      	nop
 8004dfc:	bf00      	nop
 8004dfe:	e7fd      	b.n	8004dfc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004e00:	f001 ff6c 	bl	8006cdc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e04:	2300      	movs	r3, #0
 8004e06:	e082      	b.n	8004f0e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e0e:	f107 030c 	add.w	r3, r7, #12
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ff58 	bl	8005cc8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e1c:	f001 ff5e 	bl	8006cdc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e20:	f000 fcc8 	bl	80057b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e24:	f001 ff28 	bl	8006c78 <vPortEnterCritical>
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e2e:	b25b      	sxtb	r3, r3
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d103      	bne.n	8004e3e <xQueueSemaphoreTake+0x142>
 8004e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e44:	b25b      	sxtb	r3, r3
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d103      	bne.n	8004e54 <xQueueSemaphoreTake+0x158>
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	2200      	movs	r2, #0
 8004e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e54:	f001 ff42 	bl	8006cdc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e58:	463a      	mov	r2, r7
 8004e5a:	f107 030c 	add.w	r3, r7, #12
 8004e5e:	4611      	mov	r1, r2
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 ff47 	bl	8005cf4 <xTaskCheckForTimeOut>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d132      	bne.n	8004ed2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e6c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004e6e:	f000 f9d1 	bl	8005214 <prvIsQueueEmpty>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d026      	beq.n	8004ec6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d109      	bne.n	8004e94 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004e80:	f001 fefa 	bl	8006c78 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f001 f8a7 	bl	8005fdc <xTaskPriorityInherit>
 8004e8e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004e90:	f001 ff24 	bl	8006cdc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e96:	3324      	adds	r3, #36	@ 0x24
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fe5d 	bl	8005b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ea2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ea4:	f000 f964 	bl	8005170 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ea8:	f000 fc92 	bl	80057d0 <xTaskResumeAll>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f47f af67 	bne.w	8004d82 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004eb4:	4b18      	ldr	r3, [pc, #96]	@ (8004f18 <xQueueSemaphoreTake+0x21c>)
 8004eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	f3bf 8f4f 	dsb	sy
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	e75d      	b.n	8004d82 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ec6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ec8:	f000 f952 	bl	8005170 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ecc:	f000 fc80 	bl	80057d0 <xTaskResumeAll>
 8004ed0:	e757      	b.n	8004d82 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004ed2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ed4:	f000 f94c 	bl	8005170 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ed8:	f000 fc7a 	bl	80057d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004edc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ede:	f000 f999 	bl	8005214 <prvIsQueueEmpty>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f43f af4c 	beq.w	8004d82 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00d      	beq.n	8004f0c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004ef0:	f001 fec2 	bl	8006c78 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ef4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ef6:	f000 f893 	bl	8005020 <prvGetDisinheritPriorityAfterTimeout>
 8004efa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f02:	4618      	mov	r0, r3
 8004f04:	f001 f942 	bl	800618c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004f08:	f001 fee8 	bl	8006cdc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3738      	adds	r7, #56	@ 0x38
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b08e      	sub	sp, #56	@ 0x38
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10b      	bne.n	8004f4a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f36:	f383 8811 	msr	BASEPRI, r3
 8004f3a:	f3bf 8f6f 	isb	sy
 8004f3e:	f3bf 8f4f 	dsb	sy
 8004f42:	623b      	str	r3, [r7, #32]
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop
 8004f48:	e7fd      	b.n	8004f46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <xQueueReceiveFromISR+0x3c>
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d101      	bne.n	8004f5c <xQueueReceiveFromISR+0x40>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e000      	b.n	8004f5e <xQueueReceiveFromISR+0x42>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d10b      	bne.n	8004f7a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f66:	f383 8811 	msr	BASEPRI, r3
 8004f6a:	f3bf 8f6f 	isb	sy
 8004f6e:	f3bf 8f4f 	dsb	sy
 8004f72:	61fb      	str	r3, [r7, #28]
}
 8004f74:	bf00      	nop
 8004f76:	bf00      	nop
 8004f78:	e7fd      	b.n	8004f76 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f7a:	f001 ff5d 	bl	8006e38 <vPortValidateInterruptPriority>
	__asm volatile
 8004f7e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	61ba      	str	r2, [r7, #24]
 8004f94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f9e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d02f      	beq.n	8005006 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004fb0:	68b9      	ldr	r1, [r7, #8]
 8004fb2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004fb4:	f000 f8b6 	bl	8005124 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fba:	1e5a      	subs	r2, r3, #1
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbe:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004fc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d112      	bne.n	8004ff0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d016      	beq.n	8005000 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f000 fe12 	bl	8005c00 <xTaskRemoveFromEventList>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00e      	beq.n	8005000 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00b      	beq.n	8005000 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e007      	b.n	8005000 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	b25a      	sxtb	r2, r3
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005000:	2301      	movs	r3, #1
 8005002:	637b      	str	r3, [r7, #52]	@ 0x34
 8005004:	e001      	b.n	800500a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005006:	2300      	movs	r3, #0
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
 800500a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800500c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	f383 8811 	msr	BASEPRI, r3
}
 8005014:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005018:	4618      	mov	r0, r3
 800501a:	3738      	adds	r7, #56	@ 0x38
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	e001      	b.n	8005042 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005042:	68fb      	ldr	r3, [r7, #12]
	}
 8005044:	4618      	mov	r0, r3
 8005046:	3714      	adds	r7, #20
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800505c:	2300      	movs	r3, #0
 800505e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005064:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d10d      	bne.n	800508a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d14d      	bne.n	8005112 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f001 f816 	bl	80060ac <xTaskPriorityDisinherit>
 8005080:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	e043      	b.n	8005112 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d119      	bne.n	80050c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6858      	ldr	r0, [r3, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	461a      	mov	r2, r3
 800509a:	68b9      	ldr	r1, [r7, #8]
 800509c:	f002 f96a 	bl	8007374 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	441a      	add	r2, r3
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d32b      	bcc.n	8005112 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	e026      	b.n	8005112 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	68d8      	ldr	r0, [r3, #12]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050cc:	461a      	mov	r2, r3
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	f002 f950 	bl	8007374 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	425b      	negs	r3, r3
 80050de:	441a      	add	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	68da      	ldr	r2, [r3, #12]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d207      	bcs.n	8005100 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f8:	425b      	negs	r3, r3
 80050fa:	441a      	add	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2b02      	cmp	r3, #2
 8005104:	d105      	bne.n	8005112 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d002      	beq.n	8005112 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	3b01      	subs	r3, #1
 8005110:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800511a:	697b      	ldr	r3, [r7, #20]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3718      	adds	r7, #24
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}

08005124 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
 800512c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d018      	beq.n	8005168 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68da      	ldr	r2, [r3, #12]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800513e:	441a      	add	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	429a      	cmp	r2, r3
 800514e:	d303      	bcc.n	8005158 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	68d9      	ldr	r1, [r3, #12]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005160:	461a      	mov	r2, r3
 8005162:	6838      	ldr	r0, [r7, #0]
 8005164:	f002 f906 	bl	8007374 <memcpy>
	}
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005178:	f001 fd7e 	bl	8006c78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005182:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005184:	e011      	b.n	80051aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	3324      	adds	r3, #36	@ 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fd34 	bl	8005c00 <xTaskRemoveFromEventList>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d001      	beq.n	80051a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800519e:	f000 fe0d 	bl	8005dbc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051a2:	7bfb      	ldrb	r3, [r7, #15]
 80051a4:	3b01      	subs	r3, #1
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	dce9      	bgt.n	8005186 <prvUnlockQueue+0x16>
 80051b2:	e000      	b.n	80051b6 <prvUnlockQueue+0x46>
					break;
 80051b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	22ff      	movs	r2, #255	@ 0xff
 80051ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051be:	f001 fd8d 	bl	8006cdc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051c2:	f001 fd59 	bl	8006c78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ce:	e011      	b.n	80051f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d012      	beq.n	80051fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3310      	adds	r3, #16
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fd0f 	bl	8005c00 <xTaskRemoveFromEventList>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e8:	f000 fde8 	bl	8005dbc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051ec:	7bbb      	ldrb	r3, [r7, #14]
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dce9      	bgt.n	80051d0 <prvUnlockQueue+0x60>
 80051fc:	e000      	b.n	8005200 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	22ff      	movs	r2, #255	@ 0xff
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005208:	f001 fd68 	bl	8006cdc <vPortExitCritical>
}
 800520c:	bf00      	nop
 800520e:	3710      	adds	r7, #16
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b084      	sub	sp, #16
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800521c:	f001 fd2c 	bl	8006c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005224:	2b00      	cmp	r3, #0
 8005226:	d102      	bne.n	800522e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005228:	2301      	movs	r3, #1
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	e001      	b.n	8005232 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005232:	f001 fd53 	bl	8006cdc <vPortExitCritical>

	return xReturn;
 8005236:	68fb      	ldr	r3, [r7, #12]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3710      	adds	r7, #16
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005248:	f001 fd16 	bl	8006c78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005254:	429a      	cmp	r2, r3
 8005256:	d102      	bne.n	800525e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005258:	2301      	movs	r3, #1
 800525a:	60fb      	str	r3, [r7, #12]
 800525c:	e001      	b.n	8005262 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005262:	f001 fd3b 	bl	8006cdc <vPortExitCritical>

	return xReturn;
 8005266:	68fb      	ldr	r3, [r7, #12]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e014      	b.n	80052aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005280:	4a0f      	ldr	r2, [pc, #60]	@ (80052c0 <vQueueAddToRegistry+0x50>)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800528c:	490c      	ldr	r1, [pc, #48]	@ (80052c0 <vQueueAddToRegistry+0x50>)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005296:	4a0a      	ldr	r2, [pc, #40]	@ (80052c0 <vQueueAddToRegistry+0x50>)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052a2:	e006      	b.n	80052b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	3301      	adds	r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2b07      	cmp	r3, #7
 80052ae:	d9e7      	bls.n	8005280 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052b0:	bf00      	nop
 80052b2:	bf00      	nop
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	2000298c 	.word	0x2000298c

080052c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052d4:	f001 fcd0 	bl	8006c78 <vPortEnterCritical>
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052de:	b25b      	sxtb	r3, r3
 80052e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e4:	d103      	bne.n	80052ee <vQueueWaitForMessageRestricted+0x2a>
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052f4:	b25b      	sxtb	r3, r3
 80052f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052fa:	d103      	bne.n	8005304 <vQueueWaitForMessageRestricted+0x40>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005304:	f001 fcea 	bl	8006cdc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d106      	bne.n	800531e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	3324      	adds	r3, #36	@ 0x24
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fc45 	bl	8005ba8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	f7ff ff26 	bl	8005170 <prvUnlockQueue>
	}
 8005324:	bf00      	nop
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800532c:	b580      	push	{r7, lr}
 800532e:	b08e      	sub	sp, #56	@ 0x38
 8005330:	af04      	add	r7, sp, #16
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800533a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10b      	bne.n	8005358 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	623b      	str	r3, [r7, #32]
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	e7fd      	b.n	8005354 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <xTaskCreateStatic+0x4a>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	61fb      	str	r3, [r7, #28]
}
 8005370:	bf00      	nop
 8005372:	bf00      	nop
 8005374:	e7fd      	b.n	8005372 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005376:	235c      	movs	r3, #92	@ 0x5c
 8005378:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b5c      	cmp	r3, #92	@ 0x5c
 800537e:	d00b      	beq.n	8005398 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61bb      	str	r3, [r7, #24]
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005398:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800539a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01e      	beq.n	80053de <xTaskCreateStatic+0xb2>
 80053a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d01b      	beq.n	80053de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80053ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053b8:	2300      	movs	r3, #0
 80053ba:	9303      	str	r3, [sp, #12]
 80053bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053be:	9302      	str	r3, [sp, #8]
 80053c0:	f107 0314 	add.w	r3, r7, #20
 80053c4:	9301      	str	r3, [sp, #4]
 80053c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	68b9      	ldr	r1, [r7, #8]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 f850 	bl	8005476 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053d8:	f000 f8de 	bl	8005598 <prvAddNewTaskToReadyList>
 80053dc:	e001      	b.n	80053e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053e2:	697b      	ldr	r3, [r7, #20]
	}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3728      	adds	r7, #40	@ 0x28
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}

080053ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08c      	sub	sp, #48	@ 0x30
 80053f0:	af04      	add	r7, sp, #16
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053fc:	88fb      	ldrh	r3, [r7, #6]
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4618      	mov	r0, r3
 8005402:	f001 fd5b 	bl	8006ebc <pvPortMalloc>
 8005406:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00e      	beq.n	800542c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800540e:	205c      	movs	r0, #92	@ 0x5c
 8005410:	f001 fd54 	bl	8006ebc <pvPortMalloc>
 8005414:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d003      	beq.n	8005424 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
 8005422:	e005      	b.n	8005430 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005424:	6978      	ldr	r0, [r7, #20]
 8005426:	f001 fe17 	bl	8007058 <vPortFree>
 800542a:	e001      	b.n	8005430 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800542c:	2300      	movs	r3, #0
 800542e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800543e:	88fa      	ldrh	r2, [r7, #6]
 8005440:	2300      	movs	r3, #0
 8005442:	9303      	str	r3, [sp, #12]
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	9302      	str	r3, [sp, #8]
 8005448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800544a:	9301      	str	r3, [sp, #4]
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f80e 	bl	8005476 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800545a:	69f8      	ldr	r0, [r7, #28]
 800545c:	f000 f89c 	bl	8005598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005460:	2301      	movs	r3, #1
 8005462:	61bb      	str	r3, [r7, #24]
 8005464:	e002      	b.n	800546c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005466:	f04f 33ff 	mov.w	r3, #4294967295
 800546a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800546c:	69bb      	ldr	r3, [r7, #24]
	}
 800546e:	4618      	mov	r0, r3
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b088      	sub	sp, #32
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005486:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	461a      	mov	r2, r3
 800548e:	21a5      	movs	r1, #165	@ 0xa5
 8005490:	f001 ff3c 	bl	800730c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800549e:	3b01      	subs	r3, #1
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	f023 0307 	bic.w	r3, r3, #7
 80054ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	f003 0307 	and.w	r3, r3, #7
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	617b      	str	r3, [r7, #20]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d01f      	beq.n	8005516 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054d6:	2300      	movs	r3, #0
 80054d8:	61fb      	str	r3, [r7, #28]
 80054da:	e012      	b.n	8005502 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054dc:	68ba      	ldr	r2, [r7, #8]
 80054de:	69fb      	ldr	r3, [r7, #28]
 80054e0:	4413      	add	r3, r2
 80054e2:	7819      	ldrb	r1, [r3, #0]
 80054e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	3334      	adds	r3, #52	@ 0x34
 80054ec:	460a      	mov	r2, r1
 80054ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d006      	beq.n	800550a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	3301      	adds	r3, #1
 8005500:	61fb      	str	r3, [r7, #28]
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	2b0f      	cmp	r3, #15
 8005506:	d9e9      	bls.n	80054dc <prvInitialiseNewTask+0x66>
 8005508:	e000      	b.n	800550c <prvInitialiseNewTask+0x96>
			{
				break;
 800550a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005514:	e003      	b.n	800551e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005518:	2200      	movs	r2, #0
 800551a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	2b37      	cmp	r3, #55	@ 0x37
 8005522:	d901      	bls.n	8005528 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005524:	2337      	movs	r3, #55	@ 0x37
 8005526:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800552a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800552c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005532:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	2200      	movs	r2, #0
 8005538:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800553a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800553c:	3304      	adds	r3, #4
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fec8 	bl	80042d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005546:	3318      	adds	r3, #24
 8005548:	4618      	mov	r0, r3
 800554a:	f7fe fec3 	bl	80042d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800554e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005556:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800555e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005560:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005562:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005566:	2200      	movs	r2, #0
 8005568:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	68f9      	ldr	r1, [r7, #12]
 8005576:	69b8      	ldr	r0, [r7, #24]
 8005578:	f001 fa4e 	bl	8006a18 <pxPortInitialiseStack>
 800557c:	4602      	mov	r2, r0
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800558c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800558e:	bf00      	nop
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
	...

08005598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055a0:	f001 fb6a 	bl	8006c78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055a4:	4b2d      	ldr	r3, [pc, #180]	@ (800565c <prvAddNewTaskToReadyList+0xc4>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	3301      	adds	r3, #1
 80055aa:	4a2c      	ldr	r2, [pc, #176]	@ (800565c <prvAddNewTaskToReadyList+0xc4>)
 80055ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005660 <prvAddNewTaskToReadyList+0xc8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d109      	bne.n	80055ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <prvAddNewTaskToReadyList+0xc8>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055bc:	4b27      	ldr	r3, [pc, #156]	@ (800565c <prvAddNewTaskToReadyList+0xc4>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d110      	bne.n	80055e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055c4:	f000 fc1e 	bl	8005e04 <prvInitialiseTaskLists>
 80055c8:	e00d      	b.n	80055e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055ca:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <prvAddNewTaskToReadyList+0xcc>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055d2:	4b23      	ldr	r3, [pc, #140]	@ (8005660 <prvAddNewTaskToReadyList+0xc8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055dc:	429a      	cmp	r2, r3
 80055de:	d802      	bhi.n	80055e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005660 <prvAddNewTaskToReadyList+0xc8>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <prvAddNewTaskToReadyList+0xd0>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	3301      	adds	r3, #1
 80055ec:	4a1e      	ldr	r2, [pc, #120]	@ (8005668 <prvAddNewTaskToReadyList+0xd0>)
 80055ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005668 <prvAddNewTaskToReadyList+0xd0>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055fc:	4b1b      	ldr	r3, [pc, #108]	@ (800566c <prvAddNewTaskToReadyList+0xd4>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d903      	bls.n	800560c <prvAddNewTaskToReadyList+0x74>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005608:	4a18      	ldr	r2, [pc, #96]	@ (800566c <prvAddNewTaskToReadyList+0xd4>)
 800560a:	6013      	str	r3, [r2, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	4613      	mov	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4413      	add	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4a15      	ldr	r2, [pc, #84]	@ (8005670 <prvAddNewTaskToReadyList+0xd8>)
 800561a:	441a      	add	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3304      	adds	r3, #4
 8005620:	4619      	mov	r1, r3
 8005622:	4610      	mov	r0, r2
 8005624:	f7fe fe63 	bl	80042ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005628:	f001 fb58 	bl	8006cdc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800562c:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <prvAddNewTaskToReadyList+0xcc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00e      	beq.n	8005652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005634:	4b0a      	ldr	r3, [pc, #40]	@ (8005660 <prvAddNewTaskToReadyList+0xc8>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800563e:	429a      	cmp	r2, r3
 8005640:	d207      	bcs.n	8005652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005642:	4b0c      	ldr	r3, [pc, #48]	@ (8005674 <prvAddNewTaskToReadyList+0xdc>)
 8005644:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20002ea0 	.word	0x20002ea0
 8005660:	200029cc 	.word	0x200029cc
 8005664:	20002eac 	.word	0x20002eac
 8005668:	20002ebc 	.word	0x20002ebc
 800566c:	20002ea8 	.word	0x20002ea8
 8005670:	200029d0 	.word	0x200029d0
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005680:	2300      	movs	r3, #0
 8005682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d018      	beq.n	80056bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800568a:	4b14      	ldr	r3, [pc, #80]	@ (80056dc <vTaskDelay+0x64>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00b      	beq.n	80056aa <vTaskDelay+0x32>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60bb      	str	r3, [r7, #8]
}
 80056a4:	bf00      	nop
 80056a6:	bf00      	nop
 80056a8:	e7fd      	b.n	80056a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056aa:	f000 f883 	bl	80057b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056ae:	2100      	movs	r1, #0
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fe03 	bl	80062bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056b6:	f000 f88b 	bl	80057d0 <xTaskResumeAll>
 80056ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d107      	bne.n	80056d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80056c2:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <vTaskDelay+0x68>)
 80056c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056d2:	bf00      	nop
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	20002ec8 	.word	0x20002ec8
 80056e0:	e000ed04 	.word	0xe000ed04

080056e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	@ 0x28
 80056e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056f2:	463a      	mov	r2, r7
 80056f4:	1d39      	adds	r1, r7, #4
 80056f6:	f107 0308 	add.w	r3, r7, #8
 80056fa:	4618      	mov	r0, r3
 80056fc:	f7fe fd96 	bl	800422c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005700:	6839      	ldr	r1, [r7, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	9202      	str	r2, [sp, #8]
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	2300      	movs	r3, #0
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	2300      	movs	r3, #0
 8005710:	460a      	mov	r2, r1
 8005712:	4922      	ldr	r1, [pc, #136]	@ (800579c <vTaskStartScheduler+0xb8>)
 8005714:	4822      	ldr	r0, [pc, #136]	@ (80057a0 <vTaskStartScheduler+0xbc>)
 8005716:	f7ff fe09 	bl	800532c <xTaskCreateStatic>
 800571a:	4603      	mov	r3, r0
 800571c:	4a21      	ldr	r2, [pc, #132]	@ (80057a4 <vTaskStartScheduler+0xc0>)
 800571e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005720:	4b20      	ldr	r3, [pc, #128]	@ (80057a4 <vTaskStartScheduler+0xc0>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d002      	beq.n	800572e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005728:	2301      	movs	r3, #1
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e001      	b.n	8005732 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d102      	bne.n	800573e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005738:	f000 fe14 	bl	8006364 <xTimerCreateTimerTask>
 800573c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d116      	bne.n	8005772 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005748:	f383 8811 	msr	BASEPRI, r3
 800574c:	f3bf 8f6f 	isb	sy
 8005750:	f3bf 8f4f 	dsb	sy
 8005754:	613b      	str	r3, [r7, #16]
}
 8005756:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005758:	4b13      	ldr	r3, [pc, #76]	@ (80057a8 <vTaskStartScheduler+0xc4>)
 800575a:	f04f 32ff 	mov.w	r2, #4294967295
 800575e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005760:	4b12      	ldr	r3, [pc, #72]	@ (80057ac <vTaskStartScheduler+0xc8>)
 8005762:	2201      	movs	r2, #1
 8005764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005766:	4b12      	ldr	r3, [pc, #72]	@ (80057b0 <vTaskStartScheduler+0xcc>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800576c:	f001 f9e0 	bl	8006b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005770:	e00f      	b.n	8005792 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005778:	d10b      	bne.n	8005792 <vTaskStartScheduler+0xae>
	__asm volatile
 800577a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577e:	f383 8811 	msr	BASEPRI, r3
 8005782:	f3bf 8f6f 	isb	sy
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	60fb      	str	r3, [r7, #12]
}
 800578c:	bf00      	nop
 800578e:	bf00      	nop
 8005790:	e7fd      	b.n	800578e <vTaskStartScheduler+0xaa>
}
 8005792:	bf00      	nop
 8005794:	3718      	adds	r7, #24
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	08007c6c 	.word	0x08007c6c
 80057a0:	08005dd5 	.word	0x08005dd5
 80057a4:	20002ec4 	.word	0x20002ec4
 80057a8:	20002ec0 	.word	0x20002ec0
 80057ac:	20002eac 	.word	0x20002eac
 80057b0:	20002ea4 	.word	0x20002ea4

080057b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057b8:	4b04      	ldr	r3, [pc, #16]	@ (80057cc <vTaskSuspendAll+0x18>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	3301      	adds	r3, #1
 80057be:	4a03      	ldr	r2, [pc, #12]	@ (80057cc <vTaskSuspendAll+0x18>)
 80057c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057c2:	bf00      	nop
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20002ec8 	.word	0x20002ec8

080057d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b084      	sub	sp, #16
 80057d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057d6:	2300      	movs	r3, #0
 80057d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80057da:	2300      	movs	r3, #0
 80057dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80057de:	4b42      	ldr	r3, [pc, #264]	@ (80058e8 <xTaskResumeAll+0x118>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10b      	bne.n	80057fe <xTaskResumeAll+0x2e>
	__asm volatile
 80057e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ea:	f383 8811 	msr	BASEPRI, r3
 80057ee:	f3bf 8f6f 	isb	sy
 80057f2:	f3bf 8f4f 	dsb	sy
 80057f6:	603b      	str	r3, [r7, #0]
}
 80057f8:	bf00      	nop
 80057fa:	bf00      	nop
 80057fc:	e7fd      	b.n	80057fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057fe:	f001 fa3b 	bl	8006c78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005802:	4b39      	ldr	r3, [pc, #228]	@ (80058e8 <xTaskResumeAll+0x118>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3b01      	subs	r3, #1
 8005808:	4a37      	ldr	r2, [pc, #220]	@ (80058e8 <xTaskResumeAll+0x118>)
 800580a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800580c:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <xTaskResumeAll+0x118>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d162      	bne.n	80058da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005814:	4b35      	ldr	r3, [pc, #212]	@ (80058ec <xTaskResumeAll+0x11c>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05e      	beq.n	80058da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800581c:	e02f      	b.n	800587e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800581e:	4b34      	ldr	r3, [pc, #208]	@ (80058f0 <xTaskResumeAll+0x120>)
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3318      	adds	r3, #24
 800582a:	4618      	mov	r0, r3
 800582c:	f7fe fdbc 	bl	80043a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	3304      	adds	r3, #4
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fdb7 	bl	80043a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583e:	4b2d      	ldr	r3, [pc, #180]	@ (80058f4 <xTaskResumeAll+0x124>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	429a      	cmp	r2, r3
 8005844:	d903      	bls.n	800584e <xTaskResumeAll+0x7e>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584a:	4a2a      	ldr	r2, [pc, #168]	@ (80058f4 <xTaskResumeAll+0x124>)
 800584c:	6013      	str	r3, [r2, #0]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a27      	ldr	r2, [pc, #156]	@ (80058f8 <xTaskResumeAll+0x128>)
 800585c:	441a      	add	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3304      	adds	r3, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4610      	mov	r0, r2
 8005866:	f7fe fd42 	bl	80042ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800586e:	4b23      	ldr	r3, [pc, #140]	@ (80058fc <xTaskResumeAll+0x12c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	429a      	cmp	r2, r3
 8005876:	d302      	bcc.n	800587e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005878:	4b21      	ldr	r3, [pc, #132]	@ (8005900 <xTaskResumeAll+0x130>)
 800587a:	2201      	movs	r2, #1
 800587c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800587e:	4b1c      	ldr	r3, [pc, #112]	@ (80058f0 <xTaskResumeAll+0x120>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1cb      	bne.n	800581e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d001      	beq.n	8005890 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800588c:	f000 fb58 	bl	8005f40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005890:	4b1c      	ldr	r3, [pc, #112]	@ (8005904 <xTaskResumeAll+0x134>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d010      	beq.n	80058be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800589c:	f000 f846 	bl	800592c <xTaskIncrementTick>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80058a6:	4b16      	ldr	r3, [pc, #88]	@ (8005900 <xTaskResumeAll+0x130>)
 80058a8:	2201      	movs	r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1f1      	bne.n	800589c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80058b8:	4b12      	ldr	r3, [pc, #72]	@ (8005904 <xTaskResumeAll+0x134>)
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058be:	4b10      	ldr	r3, [pc, #64]	@ (8005900 <xTaskResumeAll+0x130>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005908 <xTaskResumeAll+0x138>)
 80058cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d0:	601a      	str	r2, [r3, #0]
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f001 f9ff 	bl	8006cdc <vPortExitCritical>

	return xAlreadyYielded;
 80058de:	68bb      	ldr	r3, [r7, #8]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20002ec8 	.word	0x20002ec8
 80058ec:	20002ea0 	.word	0x20002ea0
 80058f0:	20002e60 	.word	0x20002e60
 80058f4:	20002ea8 	.word	0x20002ea8
 80058f8:	200029d0 	.word	0x200029d0
 80058fc:	200029cc 	.word	0x200029cc
 8005900:	20002eb4 	.word	0x20002eb4
 8005904:	20002eb0 	.word	0x20002eb0
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005912:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <xTaskGetTickCount+0x1c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005918:	687b      	ldr	r3, [r7, #4]
}
 800591a:	4618      	mov	r0, r3
 800591c:	370c      	adds	r7, #12
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	20002ea4 	.word	0x20002ea4

0800592c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005932:	2300      	movs	r3, #0
 8005934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005936:	4b4f      	ldr	r3, [pc, #316]	@ (8005a74 <xTaskIncrementTick+0x148>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f040 8090 	bne.w	8005a60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005940:	4b4d      	ldr	r3, [pc, #308]	@ (8005a78 <xTaskIncrementTick+0x14c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	3301      	adds	r3, #1
 8005946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005948:	4a4b      	ldr	r2, [pc, #300]	@ (8005a78 <xTaskIncrementTick+0x14c>)
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d121      	bne.n	8005998 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005954:	4b49      	ldr	r3, [pc, #292]	@ (8005a7c <xTaskIncrementTick+0x150>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00b      	beq.n	8005976 <xTaskIncrementTick+0x4a>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	603b      	str	r3, [r7, #0]
}
 8005970:	bf00      	nop
 8005972:	bf00      	nop
 8005974:	e7fd      	b.n	8005972 <xTaskIncrementTick+0x46>
 8005976:	4b41      	ldr	r3, [pc, #260]	@ (8005a7c <xTaskIncrementTick+0x150>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	60fb      	str	r3, [r7, #12]
 800597c:	4b40      	ldr	r3, [pc, #256]	@ (8005a80 <xTaskIncrementTick+0x154>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a3e      	ldr	r2, [pc, #248]	@ (8005a7c <xTaskIncrementTick+0x150>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	4a3e      	ldr	r2, [pc, #248]	@ (8005a80 <xTaskIncrementTick+0x154>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6013      	str	r3, [r2, #0]
 800598a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a84 <xTaskIncrementTick+0x158>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	3301      	adds	r3, #1
 8005990:	4a3c      	ldr	r2, [pc, #240]	@ (8005a84 <xTaskIncrementTick+0x158>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	f000 fad4 	bl	8005f40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005998:	4b3b      	ldr	r3, [pc, #236]	@ (8005a88 <xTaskIncrementTick+0x15c>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d349      	bcc.n	8005a36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059a2:	4b36      	ldr	r3, [pc, #216]	@ (8005a7c <xTaskIncrementTick+0x150>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d104      	bne.n	80059b6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059ac:	4b36      	ldr	r3, [pc, #216]	@ (8005a88 <xTaskIncrementTick+0x15c>)
 80059ae:	f04f 32ff 	mov.w	r2, #4294967295
 80059b2:	601a      	str	r2, [r3, #0]
					break;
 80059b4:	e03f      	b.n	8005a36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b6:	4b31      	ldr	r3, [pc, #196]	@ (8005a7c <xTaskIncrementTick+0x150>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059c6:	693a      	ldr	r2, [r7, #16]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d203      	bcs.n	80059d6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059ce:	4a2e      	ldr	r2, [pc, #184]	@ (8005a88 <xTaskIncrementTick+0x15c>)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059d4:	e02f      	b.n	8005a36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	3304      	adds	r3, #4
 80059da:	4618      	mov	r0, r3
 80059dc:	f7fe fce4 	bl	80043a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	3318      	adds	r3, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7fe fcdb 	bl	80043a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f6:	4b25      	ldr	r3, [pc, #148]	@ (8005a8c <xTaskIncrementTick+0x160>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d903      	bls.n	8005a06 <xTaskIncrementTick+0xda>
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <xTaskIncrementTick+0x160>)
 8005a04:	6013      	str	r3, [r2, #0]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4a1f      	ldr	r2, [pc, #124]	@ (8005a90 <xTaskIncrementTick+0x164>)
 8005a14:	441a      	add	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	4619      	mov	r1, r3
 8005a1c:	4610      	mov	r0, r2
 8005a1e:	f7fe fc66 	bl	80042ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a26:	4b1b      	ldr	r3, [pc, #108]	@ (8005a94 <xTaskIncrementTick+0x168>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d3b8      	bcc.n	80059a2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005a30:	2301      	movs	r3, #1
 8005a32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a34:	e7b5      	b.n	80059a2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a36:	4b17      	ldr	r3, [pc, #92]	@ (8005a94 <xTaskIncrementTick+0x168>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a3c:	4914      	ldr	r1, [pc, #80]	@ (8005a90 <xTaskIncrementTick+0x164>)
 8005a3e:	4613      	mov	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	440b      	add	r3, r1
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d901      	bls.n	8005a52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a52:	4b11      	ldr	r3, [pc, #68]	@ (8005a98 <xTaskIncrementTick+0x16c>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d007      	beq.n	8005a6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	617b      	str	r3, [r7, #20]
 8005a5e:	e004      	b.n	8005a6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a60:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <xTaskIncrementTick+0x170>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3301      	adds	r3, #1
 8005a66:	4a0d      	ldr	r2, [pc, #52]	@ (8005a9c <xTaskIncrementTick+0x170>)
 8005a68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a6a:	697b      	ldr	r3, [r7, #20]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3718      	adds	r7, #24
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	20002ec8 	.word	0x20002ec8
 8005a78:	20002ea4 	.word	0x20002ea4
 8005a7c:	20002e58 	.word	0x20002e58
 8005a80:	20002e5c 	.word	0x20002e5c
 8005a84:	20002eb8 	.word	0x20002eb8
 8005a88:	20002ec0 	.word	0x20002ec0
 8005a8c:	20002ea8 	.word	0x20002ea8
 8005a90:	200029d0 	.word	0x200029d0
 8005a94:	200029cc 	.word	0x200029cc
 8005a98:	20002eb4 	.word	0x20002eb4
 8005a9c:	20002eb0 	.word	0x20002eb0

08005aa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aa6:	4b28      	ldr	r3, [pc, #160]	@ (8005b48 <vTaskSwitchContext+0xa8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005aae:	4b27      	ldr	r3, [pc, #156]	@ (8005b4c <vTaskSwitchContext+0xac>)
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ab4:	e042      	b.n	8005b3c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005ab6:	4b25      	ldr	r3, [pc, #148]	@ (8005b4c <vTaskSwitchContext+0xac>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005abc:	4b24      	ldr	r3, [pc, #144]	@ (8005b50 <vTaskSwitchContext+0xb0>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60fb      	str	r3, [r7, #12]
 8005ac2:	e011      	b.n	8005ae8 <vTaskSwitchContext+0x48>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <vTaskSwitchContext+0x42>
	__asm volatile
 8005aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	607b      	str	r3, [r7, #4]
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	e7fd      	b.n	8005ade <vTaskSwitchContext+0x3e>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	491a      	ldr	r1, [pc, #104]	@ (8005b54 <vTaskSwitchContext+0xb4>)
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	440b      	add	r3, r1
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0e3      	beq.n	8005ac4 <vTaskSwitchContext+0x24>
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4a13      	ldr	r2, [pc, #76]	@ (8005b54 <vTaskSwitchContext+0xb4>)
 8005b08:	4413      	add	r3, r2
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	685a      	ldr	r2, [r3, #4]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	605a      	str	r2, [r3, #4]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	3308      	adds	r3, #8
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d104      	bne.n	8005b2c <vTaskSwitchContext+0x8c>
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	605a      	str	r2, [r3, #4]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	4a09      	ldr	r2, [pc, #36]	@ (8005b58 <vTaskSwitchContext+0xb8>)
 8005b34:	6013      	str	r3, [r2, #0]
 8005b36:	4a06      	ldr	r2, [pc, #24]	@ (8005b50 <vTaskSwitchContext+0xb0>)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	20002ec8 	.word	0x20002ec8
 8005b4c:	20002eb4 	.word	0x20002eb4
 8005b50:	20002ea8 	.word	0x20002ea8
 8005b54:	200029d0 	.word	0x200029d0
 8005b58:	200029cc 	.word	0x200029cc

08005b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b84:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <vTaskPlaceOnEventList+0x48>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3318      	adds	r3, #24
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fe fbd2 	bl	8004336 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b92:	2101      	movs	r1, #1
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f000 fb91 	bl	80062bc <prvAddCurrentTaskToDelayedList>
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	200029cc 	.word	0x200029cc

08005ba8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10b      	bne.n	8005bd2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bbe:	f383 8811 	msr	BASEPRI, r3
 8005bc2:	f3bf 8f6f 	isb	sy
 8005bc6:	f3bf 8f4f 	dsb	sy
 8005bca:	617b      	str	r3, [r7, #20]
}
 8005bcc:	bf00      	nop
 8005bce:	bf00      	nop
 8005bd0:	e7fd      	b.n	8005bce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8005bfc <vTaskPlaceOnEventListRestricted+0x54>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3318      	adds	r3, #24
 8005bd8:	4619      	mov	r1, r3
 8005bda:	68f8      	ldr	r0, [r7, #12]
 8005bdc:	f7fe fb87 	bl	80042ee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005be6:	f04f 33ff 	mov.w	r3, #4294967295
 8005bea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005bec:	6879      	ldr	r1, [r7, #4]
 8005bee:	68b8      	ldr	r0, [r7, #8]
 8005bf0:	f000 fb64 	bl	80062bc <prvAddCurrentTaskToDelayedList>
	}
 8005bf4:	bf00      	nop
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200029cc 	.word	0x200029cc

08005c00 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10b      	bne.n	8005c2e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	60fb      	str	r3, [r7, #12]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	3318      	adds	r3, #24
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe fbb8 	bl	80043a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c38:	4b1d      	ldr	r3, [pc, #116]	@ (8005cb0 <xTaskRemoveFromEventList+0xb0>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d11d      	bne.n	8005c7c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	3304      	adds	r3, #4
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe fbaf 	bl	80043a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <xTaskRemoveFromEventList+0xb4>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d903      	bls.n	8005c5e <xTaskRemoveFromEventList+0x5e>
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	4a16      	ldr	r2, [pc, #88]	@ (8005cb4 <xTaskRemoveFromEventList+0xb4>)
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4a13      	ldr	r2, [pc, #76]	@ (8005cb8 <xTaskRemoveFromEventList+0xb8>)
 8005c6c:	441a      	add	r2, r3
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	4610      	mov	r0, r2
 8005c76:	f7fe fb3a 	bl	80042ee <vListInsertEnd>
 8005c7a:	e005      	b.n	8005c88 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3318      	adds	r3, #24
 8005c80:	4619      	mov	r1, r3
 8005c82:	480e      	ldr	r0, [pc, #56]	@ (8005cbc <xTaskRemoveFromEventList+0xbc>)
 8005c84:	f7fe fb33 	bl	80042ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <xTaskRemoveFromEventList+0xc0>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d905      	bls.n	8005ca2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c96:	2301      	movs	r3, #1
 8005c98:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <xTaskRemoveFromEventList+0xc4>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	e001      	b.n	8005ca6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ca6:	697b      	ldr	r3, [r7, #20]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3718      	adds	r7, #24
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	20002ec8 	.word	0x20002ec8
 8005cb4:	20002ea8 	.word	0x20002ea8
 8005cb8:	200029d0 	.word	0x200029d0
 8005cbc:	20002e60 	.word	0x20002e60
 8005cc0:	200029cc 	.word	0x200029cc
 8005cc4:	20002eb4 	.word	0x20002eb4

08005cc8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005cd0:	4b06      	ldr	r3, [pc, #24]	@ (8005cec <vTaskInternalSetTimeOutState+0x24>)
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005cd8:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <vTaskInternalSetTimeOutState+0x28>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	605a      	str	r2, [r3, #4]
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	20002eb8 	.word	0x20002eb8
 8005cf0:	20002ea4 	.word	0x20002ea4

08005cf4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10b      	bne.n	8005d1c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	613b      	str	r3, [r7, #16]
}
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10b      	bne.n	8005d3a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d26:	f383 8811 	msr	BASEPRI, r3
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	f3bf 8f4f 	dsb	sy
 8005d32:	60fb      	str	r3, [r7, #12]
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	e7fd      	b.n	8005d36 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005d3a:	f000 ff9d 	bl	8006c78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005db4 <xTaskCheckForTimeOut+0xc0>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d102      	bne.n	8005d5e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
 8005d5c:	e023      	b.n	8005da6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b15      	ldr	r3, [pc, #84]	@ (8005db8 <xTaskCheckForTimeOut+0xc4>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d007      	beq.n	8005d7a <xTaskCheckForTimeOut+0x86>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	69ba      	ldr	r2, [r7, #24]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d302      	bcc.n	8005d7a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d74:	2301      	movs	r3, #1
 8005d76:	61fb      	str	r3, [r7, #28]
 8005d78:	e015      	b.n	8005da6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d20b      	bcs.n	8005d9c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	1ad2      	subs	r2, r2, r3
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff ff99 	bl	8005cc8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	61fb      	str	r3, [r7, #28]
 8005d9a:	e004      	b.n	8005da6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005da6:	f000 ff99 	bl	8006cdc <vPortExitCritical>

	return xReturn;
 8005daa:	69fb      	ldr	r3, [r7, #28]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	20002ea4 	.word	0x20002ea4
 8005db8:	20002eb8 	.word	0x20002eb8

08005dbc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dc0:	4b03      	ldr	r3, [pc, #12]	@ (8005dd0 <vTaskMissedYield+0x14>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
}
 8005dc6:	bf00      	nop
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	20002eb4 	.word	0x20002eb4

08005dd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ddc:	f000 f852 	bl	8005e84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005de0:	4b06      	ldr	r3, [pc, #24]	@ (8005dfc <prvIdleTask+0x28>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d9f9      	bls.n	8005ddc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005de8:	4b05      	ldr	r3, [pc, #20]	@ (8005e00 <prvIdleTask+0x2c>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005df8:	e7f0      	b.n	8005ddc <prvIdleTask+0x8>
 8005dfa:	bf00      	nop
 8005dfc:	200029d0 	.word	0x200029d0
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b082      	sub	sp, #8
 8005e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]
 8005e0e:	e00c      	b.n	8005e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4613      	mov	r3, r2
 8005e14:	009b      	lsls	r3, r3, #2
 8005e16:	4413      	add	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <prvInitialiseTaskLists+0x60>)
 8005e1c:	4413      	add	r3, r2
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fe fa38 	bl	8004294 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3301      	adds	r3, #1
 8005e28:	607b      	str	r3, [r7, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b37      	cmp	r3, #55	@ 0x37
 8005e2e:	d9ef      	bls.n	8005e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e30:	480d      	ldr	r0, [pc, #52]	@ (8005e68 <prvInitialiseTaskLists+0x64>)
 8005e32:	f7fe fa2f 	bl	8004294 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e36:	480d      	ldr	r0, [pc, #52]	@ (8005e6c <prvInitialiseTaskLists+0x68>)
 8005e38:	f7fe fa2c 	bl	8004294 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e3c:	480c      	ldr	r0, [pc, #48]	@ (8005e70 <prvInitialiseTaskLists+0x6c>)
 8005e3e:	f7fe fa29 	bl	8004294 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e42:	480c      	ldr	r0, [pc, #48]	@ (8005e74 <prvInitialiseTaskLists+0x70>)
 8005e44:	f7fe fa26 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e48:	480b      	ldr	r0, [pc, #44]	@ (8005e78 <prvInitialiseTaskLists+0x74>)
 8005e4a:	f7fe fa23 	bl	8004294 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <prvInitialiseTaskLists+0x78>)
 8005e50:	4a05      	ldr	r2, [pc, #20]	@ (8005e68 <prvInitialiseTaskLists+0x64>)
 8005e52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e54:	4b0a      	ldr	r3, [pc, #40]	@ (8005e80 <prvInitialiseTaskLists+0x7c>)
 8005e56:	4a05      	ldr	r2, [pc, #20]	@ (8005e6c <prvInitialiseTaskLists+0x68>)
 8005e58:	601a      	str	r2, [r3, #0]
}
 8005e5a:	bf00      	nop
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	200029d0 	.word	0x200029d0
 8005e68:	20002e30 	.word	0x20002e30
 8005e6c:	20002e44 	.word	0x20002e44
 8005e70:	20002e60 	.word	0x20002e60
 8005e74:	20002e74 	.word	0x20002e74
 8005e78:	20002e8c 	.word	0x20002e8c
 8005e7c:	20002e58 	.word	0x20002e58
 8005e80:	20002e5c 	.word	0x20002e5c

08005e84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e8a:	e019      	b.n	8005ec0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e8c:	f000 fef4 	bl	8006c78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e90:	4b10      	ldr	r3, [pc, #64]	@ (8005ed4 <prvCheckTasksWaitingTermination+0x50>)
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fe fa83 	bl	80043a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ed8 <prvCheckTasksWaitingTermination+0x54>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	4a0b      	ldr	r2, [pc, #44]	@ (8005ed8 <prvCheckTasksWaitingTermination+0x54>)
 8005eaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005eac:	4b0b      	ldr	r3, [pc, #44]	@ (8005edc <prvCheckTasksWaitingTermination+0x58>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8005edc <prvCheckTasksWaitingTermination+0x58>)
 8005eb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005eb6:	f000 ff11 	bl	8006cdc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 f810 	bl	8005ee0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <prvCheckTasksWaitingTermination+0x58>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1e1      	bne.n	8005e8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	3708      	adds	r7, #8
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20002e74 	.word	0x20002e74
 8005ed8:	20002ea0 	.word	0x20002ea0
 8005edc:	20002e88 	.word	0x20002e88

08005ee0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d108      	bne.n	8005f04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f001 f8ae 	bl	8007058 <vPortFree>
				vPortFree( pxTCB );
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f8ab 	bl	8007058 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f02:	e019      	b.n	8005f38 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d103      	bne.n	8005f16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 f8a2 	bl	8007058 <vPortFree>
	}
 8005f14:	e010      	b.n	8005f38 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d00b      	beq.n	8005f38 <prvDeleteTCB+0x58>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	e7fd      	b.n	8005f34 <prvDeleteTCB+0x54>
	}
 8005f38:	bf00      	nop
 8005f3a:	3710      	adds	r7, #16
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f46:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <prvResetNextTaskUnblockTime+0x38>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	@ (8005f7c <prvResetNextTaskUnblockTime+0x3c>)
 8005f52:	f04f 32ff 	mov.w	r2, #4294967295
 8005f56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f58:	e008      	b.n	8005f6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f5a:	4b07      	ldr	r3, [pc, #28]	@ (8005f78 <prvResetNextTaskUnblockTime+0x38>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	4a04      	ldr	r2, [pc, #16]	@ (8005f7c <prvResetNextTaskUnblockTime+0x3c>)
 8005f6a:	6013      	str	r3, [r2, #0]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20002e58 	.word	0x20002e58
 8005f7c:	20002ec0 	.word	0x20002ec0

08005f80 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f86:	4b05      	ldr	r3, [pc, #20]	@ (8005f9c <xTaskGetCurrentTaskHandle+0x1c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f8c:	687b      	ldr	r3, [r7, #4]
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	370c      	adds	r7, #12
 8005f92:	46bd      	mov	sp, r7
 8005f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f98:	4770      	bx	lr
 8005f9a:	bf00      	nop
 8005f9c:	200029cc 	.word	0x200029cc

08005fa0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8005fd4 <xTaskGetSchedulerState+0x34>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d102      	bne.n	8005fb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	e008      	b.n	8005fc6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb4:	4b08      	ldr	r3, [pc, #32]	@ (8005fd8 <xTaskGetSchedulerState+0x38>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d102      	bne.n	8005fc2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	e001      	b.n	8005fc6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fc6:	687b      	ldr	r3, [r7, #4]
	}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr
 8005fd4:	20002eac 	.word	0x20002eac
 8005fd8:	20002ec8 	.word	0x20002ec8

08005fdc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b084      	sub	sp, #16
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d051      	beq.n	8006096 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80060a0 <xTaskPriorityInherit+0xc4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d241      	bcs.n	8006084 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	2b00      	cmp	r3, #0
 8006006:	db06      	blt.n	8006016 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006008:	4b25      	ldr	r3, [pc, #148]	@ (80060a0 <xTaskPriorityInherit+0xc4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6959      	ldr	r1, [r3, #20]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601e:	4613      	mov	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4a1f      	ldr	r2, [pc, #124]	@ (80060a4 <xTaskPriorityInherit+0xc8>)
 8006028:	4413      	add	r3, r2
 800602a:	4299      	cmp	r1, r3
 800602c:	d122      	bne.n	8006074 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	3304      	adds	r3, #4
 8006032:	4618      	mov	r0, r3
 8006034:	f7fe f9b8 	bl	80043a8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006038:	4b19      	ldr	r3, [pc, #100]	@ (80060a0 <xTaskPriorityInherit+0xc4>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006046:	4b18      	ldr	r3, [pc, #96]	@ (80060a8 <xTaskPriorityInherit+0xcc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d903      	bls.n	8006056 <xTaskPriorityInherit+0x7a>
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	4a15      	ldr	r2, [pc, #84]	@ (80060a8 <xTaskPriorityInherit+0xcc>)
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4a10      	ldr	r2, [pc, #64]	@ (80060a4 <xTaskPriorityInherit+0xc8>)
 8006064:	441a      	add	r2, r3
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7fe f93e 	bl	80042ee <vListInsertEnd>
 8006072:	e004      	b.n	800607e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006074:	4b0a      	ldr	r3, [pc, #40]	@ (80060a0 <xTaskPriorityInherit+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e008      	b.n	8006096 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006088:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <xTaskPriorityInherit+0xc4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800608e:	429a      	cmp	r2, r3
 8006090:	d201      	bcs.n	8006096 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006096:	68fb      	ldr	r3, [r7, #12]
	}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	200029cc 	.word	0x200029cc
 80060a4:	200029d0 	.word	0x200029d0
 80060a8:	20002ea8 	.word	0x20002ea8

080060ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060b8:	2300      	movs	r3, #0
 80060ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d058      	beq.n	8006174 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060c2:	4b2f      	ldr	r3, [pc, #188]	@ (8006180 <xTaskPriorityDisinherit+0xd4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d00b      	beq.n	80060e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	60fb      	str	r3, [r7, #12]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10b      	bne.n	8006104 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	60bb      	str	r3, [r7, #8]
}
 80060fe:	bf00      	nop
 8006100:	bf00      	nop
 8006102:	e7fd      	b.n	8006100 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	1e5a      	subs	r2, r3, #1
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006116:	429a      	cmp	r2, r3
 8006118:	d02c      	beq.n	8006174 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d128      	bne.n	8006174 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3304      	adds	r3, #4
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe f93e 	bl	80043a8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006138:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006144:	4b0f      	ldr	r3, [pc, #60]	@ (8006184 <xTaskPriorityDisinherit+0xd8>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	429a      	cmp	r2, r3
 800614a:	d903      	bls.n	8006154 <xTaskPriorityDisinherit+0xa8>
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006150:	4a0c      	ldr	r2, [pc, #48]	@ (8006184 <xTaskPriorityDisinherit+0xd8>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <xTaskPriorityDisinherit+0xdc>)
 8006162:	441a      	add	r2, r3
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	3304      	adds	r3, #4
 8006168:	4619      	mov	r1, r3
 800616a:	4610      	mov	r0, r2
 800616c:	f7fe f8bf 	bl	80042ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006170:	2301      	movs	r3, #1
 8006172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006174:	697b      	ldr	r3, [r7, #20]
	}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200029cc 	.word	0x200029cc
 8006184:	20002ea8 	.word	0x20002ea8
 8006188:	200029d0 	.word	0x200029d0

0800618c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800619a:	2301      	movs	r3, #1
 800619c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d06c      	beq.n	800627e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10b      	bne.n	80061c4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b0:	f383 8811 	msr	BASEPRI, r3
 80061b4:	f3bf 8f6f 	isb	sy
 80061b8:	f3bf 8f4f 	dsb	sy
 80061bc:	60fb      	str	r3, [r7, #12]
}
 80061be:	bf00      	nop
 80061c0:	bf00      	nop
 80061c2:	e7fd      	b.n	80061c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061c8:	683a      	ldr	r2, [r7, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d902      	bls.n	80061d4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	e002      	b.n	80061da <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80061d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d04c      	beq.n	800627e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d147      	bne.n	800627e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061ee:	4b26      	ldr	r3, [pc, #152]	@ (8006288 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d10b      	bne.n	8006210 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	60bb      	str	r3, [r7, #8]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006214:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	db04      	blt.n	800622e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800622e:	69bb      	ldr	r3, [r7, #24]
 8006230:	6959      	ldr	r1, [r3, #20]
 8006232:	693a      	ldr	r2, [r7, #16]
 8006234:	4613      	mov	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4a13      	ldr	r2, [pc, #76]	@ (800628c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800623e:	4413      	add	r3, r2
 8006240:	4299      	cmp	r1, r3
 8006242:	d11c      	bne.n	800627e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	3304      	adds	r3, #4
 8006248:	4618      	mov	r0, r3
 800624a:	f7fe f8ad 	bl	80043a8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006252:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d903      	bls.n	8006262 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	4a0c      	ldr	r2, [pc, #48]	@ (8006290 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006266:	4613      	mov	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	4413      	add	r3, r2
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4a07      	ldr	r2, [pc, #28]	@ (800628c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006270:	441a      	add	r2, r3
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	3304      	adds	r3, #4
 8006276:	4619      	mov	r1, r3
 8006278:	4610      	mov	r0, r2
 800627a:	f7fe f838 	bl	80042ee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800627e:	bf00      	nop
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	200029cc 	.word	0x200029cc
 800628c:	200029d0 	.word	0x200029d0
 8006290:	20002ea8 	.word	0x20002ea8

08006294 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006294:	b480      	push	{r7}
 8006296:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006298:	4b07      	ldr	r3, [pc, #28]	@ (80062b8 <pvTaskIncrementMutexHeldCount+0x24>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80062a6:	3201      	adds	r2, #1
 80062a8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80062aa:	4b03      	ldr	r3, [pc, #12]	@ (80062b8 <pvTaskIncrementMutexHeldCount+0x24>)
 80062ac:	681b      	ldr	r3, [r3, #0]
	}
 80062ae:	4618      	mov	r0, r3
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	200029cc 	.word	0x200029cc

080062bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062c6:	4b21      	ldr	r3, [pc, #132]	@ (800634c <prvAddCurrentTaskToDelayedList+0x90>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062cc:	4b20      	ldr	r3, [pc, #128]	@ (8006350 <prvAddCurrentTaskToDelayedList+0x94>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	3304      	adds	r3, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe f868 	bl	80043a8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062de:	d10a      	bne.n	80062f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062e6:	4b1a      	ldr	r3, [pc, #104]	@ (8006350 <prvAddCurrentTaskToDelayedList+0x94>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3304      	adds	r3, #4
 80062ec:	4619      	mov	r1, r3
 80062ee:	4819      	ldr	r0, [pc, #100]	@ (8006354 <prvAddCurrentTaskToDelayedList+0x98>)
 80062f0:	f7fd fffd 	bl	80042ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062f4:	e026      	b.n	8006344 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4413      	add	r3, r2
 80062fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062fe:	4b14      	ldr	r3, [pc, #80]	@ (8006350 <prvAddCurrentTaskToDelayedList+0x94>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	429a      	cmp	r2, r3
 800630c:	d209      	bcs.n	8006322 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800630e:	4b12      	ldr	r3, [pc, #72]	@ (8006358 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	4b0f      	ldr	r3, [pc, #60]	@ (8006350 <prvAddCurrentTaskToDelayedList+0x94>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3304      	adds	r3, #4
 8006318:	4619      	mov	r1, r3
 800631a:	4610      	mov	r0, r2
 800631c:	f7fe f80b 	bl	8004336 <vListInsert>
}
 8006320:	e010      	b.n	8006344 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006322:	4b0e      	ldr	r3, [pc, #56]	@ (800635c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b0a      	ldr	r3, [pc, #40]	@ (8006350 <prvAddCurrentTaskToDelayedList+0x94>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3304      	adds	r3, #4
 800632c:	4619      	mov	r1, r3
 800632e:	4610      	mov	r0, r2
 8006330:	f7fe f801 	bl	8004336 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006334:	4b0a      	ldr	r3, [pc, #40]	@ (8006360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68ba      	ldr	r2, [r7, #8]
 800633a:	429a      	cmp	r2, r3
 800633c:	d202      	bcs.n	8006344 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800633e:	4a08      	ldr	r2, [pc, #32]	@ (8006360 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	6013      	str	r3, [r2, #0]
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20002ea4 	.word	0x20002ea4
 8006350:	200029cc 	.word	0x200029cc
 8006354:	20002e8c 	.word	0x20002e8c
 8006358:	20002e5c 	.word	0x20002e5c
 800635c:	20002e58 	.word	0x20002e58
 8006360:	20002ec0 	.word	0x20002ec0

08006364 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	@ 0x28
 8006368:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800636a:	2300      	movs	r3, #0
 800636c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800636e:	f000 fb13 	bl	8006998 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006372:	4b1d      	ldr	r3, [pc, #116]	@ (80063e8 <xTimerCreateTimerTask+0x84>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d021      	beq.n	80063be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006382:	1d3a      	adds	r2, r7, #4
 8006384:	f107 0108 	add.w	r1, r7, #8
 8006388:	f107 030c 	add.w	r3, r7, #12
 800638c:	4618      	mov	r0, r3
 800638e:	f7fd ff67 	bl	8004260 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006392:	6879      	ldr	r1, [r7, #4]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	68fa      	ldr	r2, [r7, #12]
 8006398:	9202      	str	r2, [sp, #8]
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	2302      	movs	r3, #2
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	2300      	movs	r3, #0
 80063a2:	460a      	mov	r2, r1
 80063a4:	4911      	ldr	r1, [pc, #68]	@ (80063ec <xTimerCreateTimerTask+0x88>)
 80063a6:	4812      	ldr	r0, [pc, #72]	@ (80063f0 <xTimerCreateTimerTask+0x8c>)
 80063a8:	f7fe ffc0 	bl	800532c <xTaskCreateStatic>
 80063ac:	4603      	mov	r3, r0
 80063ae:	4a11      	ldr	r2, [pc, #68]	@ (80063f4 <xTimerCreateTimerTask+0x90>)
 80063b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063b2:	4b10      	ldr	r3, [pc, #64]	@ (80063f4 <xTimerCreateTimerTask+0x90>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d001      	beq.n	80063be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063ba:	2301      	movs	r3, #1
 80063bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10b      	bne.n	80063dc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	613b      	str	r3, [r7, #16]
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	e7fd      	b.n	80063d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063dc:	697b      	ldr	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20002efc 	.word	0x20002efc
 80063ec:	08007c74 	.word	0x08007c74
 80063f0:	08006531 	.word	0x08006531
 80063f4:	20002f00 	.word	0x20002f00

080063f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b08a      	sub	sp, #40	@ 0x28
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006406:	2300      	movs	r3, #0
 8006408:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10b      	bne.n	8006428 <xTimerGenericCommand+0x30>
	__asm volatile
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	623b      	str	r3, [r7, #32]
}
 8006422:	bf00      	nop
 8006424:	bf00      	nop
 8006426:	e7fd      	b.n	8006424 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006428:	4b19      	ldr	r3, [pc, #100]	@ (8006490 <xTimerGenericCommand+0x98>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02a      	beq.n	8006486 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b05      	cmp	r3, #5
 8006440:	dc18      	bgt.n	8006474 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006442:	f7ff fdad 	bl	8005fa0 <xTaskGetSchedulerState>
 8006446:	4603      	mov	r3, r0
 8006448:	2b02      	cmp	r3, #2
 800644a:	d109      	bne.n	8006460 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800644c:	4b10      	ldr	r3, [pc, #64]	@ (8006490 <xTimerGenericCommand+0x98>)
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	f107 0110 	add.w	r1, r7, #16
 8006454:	2300      	movs	r3, #0
 8006456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006458:	f7fe f9ce 	bl	80047f8 <xQueueGenericSend>
 800645c:	6278      	str	r0, [r7, #36]	@ 0x24
 800645e:	e012      	b.n	8006486 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006460:	4b0b      	ldr	r3, [pc, #44]	@ (8006490 <xTimerGenericCommand+0x98>)
 8006462:	6818      	ldr	r0, [r3, #0]
 8006464:	f107 0110 	add.w	r1, r7, #16
 8006468:	2300      	movs	r3, #0
 800646a:	2200      	movs	r2, #0
 800646c:	f7fe f9c4 	bl	80047f8 <xQueueGenericSend>
 8006470:	6278      	str	r0, [r7, #36]	@ 0x24
 8006472:	e008      	b.n	8006486 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006474:	4b06      	ldr	r3, [pc, #24]	@ (8006490 <xTimerGenericCommand+0x98>)
 8006476:	6818      	ldr	r0, [r3, #0]
 8006478:	f107 0110 	add.w	r1, r7, #16
 800647c:	2300      	movs	r3, #0
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	f7fe fabc 	bl	80049fc <xQueueGenericSendFromISR>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006488:	4618      	mov	r0, r3
 800648a:	3728      	adds	r7, #40	@ 0x28
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	20002efc 	.word	0x20002efc

08006494 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b088      	sub	sp, #32
 8006498:	af02      	add	r7, sp, #8
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800649e:	4b23      	ldr	r3, [pc, #140]	@ (800652c <prvProcessExpiredTimer+0x98>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	3304      	adds	r3, #4
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7fd ff7b 	bl	80043a8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064b8:	f003 0304 	and.w	r3, r3, #4
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d023      	beq.n	8006508 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	699a      	ldr	r2, [r3, #24]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	18d1      	adds	r1, r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	6978      	ldr	r0, [r7, #20]
 80064ce:	f000 f8d5 	bl	800667c <prvInsertTimerInActiveList>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d020      	beq.n	800651a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	2100      	movs	r1, #0
 80064e2:	6978      	ldr	r0, [r7, #20]
 80064e4:	f7ff ff88 	bl	80063f8 <xTimerGenericCommand>
 80064e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d114      	bne.n	800651a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	60fb      	str	r3, [r7, #12]
}
 8006502:	bf00      	nop
 8006504:	bf00      	nop
 8006506:	e7fd      	b.n	8006504 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800650e:	f023 0301 	bic.w	r3, r3, #1
 8006512:	b2da      	uxtb	r2, r3
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	6978      	ldr	r0, [r7, #20]
 8006520:	4798      	blx	r3
}
 8006522:	bf00      	nop
 8006524:	3718      	adds	r7, #24
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	20002ef4 	.word	0x20002ef4

08006530 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	4618      	mov	r0, r3
 800653e:	f000 f859 	bl	80065f4 <prvGetNextExpireTime>
 8006542:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	4619      	mov	r1, r3
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f000 f805 	bl	8006558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800654e:	f000 f8d7 	bl	8006700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006552:	bf00      	nop
 8006554:	e7f0      	b.n	8006538 <prvTimerTask+0x8>
	...

08006558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006562:	f7ff f927 	bl	80057b4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f866 	bl	800663c <prvSampleTimeNow>
 8006570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d130      	bne.n	80065da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <prvProcessTimerOrBlockTask+0x3c>
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d806      	bhi.n	8006594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006586:	f7ff f923 	bl	80057d0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff81 	bl	8006494 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006592:	e024      	b.n	80065de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800659a:	4b13      	ldr	r3, [pc, #76]	@ (80065e8 <prvProcessTimerOrBlockTask+0x90>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <prvProcessTimerOrBlockTask+0x50>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <prvProcessTimerOrBlockTask+0x52>
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065ac:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <prvProcessTimerOrBlockTask+0x94>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7fe fe83 	bl	80052c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065be:	f7ff f907 	bl	80057d0 <xTaskResumeAll>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065c8:	4b09      	ldr	r3, [pc, #36]	@ (80065f0 <prvProcessTimerOrBlockTask+0x98>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
}
 80065d8:	e001      	b.n	80065de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065da:	f7ff f8f9 	bl	80057d0 <xTaskResumeAll>
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20002ef8 	.word	0x20002ef8
 80065ec:	20002efc 	.word	0x20002efc
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006638 <prvGetNextExpireTime+0x44>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <prvGetNextExpireTime+0x16>
 8006606:	2201      	movs	r2, #1
 8006608:	e000      	b.n	800660c <prvGetNextExpireTime+0x18>
 800660a:	2200      	movs	r2, #0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006618:	4b07      	ldr	r3, [pc, #28]	@ (8006638 <prvGetNextExpireTime+0x44>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e001      	b.n	8006628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20002ef4 	.word	0x20002ef4

0800663c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006644:	f7ff f962 	bl	800590c <xTaskGetTickCount>
 8006648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800664a:	4b0b      	ldr	r3, [pc, #44]	@ (8006678 <prvSampleTimeNow+0x3c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	429a      	cmp	r2, r3
 8006652:	d205      	bcs.n	8006660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006654:	f000 f93a 	bl	80068cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e002      	b.n	8006666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006666:	4a04      	ldr	r2, [pc, #16]	@ (8006678 <prvSampleTimeNow+0x3c>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20002f04 	.word	0x20002f04

0800667c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d812      	bhi.n	80066c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e01b      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <prvInsertTimerInActiveList+0x7c>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fd fe38 	bl	8004336 <vListInsert>
 80066c6:	e012      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d206      	bcs.n	80066de <prvInsertTimerInActiveList+0x62>
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e007      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066de:	4b07      	ldr	r3, [pc, #28]	@ (80066fc <prvInsertTimerInActiveList+0x80>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7fd fe24 	bl	8004336 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20002ef8 	.word	0x20002ef8
 80066fc:	20002ef4 	.word	0x20002ef4

08006700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	@ 0x38
 8006704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006706:	e0ce      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da19      	bge.n	8006742 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	3304      	adds	r3, #4
 8006712:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10b      	bne.n	8006732 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61fb      	str	r3, [r7, #28]
}
 800672c:	bf00      	nop
 800672e:	bf00      	nop
 8006730:	e7fd      	b.n	800672e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006738:	6850      	ldr	r0, [r2, #4]
 800673a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800673c:	6892      	ldr	r2, [r2, #8]
 800673e:	4611      	mov	r1, r2
 8006740:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	f2c0 80ae 	blt.w	80068a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800674e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d004      	beq.n	8006760 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fd fe24 	bl	80043a8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006760:	463b      	mov	r3, r7
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff ff6a 	bl	800663c <prvSampleTimeNow>
 8006768:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b09      	cmp	r3, #9
 800676e:	f200 8097 	bhi.w	80068a0 <prvProcessReceivedCommands+0x1a0>
 8006772:	a201      	add	r2, pc, #4	@ (adr r2, 8006778 <prvProcessReceivedCommands+0x78>)
 8006774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067a1 	.word	0x080067a1
 8006784:	08006817 	.word	0x08006817
 8006788:	0800682b 	.word	0x0800682b
 800678c:	08006877 	.word	0x08006877
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067a1 	.word	0x080067a1
 8006798:	08006817 	.word	0x08006817
 800679c:	0800682b 	.word	0x0800682b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	18d1      	adds	r1, r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c0:	f7ff ff5c 	bl	800667c <prvInsertTimerInActiveList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d06c      	beq.n	80068a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d061      	beq.n	80068a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	441a      	add	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	2100      	movs	r1, #0
 80067f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f2:	f7ff fe01 	bl	80063f8 <xTimerGenericCommand>
 80067f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d152      	bne.n	80068a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	61bb      	str	r3, [r7, #24]
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	e7fd      	b.n	8006812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006818:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800681c:	f023 0301 	bic.w	r3, r3, #1
 8006820:	b2da      	uxtb	r2, r3
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006828:	e03d      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800682a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	b2da      	uxtb	r2, r3
 8006836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006838:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10b      	bne.n	8006862 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	617b      	str	r3, [r7, #20]
}
 800685c:	bf00      	nop
 800685e:	bf00      	nop
 8006860:	e7fd      	b.n	800685e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	18d1      	adds	r1, r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800686e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006870:	f7ff ff04 	bl	800667c <prvInsertTimerInActiveList>
					break;
 8006874:	e017      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d103      	bne.n	800688c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006884:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006886:	f000 fbe7 	bl	8007058 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800688a:	e00c      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	b2da      	uxtb	r2, r3
 8006898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800689e:	e002      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <prvProcessReceivedCommands+0x1a6>
					break;
 80068a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80068a6:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <prvProcessReceivedCommands+0x1c8>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1d39      	adds	r1, r7, #4
 80068ac:	2200      	movs	r2, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f7fe f942 	bl	8004b38 <xQueueReceive>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f47f af26 	bne.w	8006708 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80068bc:	bf00      	nop
 80068be:	bf00      	nop
 80068c0:	3730      	adds	r7, #48	@ 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20002efc 	.word	0x20002efc

080068cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068d2:	e049      	b.n	8006968 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068de:	4b2c      	ldr	r3, [pc, #176]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3304      	adds	r3, #4
 80068ec:	4618      	mov	r0, r3
 80068ee:	f7fd fd5b 	bl	80043a8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02f      	beq.n	8006968 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	693a      	ldr	r2, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	429a      	cmp	r2, r3
 8006918:	d90e      	bls.n	8006938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	68fa      	ldr	r2, [r7, #12]
 8006924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006926:	4b1a      	ldr	r3, [pc, #104]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3304      	adds	r3, #4
 800692e:	4619      	mov	r1, r3
 8006930:	4610      	mov	r0, r2
 8006932:	f7fd fd00 	bl	8004336 <vListInsert>
 8006936:	e017      	b.n	8006968 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006938:	2300      	movs	r3, #0
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	2100      	movs	r1, #0
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fd58 	bl	80063f8 <xTimerGenericCommand>
 8006948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10b      	bne.n	8006968 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	603b      	str	r3, [r7, #0]
}
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006968:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1b0      	bne.n	80068d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006972:	4b07      	ldr	r3, [pc, #28]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006978:	4b06      	ldr	r3, [pc, #24]	@ (8006994 <prvSwitchTimerLists+0xc8>)
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a04      	ldr	r2, [pc, #16]	@ (8006990 <prvSwitchTimerLists+0xc4>)
 800697e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006980:	4a04      	ldr	r2, [pc, #16]	@ (8006994 <prvSwitchTimerLists+0xc8>)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6013      	str	r3, [r2, #0]
}
 8006986:	bf00      	nop
 8006988:	3718      	adds	r7, #24
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	20002ef4 	.word	0x20002ef4
 8006994:	20002ef8 	.word	0x20002ef8

08006998 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800699e:	f000 f96b 	bl	8006c78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80069a2:	4b15      	ldr	r3, [pc, #84]	@ (80069f8 <prvCheckForValidListAndQueue+0x60>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d120      	bne.n	80069ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80069aa:	4814      	ldr	r0, [pc, #80]	@ (80069fc <prvCheckForValidListAndQueue+0x64>)
 80069ac:	f7fd fc72 	bl	8004294 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069b0:	4813      	ldr	r0, [pc, #76]	@ (8006a00 <prvCheckForValidListAndQueue+0x68>)
 80069b2:	f7fd fc6f 	bl	8004294 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069b6:	4b13      	ldr	r3, [pc, #76]	@ (8006a04 <prvCheckForValidListAndQueue+0x6c>)
 80069b8:	4a10      	ldr	r2, [pc, #64]	@ (80069fc <prvCheckForValidListAndQueue+0x64>)
 80069ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069bc:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <prvCheckForValidListAndQueue+0x70>)
 80069be:	4a10      	ldr	r2, [pc, #64]	@ (8006a00 <prvCheckForValidListAndQueue+0x68>)
 80069c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069c2:	2300      	movs	r3, #0
 80069c4:	9300      	str	r3, [sp, #0]
 80069c6:	4b11      	ldr	r3, [pc, #68]	@ (8006a0c <prvCheckForValidListAndQueue+0x74>)
 80069c8:	4a11      	ldr	r2, [pc, #68]	@ (8006a10 <prvCheckForValidListAndQueue+0x78>)
 80069ca:	2110      	movs	r1, #16
 80069cc:	200a      	movs	r0, #10
 80069ce:	f7fd fd7f 	bl	80044d0 <xQueueGenericCreateStatic>
 80069d2:	4603      	mov	r3, r0
 80069d4:	4a08      	ldr	r2, [pc, #32]	@ (80069f8 <prvCheckForValidListAndQueue+0x60>)
 80069d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069d8:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <prvCheckForValidListAndQueue+0x60>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069e0:	4b05      	ldr	r3, [pc, #20]	@ (80069f8 <prvCheckForValidListAndQueue+0x60>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	490b      	ldr	r1, [pc, #44]	@ (8006a14 <prvCheckForValidListAndQueue+0x7c>)
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7fe fc42 	bl	8005270 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069ec:	f000 f976 	bl	8006cdc <vPortExitCritical>
}
 80069f0:	bf00      	nop
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	20002efc 	.word	0x20002efc
 80069fc:	20002ecc 	.word	0x20002ecc
 8006a00:	20002ee0 	.word	0x20002ee0
 8006a04:	20002ef4 	.word	0x20002ef4
 8006a08:	20002ef8 	.word	0x20002ef8
 8006a0c:	20002fa8 	.word	0x20002fa8
 8006a10:	20002f08 	.word	0x20002f08
 8006a14:	08007c7c 	.word	0x08007c7c

08006a18 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b085      	sub	sp, #20
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	3b04      	subs	r3, #4
 8006a28:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	3b04      	subs	r3, #4
 8006a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f023 0201 	bic.w	r2, r3, #1
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3b04      	subs	r3, #4
 8006a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a48:	4a0c      	ldr	r2, [pc, #48]	@ (8006a7c <pxPortInitialiseStack+0x64>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3b14      	subs	r3, #20
 8006a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	3b04      	subs	r3, #4
 8006a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f06f 0202 	mvn.w	r2, #2
 8006a66:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3b20      	subs	r3, #32
 8006a6c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr
 8006a7c:	08006a81 	.word	0x08006a81

08006a80 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	b085      	sub	sp, #20
 8006a84:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a86:	2300      	movs	r3, #0
 8006a88:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a8a:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <prvTaskExitError+0x58>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a92:	d00b      	beq.n	8006aac <prvTaskExitError+0x2c>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	60fb      	str	r3, [r7, #12]
}
 8006aa6:	bf00      	nop
 8006aa8:	bf00      	nop
 8006aaa:	e7fd      	b.n	8006aa8 <prvTaskExitError+0x28>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	60bb      	str	r3, [r7, #8]
}
 8006abe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ac0:	bf00      	nop
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d0fc      	beq.n	8006ac2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	2000000c 	.word	0x2000000c
 8006adc:	00000000 	.word	0x00000000

08006ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ae0:	4b07      	ldr	r3, [pc, #28]	@ (8006b00 <pxCurrentTCBConst2>)
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6808      	ldr	r0, [r1, #0]
 8006ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aea:	f380 8809 	msr	PSP, r0
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f04f 0000 	mov.w	r0, #0
 8006af6:	f380 8811 	msr	BASEPRI, r0
 8006afa:	4770      	bx	lr
 8006afc:	f3af 8000 	nop.w

08006b00 <pxCurrentTCBConst2>:
 8006b00:	200029cc 	.word	0x200029cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006b04:	bf00      	nop
 8006b06:	bf00      	nop

08006b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006b08:	4808      	ldr	r0, [pc, #32]	@ (8006b2c <prvPortStartFirstTask+0x24>)
 8006b0a:	6800      	ldr	r0, [r0, #0]
 8006b0c:	6800      	ldr	r0, [r0, #0]
 8006b0e:	f380 8808 	msr	MSP, r0
 8006b12:	f04f 0000 	mov.w	r0, #0
 8006b16:	f380 8814 	msr	CONTROL, r0
 8006b1a:	b662      	cpsie	i
 8006b1c:	b661      	cpsie	f
 8006b1e:	f3bf 8f4f 	dsb	sy
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	df00      	svc	0
 8006b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b2a:	bf00      	nop
 8006b2c:	e000ed08 	.word	0xe000ed08

08006b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b36:	4b47      	ldr	r3, [pc, #284]	@ (8006c54 <xPortStartScheduler+0x124>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a47      	ldr	r2, [pc, #284]	@ (8006c58 <xPortStartScheduler+0x128>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d10b      	bne.n	8006b58 <xPortStartScheduler+0x28>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	613b      	str	r3, [r7, #16]
}
 8006b52:	bf00      	nop
 8006b54:	bf00      	nop
 8006b56:	e7fd      	b.n	8006b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b58:	4b3e      	ldr	r3, [pc, #248]	@ (8006c54 <xPortStartScheduler+0x124>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a3f      	ldr	r2, [pc, #252]	@ (8006c5c <xPortStartScheduler+0x12c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d10b      	bne.n	8006b7a <xPortStartScheduler+0x4a>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60fb      	str	r3, [r7, #12]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b7a:	4b39      	ldr	r3, [pc, #228]	@ (8006c60 <xPortStartScheduler+0x130>)
 8006b7c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	22ff      	movs	r2, #255	@ 0xff
 8006b8a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	4b31      	ldr	r3, [pc, #196]	@ (8006c64 <xPortStartScheduler+0x134>)
 8006ba0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006ba2:	4b31      	ldr	r3, [pc, #196]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006ba4:	2207      	movs	r2, #7
 8006ba6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ba8:	e009      	b.n	8006bbe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006baa:	4b2f      	ldr	r3, [pc, #188]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bb2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	b2db      	uxtb	r3, r3
 8006bbc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006bbe:	78fb      	ldrb	r3, [r7, #3]
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc6:	2b80      	cmp	r3, #128	@ 0x80
 8006bc8:	d0ef      	beq.n	8006baa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bca:	4b27      	ldr	r3, [pc, #156]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1c3 0307 	rsb	r3, r3, #7
 8006bd2:	2b04      	cmp	r3, #4
 8006bd4:	d00b      	beq.n	8006bee <xPortStartScheduler+0xbe>
	__asm volatile
 8006bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bda:	f383 8811 	msr	BASEPRI, r3
 8006bde:	f3bf 8f6f 	isb	sy
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	60bb      	str	r3, [r7, #8]
}
 8006be8:	bf00      	nop
 8006bea:	bf00      	nop
 8006bec:	e7fd      	b.n	8006bea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bee:	4b1e      	ldr	r3, [pc, #120]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bf6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006c00:	4a19      	ldr	r2, [pc, #100]	@ (8006c68 <xPortStartScheduler+0x138>)
 8006c02:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006c0c:	4b17      	ldr	r3, [pc, #92]	@ (8006c6c <xPortStartScheduler+0x13c>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a16      	ldr	r2, [pc, #88]	@ (8006c6c <xPortStartScheduler+0x13c>)
 8006c12:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006c16:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c18:	4b14      	ldr	r3, [pc, #80]	@ (8006c6c <xPortStartScheduler+0x13c>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a13      	ldr	r2, [pc, #76]	@ (8006c6c <xPortStartScheduler+0x13c>)
 8006c1e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006c22:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c24:	f000 f8da 	bl	8006ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c28:	4b11      	ldr	r3, [pc, #68]	@ (8006c70 <xPortStartScheduler+0x140>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c2e:	f000 f8f9 	bl	8006e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c32:	4b10      	ldr	r3, [pc, #64]	@ (8006c74 <xPortStartScheduler+0x144>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a0f      	ldr	r2, [pc, #60]	@ (8006c74 <xPortStartScheduler+0x144>)
 8006c38:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c3c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c3e:	f7ff ff63 	bl	8006b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c42:	f7fe ff2d 	bl	8005aa0 <vTaskSwitchContext>
	prvTaskExitError();
 8006c46:	f7ff ff1b 	bl	8006a80 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	e000ed00 	.word	0xe000ed00
 8006c58:	410fc271 	.word	0x410fc271
 8006c5c:	410fc270 	.word	0x410fc270
 8006c60:	e000e400 	.word	0xe000e400
 8006c64:	20002ff8 	.word	0x20002ff8
 8006c68:	20002ffc 	.word	0x20002ffc
 8006c6c:	e000ed20 	.word	0xe000ed20
 8006c70:	2000000c 	.word	0x2000000c
 8006c74:	e000ef34 	.word	0xe000ef34

08006c78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
}
 8006c90:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c92:	4b10      	ldr	r3, [pc, #64]	@ (8006cd4 <vPortEnterCritical+0x5c>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3301      	adds	r3, #1
 8006c98:	4a0e      	ldr	r2, [pc, #56]	@ (8006cd4 <vPortEnterCritical+0x5c>)
 8006c9a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006cd4 <vPortEnterCritical+0x5c>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d110      	bne.n	8006cc6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8006cd8 <vPortEnterCritical+0x60>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	b2db      	uxtb	r3, r3
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00b      	beq.n	8006cc6 <vPortEnterCritical+0x4e>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	603b      	str	r3, [r7, #0]
}
 8006cc0:	bf00      	nop
 8006cc2:	bf00      	nop
 8006cc4:	e7fd      	b.n	8006cc2 <vPortEnterCritical+0x4a>
	}
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	2000000c 	.word	0x2000000c
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b083      	sub	sp, #12
 8006ce0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006ce2:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <vPortExitCritical+0x50>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <vPortExitCritical+0x26>
	__asm volatile
 8006cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cee:	f383 8811 	msr	BASEPRI, r3
 8006cf2:	f3bf 8f6f 	isb	sy
 8006cf6:	f3bf 8f4f 	dsb	sy
 8006cfa:	607b      	str	r3, [r7, #4]
}
 8006cfc:	bf00      	nop
 8006cfe:	bf00      	nop
 8006d00:	e7fd      	b.n	8006cfe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006d02:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <vPortExitCritical+0x50>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	4a08      	ldr	r2, [pc, #32]	@ (8006d2c <vPortExitCritical+0x50>)
 8006d0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006d0c:	4b07      	ldr	r3, [pc, #28]	@ (8006d2c <vPortExitCritical+0x50>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <vPortExitCritical+0x44>
 8006d14:	2300      	movs	r3, #0
 8006d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	f383 8811 	msr	BASEPRI, r3
}
 8006d1e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	2000000c 	.word	0x2000000c

08006d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d30:	f3ef 8009 	mrs	r0, PSP
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	4b15      	ldr	r3, [pc, #84]	@ (8006d90 <pxCurrentTCBConst>)
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	f01e 0f10 	tst.w	lr, #16
 8006d40:	bf08      	it	eq
 8006d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	6010      	str	r0, [r2, #0]
 8006d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d54:	f380 8811 	msr	BASEPRI, r0
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f7fe fe9e 	bl	8005aa0 <vTaskSwitchContext>
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f380 8811 	msr	BASEPRI, r0
 8006d6c:	bc09      	pop	{r0, r3}
 8006d6e:	6819      	ldr	r1, [r3, #0]
 8006d70:	6808      	ldr	r0, [r1, #0]
 8006d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d76:	f01e 0f10 	tst.w	lr, #16
 8006d7a:	bf08      	it	eq
 8006d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d80:	f380 8809 	msr	PSP, r0
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	f3af 8000 	nop.w

08006d90 <pxCurrentTCBConst>:
 8006d90:	200029cc 	.word	0x200029cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d94:	bf00      	nop
 8006d96:	bf00      	nop

08006d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	607b      	str	r3, [r7, #4]
}
 8006db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006db2:	f7fe fdbb 	bl	800592c <xTaskIncrementTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d003      	beq.n	8006dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dbc:	4b06      	ldr	r3, [pc, #24]	@ (8006dd8 <xPortSysTickHandler+0x40>)
 8006dbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dc2:	601a      	str	r2, [r3, #0]
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	f383 8811 	msr	BASEPRI, r3
}
 8006dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	e000ed04 	.word	0xe000ed04

08006ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006de2:	2200      	movs	r2, #0
 8006de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006de6:	4b0b      	ldr	r3, [pc, #44]	@ (8006e14 <vPortSetupTimerInterrupt+0x38>)
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dec:	4b0a      	ldr	r3, [pc, #40]	@ (8006e18 <vPortSetupTimerInterrupt+0x3c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a0a      	ldr	r2, [pc, #40]	@ (8006e1c <vPortSetupTimerInterrupt+0x40>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	4a09      	ldr	r2, [pc, #36]	@ (8006e20 <vPortSetupTimerInterrupt+0x44>)
 8006dfa:	3b01      	subs	r3, #1
 8006dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dfe:	4b04      	ldr	r3, [pc, #16]	@ (8006e10 <vPortSetupTimerInterrupt+0x34>)
 8006e00:	2207      	movs	r2, #7
 8006e02:	601a      	str	r2, [r3, #0]
}
 8006e04:	bf00      	nop
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	e000e010 	.word	0xe000e010
 8006e14:	e000e018 	.word	0xe000e018
 8006e18:	20000000 	.word	0x20000000
 8006e1c:	10624dd3 	.word	0x10624dd3
 8006e20:	e000e014 	.word	0xe000e014

08006e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e34 <vPortEnableVFP+0x10>
 8006e28:	6801      	ldr	r1, [r0, #0]
 8006e2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e2e:	6001      	str	r1, [r0, #0]
 8006e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e32:	bf00      	nop
 8006e34:	e000ed88 	.word	0xe000ed88

08006e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e3e:	f3ef 8305 	mrs	r3, IPSR
 8006e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b0f      	cmp	r3, #15
 8006e48:	d915      	bls.n	8006e76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e4a:	4a18      	ldr	r2, [pc, #96]	@ (8006eac <vPortValidateInterruptPriority+0x74>)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	4413      	add	r3, r2
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e54:	4b16      	ldr	r3, [pc, #88]	@ (8006eb0 <vPortValidateInterruptPriority+0x78>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	7afa      	ldrb	r2, [r7, #11]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d20b      	bcs.n	8006e76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	607b      	str	r3, [r7, #4]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e76:	4b0f      	ldr	r3, [pc, #60]	@ (8006eb4 <vPortValidateInterruptPriority+0x7c>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb8 <vPortValidateInterruptPriority+0x80>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d90b      	bls.n	8006e9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e8a:	f383 8811 	msr	BASEPRI, r3
 8006e8e:	f3bf 8f6f 	isb	sy
 8006e92:	f3bf 8f4f 	dsb	sy
 8006e96:	603b      	str	r3, [r7, #0]
}
 8006e98:	bf00      	nop
 8006e9a:	bf00      	nop
 8006e9c:	e7fd      	b.n	8006e9a <vPortValidateInterruptPriority+0x62>
	}
 8006e9e:	bf00      	nop
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	e000e3f0 	.word	0xe000e3f0
 8006eb0:	20002ff8 	.word	0x20002ff8
 8006eb4:	e000ed0c 	.word	0xe000ed0c
 8006eb8:	20002ffc 	.word	0x20002ffc

08006ebc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b08a      	sub	sp, #40	@ 0x28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ec8:	f7fe fc74 	bl	80057b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ecc:	4b5c      	ldr	r3, [pc, #368]	@ (8007040 <pvPortMalloc+0x184>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ed4:	f000 f924 	bl	8007120 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ed8:	4b5a      	ldr	r3, [pc, #360]	@ (8007044 <pvPortMalloc+0x188>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	4013      	ands	r3, r2
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f040 8095 	bne.w	8007010 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d01e      	beq.n	8006f2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006eec:	2208      	movs	r2, #8
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d015      	beq.n	8006f2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f023 0307 	bic.w	r3, r3, #7
 8006f04:	3308      	adds	r3, #8
 8006f06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00b      	beq.n	8006f2a <pvPortMalloc+0x6e>
	__asm volatile
 8006f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	617b      	str	r3, [r7, #20]
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	e7fd      	b.n	8006f26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d06f      	beq.n	8007010 <pvPortMalloc+0x154>
 8006f30:	4b45      	ldr	r3, [pc, #276]	@ (8007048 <pvPortMalloc+0x18c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d86a      	bhi.n	8007010 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f3a:	4b44      	ldr	r3, [pc, #272]	@ (800704c <pvPortMalloc+0x190>)
 8006f3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f3e:	4b43      	ldr	r3, [pc, #268]	@ (800704c <pvPortMalloc+0x190>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f44:	e004      	b.n	8006f50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d903      	bls.n	8006f62 <pvPortMalloc+0xa6>
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1f1      	bne.n	8006f46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f62:	4b37      	ldr	r3, [pc, #220]	@ (8007040 <pvPortMalloc+0x184>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d051      	beq.n	8007010 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2208      	movs	r2, #8
 8006f72:	4413      	add	r3, r2
 8006f74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	6a3b      	ldr	r3, [r7, #32]
 8006f7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	685a      	ldr	r2, [r3, #4]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	1ad2      	subs	r2, r2, r3
 8006f86:	2308      	movs	r3, #8
 8006f88:	005b      	lsls	r3, r3, #1
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d920      	bls.n	8006fd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f96:	69bb      	ldr	r3, [r7, #24]
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00b      	beq.n	8006fb8 <pvPortMalloc+0xfc>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	613b      	str	r3, [r7, #16]
}
 8006fb2:	bf00      	nop
 8006fb4:	bf00      	nop
 8006fb6:	e7fd      	b.n	8006fb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	1ad2      	subs	r2, r2, r3
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fca:	69b8      	ldr	r0, [r7, #24]
 8006fcc:	f000 f90a 	bl	80071e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8007048 <pvPortMalloc+0x18c>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	4a1b      	ldr	r2, [pc, #108]	@ (8007048 <pvPortMalloc+0x18c>)
 8006fdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fde:	4b1a      	ldr	r3, [pc, #104]	@ (8007048 <pvPortMalloc+0x18c>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b1b      	ldr	r3, [pc, #108]	@ (8007050 <pvPortMalloc+0x194>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d203      	bcs.n	8006ff2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fea:	4b17      	ldr	r3, [pc, #92]	@ (8007048 <pvPortMalloc+0x18c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a18      	ldr	r2, [pc, #96]	@ (8007050 <pvPortMalloc+0x194>)
 8006ff0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	685a      	ldr	r2, [r3, #4]
 8006ff6:	4b13      	ldr	r3, [pc, #76]	@ (8007044 <pvPortMalloc+0x188>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007002:	2200      	movs	r2, #0
 8007004:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007006:	4b13      	ldr	r3, [pc, #76]	@ (8007054 <pvPortMalloc+0x198>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3301      	adds	r3, #1
 800700c:	4a11      	ldr	r2, [pc, #68]	@ (8007054 <pvPortMalloc+0x198>)
 800700e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007010:	f7fe fbde 	bl	80057d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	f003 0307 	and.w	r3, r3, #7
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00b      	beq.n	8007036 <pvPortMalloc+0x17a>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	60fb      	str	r3, [r7, #12]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <pvPortMalloc+0x176>
	return pvReturn;
 8007036:	69fb      	ldr	r3, [r7, #28]
}
 8007038:	4618      	mov	r0, r3
 800703a:	3728      	adds	r7, #40	@ 0x28
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20006c08 	.word	0x20006c08
 8007044:	20006c1c 	.word	0x20006c1c
 8007048:	20006c0c 	.word	0x20006c0c
 800704c:	20006c00 	.word	0x20006c00
 8007050:	20006c10 	.word	0x20006c10
 8007054:	20006c14 	.word	0x20006c14

08007058 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b086      	sub	sp, #24
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d04f      	beq.n	800710a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800706a:	2308      	movs	r3, #8
 800706c:	425b      	negs	r3, r3
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4413      	add	r3, r2
 8007072:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	4b25      	ldr	r3, [pc, #148]	@ (8007114 <vPortFree+0xbc>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4013      	ands	r3, r2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <vPortFree+0x46>
	__asm volatile
 8007086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708a:	f383 8811 	msr	BASEPRI, r3
 800708e:	f3bf 8f6f 	isb	sy
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	60fb      	str	r3, [r7, #12]
}
 8007098:	bf00      	nop
 800709a:	bf00      	nop
 800709c:	e7fd      	b.n	800709a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <vPortFree+0x66>
	__asm volatile
 80070a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070aa:	f383 8811 	msr	BASEPRI, r3
 80070ae:	f3bf 8f6f 	isb	sy
 80070b2:	f3bf 8f4f 	dsb	sy
 80070b6:	60bb      	str	r3, [r7, #8]
}
 80070b8:	bf00      	nop
 80070ba:	bf00      	nop
 80070bc:	e7fd      	b.n	80070ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	685a      	ldr	r2, [r3, #4]
 80070c2:	4b14      	ldr	r3, [pc, #80]	@ (8007114 <vPortFree+0xbc>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4013      	ands	r3, r2
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01e      	beq.n	800710a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d11a      	bne.n	800710a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007114 <vPortFree+0xbc>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	43db      	mvns	r3, r3
 80070de:	401a      	ands	r2, r3
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070e4:	f7fe fb66 	bl	80057b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	685a      	ldr	r2, [r3, #4]
 80070ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007118 <vPortFree+0xc0>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4413      	add	r3, r2
 80070f2:	4a09      	ldr	r2, [pc, #36]	@ (8007118 <vPortFree+0xc0>)
 80070f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070f6:	6938      	ldr	r0, [r7, #16]
 80070f8:	f000 f874 	bl	80071e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070fc:	4b07      	ldr	r3, [pc, #28]	@ (800711c <vPortFree+0xc4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	4a06      	ldr	r2, [pc, #24]	@ (800711c <vPortFree+0xc4>)
 8007104:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007106:	f7fe fb63 	bl	80057d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800710a:	bf00      	nop
 800710c:	3718      	adds	r7, #24
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20006c1c 	.word	0x20006c1c
 8007118:	20006c0c 	.word	0x20006c0c
 800711c:	20006c18 	.word	0x20006c18

08007120 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007126:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800712a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800712c:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <prvHeapInit+0xac>)
 800712e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	3307      	adds	r3, #7
 800713e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	4a1f      	ldr	r2, [pc, #124]	@ (80071cc <prvHeapInit+0xac>)
 8007150:	4413      	add	r3, r2
 8007152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007158:	4a1d      	ldr	r2, [pc, #116]	@ (80071d0 <prvHeapInit+0xb0>)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800715e:	4b1c      	ldr	r3, [pc, #112]	@ (80071d0 <prvHeapInit+0xb0>)
 8007160:	2200      	movs	r2, #0
 8007162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68ba      	ldr	r2, [r7, #8]
 8007168:	4413      	add	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800716c:	2208      	movs	r2, #8
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	1a9b      	subs	r3, r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4a15      	ldr	r2, [pc, #84]	@ (80071d4 <prvHeapInit+0xb4>)
 8007180:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007182:	4b14      	ldr	r3, [pc, #80]	@ (80071d4 <prvHeapInit+0xb4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2200      	movs	r2, #0
 8007188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800718a:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <prvHeapInit+0xb4>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2200      	movs	r2, #0
 8007190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	1ad2      	subs	r2, r2, r3
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071a0:	4b0c      	ldr	r3, [pc, #48]	@ (80071d4 <prvHeapInit+0xb4>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	4a0a      	ldr	r2, [pc, #40]	@ (80071d8 <prvHeapInit+0xb8>)
 80071ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	4a09      	ldr	r2, [pc, #36]	@ (80071dc <prvHeapInit+0xbc>)
 80071b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071b8:	4b09      	ldr	r3, [pc, #36]	@ (80071e0 <prvHeapInit+0xc0>)
 80071ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071be:	601a      	str	r2, [r3, #0]
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	20003000 	.word	0x20003000
 80071d0:	20006c00 	.word	0x20006c00
 80071d4:	20006c08 	.word	0x20006c08
 80071d8:	20006c10 	.word	0x20006c10
 80071dc:	20006c0c 	.word	0x20006c0c
 80071e0:	20006c1c 	.word	0x20006c1c

080071e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071ec:	4b28      	ldr	r3, [pc, #160]	@ (8007290 <prvInsertBlockIntoFreeList+0xac>)
 80071ee:	60fb      	str	r3, [r7, #12]
 80071f0:	e002      	b.n	80071f8 <prvInsertBlockIntoFreeList+0x14>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d8f7      	bhi.n	80071f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	4413      	add	r3, r2
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	429a      	cmp	r2, r3
 8007212:	d108      	bne.n	8007226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685a      	ldr	r2, [r3, #4]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	441a      	add	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	441a      	add	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d118      	bne.n	800726c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b15      	ldr	r3, [pc, #84]	@ (8007294 <prvInsertBlockIntoFreeList+0xb0>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d00d      	beq.n	8007262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	685a      	ldr	r2, [r3, #4]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	441a      	add	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	e008      	b.n	8007274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007262:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <prvInsertBlockIntoFreeList+0xb0>)
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e003      	b.n	8007274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	d002      	beq.n	8007282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007282:	bf00      	nop
 8007284:	3714      	adds	r7, #20
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	20006c00 	.word	0x20006c00
 8007294:	20006c08 	.word	0x20006c08

08007298 <_vsniprintf_r>:
 8007298:	b530      	push	{r4, r5, lr}
 800729a:	4614      	mov	r4, r2
 800729c:	2c00      	cmp	r4, #0
 800729e:	b09b      	sub	sp, #108	@ 0x6c
 80072a0:	4605      	mov	r5, r0
 80072a2:	461a      	mov	r2, r3
 80072a4:	da05      	bge.n	80072b2 <_vsniprintf_r+0x1a>
 80072a6:	238b      	movs	r3, #139	@ 0x8b
 80072a8:	6003      	str	r3, [r0, #0]
 80072aa:	f04f 30ff 	mov.w	r0, #4294967295
 80072ae:	b01b      	add	sp, #108	@ 0x6c
 80072b0:	bd30      	pop	{r4, r5, pc}
 80072b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80072b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80072ba:	bf14      	ite	ne
 80072bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80072c0:	4623      	moveq	r3, r4
 80072c2:	9302      	str	r3, [sp, #8]
 80072c4:	9305      	str	r3, [sp, #20]
 80072c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80072ca:	9100      	str	r1, [sp, #0]
 80072cc:	9104      	str	r1, [sp, #16]
 80072ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80072d2:	4669      	mov	r1, sp
 80072d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80072d6:	f000 f9af 	bl	8007638 <_svfiprintf_r>
 80072da:	1c43      	adds	r3, r0, #1
 80072dc:	bfbc      	itt	lt
 80072de:	238b      	movlt	r3, #139	@ 0x8b
 80072e0:	602b      	strlt	r3, [r5, #0]
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d0e3      	beq.n	80072ae <_vsniprintf_r+0x16>
 80072e6:	9b00      	ldr	r3, [sp, #0]
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e7df      	b.n	80072ae <_vsniprintf_r+0x16>
	...

080072f0 <vsniprintf>:
 80072f0:	b507      	push	{r0, r1, r2, lr}
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	460a      	mov	r2, r1
 80072f8:	4601      	mov	r1, r0
 80072fa:	4803      	ldr	r0, [pc, #12]	@ (8007308 <vsniprintf+0x18>)
 80072fc:	6800      	ldr	r0, [r0, #0]
 80072fe:	f7ff ffcb 	bl	8007298 <_vsniprintf_r>
 8007302:	b003      	add	sp, #12
 8007304:	f85d fb04 	ldr.w	pc, [sp], #4
 8007308:	20000010 	.word	0x20000010

0800730c <memset>:
 800730c:	4402      	add	r2, r0
 800730e:	4603      	mov	r3, r0
 8007310:	4293      	cmp	r3, r2
 8007312:	d100      	bne.n	8007316 <memset+0xa>
 8007314:	4770      	bx	lr
 8007316:	f803 1b01 	strb.w	r1, [r3], #1
 800731a:	e7f9      	b.n	8007310 <memset+0x4>

0800731c <__errno>:
 800731c:	4b01      	ldr	r3, [pc, #4]	@ (8007324 <__errno+0x8>)
 800731e:	6818      	ldr	r0, [r3, #0]
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000010 	.word	0x20000010

08007328 <__libc_init_array>:
 8007328:	b570      	push	{r4, r5, r6, lr}
 800732a:	4d0d      	ldr	r5, [pc, #52]	@ (8007360 <__libc_init_array+0x38>)
 800732c:	4c0d      	ldr	r4, [pc, #52]	@ (8007364 <__libc_init_array+0x3c>)
 800732e:	1b64      	subs	r4, r4, r5
 8007330:	10a4      	asrs	r4, r4, #2
 8007332:	2600      	movs	r6, #0
 8007334:	42a6      	cmp	r6, r4
 8007336:	d109      	bne.n	800734c <__libc_init_array+0x24>
 8007338:	4d0b      	ldr	r5, [pc, #44]	@ (8007368 <__libc_init_array+0x40>)
 800733a:	4c0c      	ldr	r4, [pc, #48]	@ (800736c <__libc_init_array+0x44>)
 800733c:	f000 fc66 	bl	8007c0c <_init>
 8007340:	1b64      	subs	r4, r4, r5
 8007342:	10a4      	asrs	r4, r4, #2
 8007344:	2600      	movs	r6, #0
 8007346:	42a6      	cmp	r6, r4
 8007348:	d105      	bne.n	8007356 <__libc_init_array+0x2e>
 800734a:	bd70      	pop	{r4, r5, r6, pc}
 800734c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007350:	4798      	blx	r3
 8007352:	3601      	adds	r6, #1
 8007354:	e7ee      	b.n	8007334 <__libc_init_array+0xc>
 8007356:	f855 3b04 	ldr.w	r3, [r5], #4
 800735a:	4798      	blx	r3
 800735c:	3601      	adds	r6, #1
 800735e:	e7f2      	b.n	8007346 <__libc_init_array+0x1e>
 8007360:	08007d50 	.word	0x08007d50
 8007364:	08007d50 	.word	0x08007d50
 8007368:	08007d50 	.word	0x08007d50
 800736c:	08007d54 	.word	0x08007d54

08007370 <__retarget_lock_acquire_recursive>:
 8007370:	4770      	bx	lr

08007372 <__retarget_lock_release_recursive>:
 8007372:	4770      	bx	lr

08007374 <memcpy>:
 8007374:	440a      	add	r2, r1
 8007376:	4291      	cmp	r1, r2
 8007378:	f100 33ff 	add.w	r3, r0, #4294967295
 800737c:	d100      	bne.n	8007380 <memcpy+0xc>
 800737e:	4770      	bx	lr
 8007380:	b510      	push	{r4, lr}
 8007382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007386:	f803 4f01 	strb.w	r4, [r3, #1]!
 800738a:	4291      	cmp	r1, r2
 800738c:	d1f9      	bne.n	8007382 <memcpy+0xe>
 800738e:	bd10      	pop	{r4, pc}

08007390 <_free_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4605      	mov	r5, r0
 8007394:	2900      	cmp	r1, #0
 8007396:	d041      	beq.n	800741c <_free_r+0x8c>
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f0c      	subs	r4, r1, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	18e4      	addlt	r4, r4, r3
 80073a4:	f000 f8e0 	bl	8007568 <__malloc_lock>
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <_free_r+0x90>)
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	b933      	cbnz	r3, 80073bc <_free_r+0x2c>
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	4628      	mov	r0, r5
 80073b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b8:	f000 b8dc 	b.w	8007574 <__malloc_unlock>
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d908      	bls.n	80073d2 <_free_r+0x42>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	1821      	adds	r1, r4, r0
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf01      	itttt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	e7ed      	b.n	80073ae <_free_r+0x1e>
 80073d2:	461a      	mov	r2, r3
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	b10b      	cbz	r3, 80073dc <_free_r+0x4c>
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d9fa      	bls.n	80073d2 <_free_r+0x42>
 80073dc:	6811      	ldr	r1, [r2, #0]
 80073de:	1850      	adds	r0, r2, r1
 80073e0:	42a0      	cmp	r0, r4
 80073e2:	d10b      	bne.n	80073fc <_free_r+0x6c>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	4401      	add	r1, r0
 80073e8:	1850      	adds	r0, r2, r1
 80073ea:	4283      	cmp	r3, r0
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	d1e0      	bne.n	80073b2 <_free_r+0x22>
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	6053      	str	r3, [r2, #4]
 80073f6:	4408      	add	r0, r1
 80073f8:	6010      	str	r0, [r2, #0]
 80073fa:	e7da      	b.n	80073b2 <_free_r+0x22>
 80073fc:	d902      	bls.n	8007404 <_free_r+0x74>
 80073fe:	230c      	movs	r3, #12
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	e7d6      	b.n	80073b2 <_free_r+0x22>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	1821      	adds	r1, r4, r0
 8007408:	428b      	cmp	r3, r1
 800740a:	bf04      	itt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	6063      	str	r3, [r4, #4]
 8007412:	bf04      	itt	eq
 8007414:	1809      	addeq	r1, r1, r0
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	6054      	str	r4, [r2, #4]
 800741a:	e7ca      	b.n	80073b2 <_free_r+0x22>
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	20006d64 	.word	0x20006d64

08007424 <sbrk_aligned>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	4e0f      	ldr	r6, [pc, #60]	@ (8007464 <sbrk_aligned+0x40>)
 8007428:	460c      	mov	r4, r1
 800742a:	6831      	ldr	r1, [r6, #0]
 800742c:	4605      	mov	r5, r0
 800742e:	b911      	cbnz	r1, 8007436 <sbrk_aligned+0x12>
 8007430:	f000 fba6 	bl	8007b80 <_sbrk_r>
 8007434:	6030      	str	r0, [r6, #0]
 8007436:	4621      	mov	r1, r4
 8007438:	4628      	mov	r0, r5
 800743a:	f000 fba1 	bl	8007b80 <_sbrk_r>
 800743e:	1c43      	adds	r3, r0, #1
 8007440:	d103      	bne.n	800744a <sbrk_aligned+0x26>
 8007442:	f04f 34ff 	mov.w	r4, #4294967295
 8007446:	4620      	mov	r0, r4
 8007448:	bd70      	pop	{r4, r5, r6, pc}
 800744a:	1cc4      	adds	r4, r0, #3
 800744c:	f024 0403 	bic.w	r4, r4, #3
 8007450:	42a0      	cmp	r0, r4
 8007452:	d0f8      	beq.n	8007446 <sbrk_aligned+0x22>
 8007454:	1a21      	subs	r1, r4, r0
 8007456:	4628      	mov	r0, r5
 8007458:	f000 fb92 	bl	8007b80 <_sbrk_r>
 800745c:	3001      	adds	r0, #1
 800745e:	d1f2      	bne.n	8007446 <sbrk_aligned+0x22>
 8007460:	e7ef      	b.n	8007442 <sbrk_aligned+0x1e>
 8007462:	bf00      	nop
 8007464:	20006d60 	.word	0x20006d60

08007468 <_malloc_r>:
 8007468:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800746c:	1ccd      	adds	r5, r1, #3
 800746e:	f025 0503 	bic.w	r5, r5, #3
 8007472:	3508      	adds	r5, #8
 8007474:	2d0c      	cmp	r5, #12
 8007476:	bf38      	it	cc
 8007478:	250c      	movcc	r5, #12
 800747a:	2d00      	cmp	r5, #0
 800747c:	4606      	mov	r6, r0
 800747e:	db01      	blt.n	8007484 <_malloc_r+0x1c>
 8007480:	42a9      	cmp	r1, r5
 8007482:	d904      	bls.n	800748e <_malloc_r+0x26>
 8007484:	230c      	movs	r3, #12
 8007486:	6033      	str	r3, [r6, #0]
 8007488:	2000      	movs	r0, #0
 800748a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007564 <_malloc_r+0xfc>
 8007492:	f000 f869 	bl	8007568 <__malloc_lock>
 8007496:	f8d8 3000 	ldr.w	r3, [r8]
 800749a:	461c      	mov	r4, r3
 800749c:	bb44      	cbnz	r4, 80074f0 <_malloc_r+0x88>
 800749e:	4629      	mov	r1, r5
 80074a0:	4630      	mov	r0, r6
 80074a2:	f7ff ffbf 	bl	8007424 <sbrk_aligned>
 80074a6:	1c43      	adds	r3, r0, #1
 80074a8:	4604      	mov	r4, r0
 80074aa:	d158      	bne.n	800755e <_malloc_r+0xf6>
 80074ac:	f8d8 4000 	ldr.w	r4, [r8]
 80074b0:	4627      	mov	r7, r4
 80074b2:	2f00      	cmp	r7, #0
 80074b4:	d143      	bne.n	800753e <_malloc_r+0xd6>
 80074b6:	2c00      	cmp	r4, #0
 80074b8:	d04b      	beq.n	8007552 <_malloc_r+0xea>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	4639      	mov	r1, r7
 80074be:	4630      	mov	r0, r6
 80074c0:	eb04 0903 	add.w	r9, r4, r3
 80074c4:	f000 fb5c 	bl	8007b80 <_sbrk_r>
 80074c8:	4581      	cmp	r9, r0
 80074ca:	d142      	bne.n	8007552 <_malloc_r+0xea>
 80074cc:	6821      	ldr	r1, [r4, #0]
 80074ce:	1a6d      	subs	r5, r5, r1
 80074d0:	4629      	mov	r1, r5
 80074d2:	4630      	mov	r0, r6
 80074d4:	f7ff ffa6 	bl	8007424 <sbrk_aligned>
 80074d8:	3001      	adds	r0, #1
 80074da:	d03a      	beq.n	8007552 <_malloc_r+0xea>
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	442b      	add	r3, r5
 80074e0:	6023      	str	r3, [r4, #0]
 80074e2:	f8d8 3000 	ldr.w	r3, [r8]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	bb62      	cbnz	r2, 8007544 <_malloc_r+0xdc>
 80074ea:	f8c8 7000 	str.w	r7, [r8]
 80074ee:	e00f      	b.n	8007510 <_malloc_r+0xa8>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	1b52      	subs	r2, r2, r5
 80074f4:	d420      	bmi.n	8007538 <_malloc_r+0xd0>
 80074f6:	2a0b      	cmp	r2, #11
 80074f8:	d917      	bls.n	800752a <_malloc_r+0xc2>
 80074fa:	1961      	adds	r1, r4, r5
 80074fc:	42a3      	cmp	r3, r4
 80074fe:	6025      	str	r5, [r4, #0]
 8007500:	bf18      	it	ne
 8007502:	6059      	strne	r1, [r3, #4]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	bf08      	it	eq
 8007508:	f8c8 1000 	streq.w	r1, [r8]
 800750c:	5162      	str	r2, [r4, r5]
 800750e:	604b      	str	r3, [r1, #4]
 8007510:	4630      	mov	r0, r6
 8007512:	f000 f82f 	bl	8007574 <__malloc_unlock>
 8007516:	f104 000b 	add.w	r0, r4, #11
 800751a:	1d23      	adds	r3, r4, #4
 800751c:	f020 0007 	bic.w	r0, r0, #7
 8007520:	1ac2      	subs	r2, r0, r3
 8007522:	bf1c      	itt	ne
 8007524:	1a1b      	subne	r3, r3, r0
 8007526:	50a3      	strne	r3, [r4, r2]
 8007528:	e7af      	b.n	800748a <_malloc_r+0x22>
 800752a:	6862      	ldr	r2, [r4, #4]
 800752c:	42a3      	cmp	r3, r4
 800752e:	bf0c      	ite	eq
 8007530:	f8c8 2000 	streq.w	r2, [r8]
 8007534:	605a      	strne	r2, [r3, #4]
 8007536:	e7eb      	b.n	8007510 <_malloc_r+0xa8>
 8007538:	4623      	mov	r3, r4
 800753a:	6864      	ldr	r4, [r4, #4]
 800753c:	e7ae      	b.n	800749c <_malloc_r+0x34>
 800753e:	463c      	mov	r4, r7
 8007540:	687f      	ldr	r7, [r7, #4]
 8007542:	e7b6      	b.n	80074b2 <_malloc_r+0x4a>
 8007544:	461a      	mov	r2, r3
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	42a3      	cmp	r3, r4
 800754a:	d1fb      	bne.n	8007544 <_malloc_r+0xdc>
 800754c:	2300      	movs	r3, #0
 800754e:	6053      	str	r3, [r2, #4]
 8007550:	e7de      	b.n	8007510 <_malloc_r+0xa8>
 8007552:	230c      	movs	r3, #12
 8007554:	6033      	str	r3, [r6, #0]
 8007556:	4630      	mov	r0, r6
 8007558:	f000 f80c 	bl	8007574 <__malloc_unlock>
 800755c:	e794      	b.n	8007488 <_malloc_r+0x20>
 800755e:	6005      	str	r5, [r0, #0]
 8007560:	e7d6      	b.n	8007510 <_malloc_r+0xa8>
 8007562:	bf00      	nop
 8007564:	20006d64 	.word	0x20006d64

08007568 <__malloc_lock>:
 8007568:	4801      	ldr	r0, [pc, #4]	@ (8007570 <__malloc_lock+0x8>)
 800756a:	f7ff bf01 	b.w	8007370 <__retarget_lock_acquire_recursive>
 800756e:	bf00      	nop
 8007570:	20006d5c 	.word	0x20006d5c

08007574 <__malloc_unlock>:
 8007574:	4801      	ldr	r0, [pc, #4]	@ (800757c <__malloc_unlock+0x8>)
 8007576:	f7ff befc 	b.w	8007372 <__retarget_lock_release_recursive>
 800757a:	bf00      	nop
 800757c:	20006d5c 	.word	0x20006d5c

08007580 <__ssputs_r>:
 8007580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	688e      	ldr	r6, [r1, #8]
 8007586:	461f      	mov	r7, r3
 8007588:	42be      	cmp	r6, r7
 800758a:	680b      	ldr	r3, [r1, #0]
 800758c:	4682      	mov	sl, r0
 800758e:	460c      	mov	r4, r1
 8007590:	4690      	mov	r8, r2
 8007592:	d82d      	bhi.n	80075f0 <__ssputs_r+0x70>
 8007594:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007598:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800759c:	d026      	beq.n	80075ec <__ssputs_r+0x6c>
 800759e:	6965      	ldr	r5, [r4, #20]
 80075a0:	6909      	ldr	r1, [r1, #16]
 80075a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075a6:	eba3 0901 	sub.w	r9, r3, r1
 80075aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075ae:	1c7b      	adds	r3, r7, #1
 80075b0:	444b      	add	r3, r9
 80075b2:	106d      	asrs	r5, r5, #1
 80075b4:	429d      	cmp	r5, r3
 80075b6:	bf38      	it	cc
 80075b8:	461d      	movcc	r5, r3
 80075ba:	0553      	lsls	r3, r2, #21
 80075bc:	d527      	bpl.n	800760e <__ssputs_r+0x8e>
 80075be:	4629      	mov	r1, r5
 80075c0:	f7ff ff52 	bl	8007468 <_malloc_r>
 80075c4:	4606      	mov	r6, r0
 80075c6:	b360      	cbz	r0, 8007622 <__ssputs_r+0xa2>
 80075c8:	6921      	ldr	r1, [r4, #16]
 80075ca:	464a      	mov	r2, r9
 80075cc:	f7ff fed2 	bl	8007374 <memcpy>
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80075d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075da:	81a3      	strh	r3, [r4, #12]
 80075dc:	6126      	str	r6, [r4, #16]
 80075de:	6165      	str	r5, [r4, #20]
 80075e0:	444e      	add	r6, r9
 80075e2:	eba5 0509 	sub.w	r5, r5, r9
 80075e6:	6026      	str	r6, [r4, #0]
 80075e8:	60a5      	str	r5, [r4, #8]
 80075ea:	463e      	mov	r6, r7
 80075ec:	42be      	cmp	r6, r7
 80075ee:	d900      	bls.n	80075f2 <__ssputs_r+0x72>
 80075f0:	463e      	mov	r6, r7
 80075f2:	6820      	ldr	r0, [r4, #0]
 80075f4:	4632      	mov	r2, r6
 80075f6:	4641      	mov	r1, r8
 80075f8:	f000 faa8 	bl	8007b4c <memmove>
 80075fc:	68a3      	ldr	r3, [r4, #8]
 80075fe:	1b9b      	subs	r3, r3, r6
 8007600:	60a3      	str	r3, [r4, #8]
 8007602:	6823      	ldr	r3, [r4, #0]
 8007604:	4433      	add	r3, r6
 8007606:	6023      	str	r3, [r4, #0]
 8007608:	2000      	movs	r0, #0
 800760a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800760e:	462a      	mov	r2, r5
 8007610:	f000 fac6 	bl	8007ba0 <_realloc_r>
 8007614:	4606      	mov	r6, r0
 8007616:	2800      	cmp	r0, #0
 8007618:	d1e0      	bne.n	80075dc <__ssputs_r+0x5c>
 800761a:	6921      	ldr	r1, [r4, #16]
 800761c:	4650      	mov	r0, sl
 800761e:	f7ff feb7 	bl	8007390 <_free_r>
 8007622:	230c      	movs	r3, #12
 8007624:	f8ca 3000 	str.w	r3, [sl]
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800762e:	81a3      	strh	r3, [r4, #12]
 8007630:	f04f 30ff 	mov.w	r0, #4294967295
 8007634:	e7e9      	b.n	800760a <__ssputs_r+0x8a>
	...

08007638 <_svfiprintf_r>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	4698      	mov	r8, r3
 800763e:	898b      	ldrh	r3, [r1, #12]
 8007640:	061b      	lsls	r3, r3, #24
 8007642:	b09d      	sub	sp, #116	@ 0x74
 8007644:	4607      	mov	r7, r0
 8007646:	460d      	mov	r5, r1
 8007648:	4614      	mov	r4, r2
 800764a:	d510      	bpl.n	800766e <_svfiprintf_r+0x36>
 800764c:	690b      	ldr	r3, [r1, #16]
 800764e:	b973      	cbnz	r3, 800766e <_svfiprintf_r+0x36>
 8007650:	2140      	movs	r1, #64	@ 0x40
 8007652:	f7ff ff09 	bl	8007468 <_malloc_r>
 8007656:	6028      	str	r0, [r5, #0]
 8007658:	6128      	str	r0, [r5, #16]
 800765a:	b930      	cbnz	r0, 800766a <_svfiprintf_r+0x32>
 800765c:	230c      	movs	r3, #12
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	f04f 30ff 	mov.w	r0, #4294967295
 8007664:	b01d      	add	sp, #116	@ 0x74
 8007666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766a:	2340      	movs	r3, #64	@ 0x40
 800766c:	616b      	str	r3, [r5, #20]
 800766e:	2300      	movs	r3, #0
 8007670:	9309      	str	r3, [sp, #36]	@ 0x24
 8007672:	2320      	movs	r3, #32
 8007674:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007678:	f8cd 800c 	str.w	r8, [sp, #12]
 800767c:	2330      	movs	r3, #48	@ 0x30
 800767e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800781c <_svfiprintf_r+0x1e4>
 8007682:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007686:	f04f 0901 	mov.w	r9, #1
 800768a:	4623      	mov	r3, r4
 800768c:	469a      	mov	sl, r3
 800768e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007692:	b10a      	cbz	r2, 8007698 <_svfiprintf_r+0x60>
 8007694:	2a25      	cmp	r2, #37	@ 0x25
 8007696:	d1f9      	bne.n	800768c <_svfiprintf_r+0x54>
 8007698:	ebba 0b04 	subs.w	fp, sl, r4
 800769c:	d00b      	beq.n	80076b6 <_svfiprintf_r+0x7e>
 800769e:	465b      	mov	r3, fp
 80076a0:	4622      	mov	r2, r4
 80076a2:	4629      	mov	r1, r5
 80076a4:	4638      	mov	r0, r7
 80076a6:	f7ff ff6b 	bl	8007580 <__ssputs_r>
 80076aa:	3001      	adds	r0, #1
 80076ac:	f000 80a7 	beq.w	80077fe <_svfiprintf_r+0x1c6>
 80076b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076b2:	445a      	add	r2, fp
 80076b4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076b6:	f89a 3000 	ldrb.w	r3, [sl]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 809f 	beq.w	80077fe <_svfiprintf_r+0x1c6>
 80076c0:	2300      	movs	r3, #0
 80076c2:	f04f 32ff 	mov.w	r2, #4294967295
 80076c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076ca:	f10a 0a01 	add.w	sl, sl, #1
 80076ce:	9304      	str	r3, [sp, #16]
 80076d0:	9307      	str	r3, [sp, #28]
 80076d2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076d6:	931a      	str	r3, [sp, #104]	@ 0x68
 80076d8:	4654      	mov	r4, sl
 80076da:	2205      	movs	r2, #5
 80076dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076e0:	484e      	ldr	r0, [pc, #312]	@ (800781c <_svfiprintf_r+0x1e4>)
 80076e2:	f7f8 fd9d 	bl	8000220 <memchr>
 80076e6:	9a04      	ldr	r2, [sp, #16]
 80076e8:	b9d8      	cbnz	r0, 8007722 <_svfiprintf_r+0xea>
 80076ea:	06d0      	lsls	r0, r2, #27
 80076ec:	bf44      	itt	mi
 80076ee:	2320      	movmi	r3, #32
 80076f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076f4:	0711      	lsls	r1, r2, #28
 80076f6:	bf44      	itt	mi
 80076f8:	232b      	movmi	r3, #43	@ 0x2b
 80076fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007702:	2b2a      	cmp	r3, #42	@ 0x2a
 8007704:	d015      	beq.n	8007732 <_svfiprintf_r+0xfa>
 8007706:	9a07      	ldr	r2, [sp, #28]
 8007708:	4654      	mov	r4, sl
 800770a:	2000      	movs	r0, #0
 800770c:	f04f 0c0a 	mov.w	ip, #10
 8007710:	4621      	mov	r1, r4
 8007712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007716:	3b30      	subs	r3, #48	@ 0x30
 8007718:	2b09      	cmp	r3, #9
 800771a:	d94b      	bls.n	80077b4 <_svfiprintf_r+0x17c>
 800771c:	b1b0      	cbz	r0, 800774c <_svfiprintf_r+0x114>
 800771e:	9207      	str	r2, [sp, #28]
 8007720:	e014      	b.n	800774c <_svfiprintf_r+0x114>
 8007722:	eba0 0308 	sub.w	r3, r0, r8
 8007726:	fa09 f303 	lsl.w	r3, r9, r3
 800772a:	4313      	orrs	r3, r2
 800772c:	9304      	str	r3, [sp, #16]
 800772e:	46a2      	mov	sl, r4
 8007730:	e7d2      	b.n	80076d8 <_svfiprintf_r+0xa0>
 8007732:	9b03      	ldr	r3, [sp, #12]
 8007734:	1d19      	adds	r1, r3, #4
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	9103      	str	r1, [sp, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	bfbb      	ittet	lt
 800773e:	425b      	neglt	r3, r3
 8007740:	f042 0202 	orrlt.w	r2, r2, #2
 8007744:	9307      	strge	r3, [sp, #28]
 8007746:	9307      	strlt	r3, [sp, #28]
 8007748:	bfb8      	it	lt
 800774a:	9204      	strlt	r2, [sp, #16]
 800774c:	7823      	ldrb	r3, [r4, #0]
 800774e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007750:	d10a      	bne.n	8007768 <_svfiprintf_r+0x130>
 8007752:	7863      	ldrb	r3, [r4, #1]
 8007754:	2b2a      	cmp	r3, #42	@ 0x2a
 8007756:	d132      	bne.n	80077be <_svfiprintf_r+0x186>
 8007758:	9b03      	ldr	r3, [sp, #12]
 800775a:	1d1a      	adds	r2, r3, #4
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	9203      	str	r2, [sp, #12]
 8007760:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007764:	3402      	adds	r4, #2
 8007766:	9305      	str	r3, [sp, #20]
 8007768:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800782c <_svfiprintf_r+0x1f4>
 800776c:	7821      	ldrb	r1, [r4, #0]
 800776e:	2203      	movs	r2, #3
 8007770:	4650      	mov	r0, sl
 8007772:	f7f8 fd55 	bl	8000220 <memchr>
 8007776:	b138      	cbz	r0, 8007788 <_svfiprintf_r+0x150>
 8007778:	9b04      	ldr	r3, [sp, #16]
 800777a:	eba0 000a 	sub.w	r0, r0, sl
 800777e:	2240      	movs	r2, #64	@ 0x40
 8007780:	4082      	lsls	r2, r0
 8007782:	4313      	orrs	r3, r2
 8007784:	3401      	adds	r4, #1
 8007786:	9304      	str	r3, [sp, #16]
 8007788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778c:	4824      	ldr	r0, [pc, #144]	@ (8007820 <_svfiprintf_r+0x1e8>)
 800778e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007792:	2206      	movs	r2, #6
 8007794:	f7f8 fd44 	bl	8000220 <memchr>
 8007798:	2800      	cmp	r0, #0
 800779a:	d036      	beq.n	800780a <_svfiprintf_r+0x1d2>
 800779c:	4b21      	ldr	r3, [pc, #132]	@ (8007824 <_svfiprintf_r+0x1ec>)
 800779e:	bb1b      	cbnz	r3, 80077e8 <_svfiprintf_r+0x1b0>
 80077a0:	9b03      	ldr	r3, [sp, #12]
 80077a2:	3307      	adds	r3, #7
 80077a4:	f023 0307 	bic.w	r3, r3, #7
 80077a8:	3308      	adds	r3, #8
 80077aa:	9303      	str	r3, [sp, #12]
 80077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ae:	4433      	add	r3, r6
 80077b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b2:	e76a      	b.n	800768a <_svfiprintf_r+0x52>
 80077b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077b8:	460c      	mov	r4, r1
 80077ba:	2001      	movs	r0, #1
 80077bc:	e7a8      	b.n	8007710 <_svfiprintf_r+0xd8>
 80077be:	2300      	movs	r3, #0
 80077c0:	3401      	adds	r4, #1
 80077c2:	9305      	str	r3, [sp, #20]
 80077c4:	4619      	mov	r1, r3
 80077c6:	f04f 0c0a 	mov.w	ip, #10
 80077ca:	4620      	mov	r0, r4
 80077cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d0:	3a30      	subs	r2, #48	@ 0x30
 80077d2:	2a09      	cmp	r2, #9
 80077d4:	d903      	bls.n	80077de <_svfiprintf_r+0x1a6>
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0c6      	beq.n	8007768 <_svfiprintf_r+0x130>
 80077da:	9105      	str	r1, [sp, #20]
 80077dc:	e7c4      	b.n	8007768 <_svfiprintf_r+0x130>
 80077de:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e2:	4604      	mov	r4, r0
 80077e4:	2301      	movs	r3, #1
 80077e6:	e7f0      	b.n	80077ca <_svfiprintf_r+0x192>
 80077e8:	ab03      	add	r3, sp, #12
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	462a      	mov	r2, r5
 80077ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007828 <_svfiprintf_r+0x1f0>)
 80077f0:	a904      	add	r1, sp, #16
 80077f2:	4638      	mov	r0, r7
 80077f4:	f3af 8000 	nop.w
 80077f8:	1c42      	adds	r2, r0, #1
 80077fa:	4606      	mov	r6, r0
 80077fc:	d1d6      	bne.n	80077ac <_svfiprintf_r+0x174>
 80077fe:	89ab      	ldrh	r3, [r5, #12]
 8007800:	065b      	lsls	r3, r3, #25
 8007802:	f53f af2d 	bmi.w	8007660 <_svfiprintf_r+0x28>
 8007806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007808:	e72c      	b.n	8007664 <_svfiprintf_r+0x2c>
 800780a:	ab03      	add	r3, sp, #12
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	462a      	mov	r2, r5
 8007810:	4b05      	ldr	r3, [pc, #20]	@ (8007828 <_svfiprintf_r+0x1f0>)
 8007812:	a904      	add	r1, sp, #16
 8007814:	4638      	mov	r0, r7
 8007816:	f000 f879 	bl	800790c <_printf_i>
 800781a:	e7ed      	b.n	80077f8 <_svfiprintf_r+0x1c0>
 800781c:	08007d14 	.word	0x08007d14
 8007820:	08007d1e 	.word	0x08007d1e
 8007824:	00000000 	.word	0x00000000
 8007828:	08007581 	.word	0x08007581
 800782c:	08007d1a 	.word	0x08007d1a

08007830 <_printf_common>:
 8007830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007834:	4616      	mov	r6, r2
 8007836:	4698      	mov	r8, r3
 8007838:	688a      	ldr	r2, [r1, #8]
 800783a:	690b      	ldr	r3, [r1, #16]
 800783c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007840:	4293      	cmp	r3, r2
 8007842:	bfb8      	it	lt
 8007844:	4613      	movlt	r3, r2
 8007846:	6033      	str	r3, [r6, #0]
 8007848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800784c:	4607      	mov	r7, r0
 800784e:	460c      	mov	r4, r1
 8007850:	b10a      	cbz	r2, 8007856 <_printf_common+0x26>
 8007852:	3301      	adds	r3, #1
 8007854:	6033      	str	r3, [r6, #0]
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	0699      	lsls	r1, r3, #26
 800785a:	bf42      	ittt	mi
 800785c:	6833      	ldrmi	r3, [r6, #0]
 800785e:	3302      	addmi	r3, #2
 8007860:	6033      	strmi	r3, [r6, #0]
 8007862:	6825      	ldr	r5, [r4, #0]
 8007864:	f015 0506 	ands.w	r5, r5, #6
 8007868:	d106      	bne.n	8007878 <_printf_common+0x48>
 800786a:	f104 0a19 	add.w	sl, r4, #25
 800786e:	68e3      	ldr	r3, [r4, #12]
 8007870:	6832      	ldr	r2, [r6, #0]
 8007872:	1a9b      	subs	r3, r3, r2
 8007874:	42ab      	cmp	r3, r5
 8007876:	dc26      	bgt.n	80078c6 <_printf_common+0x96>
 8007878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800787c:	6822      	ldr	r2, [r4, #0]
 800787e:	3b00      	subs	r3, #0
 8007880:	bf18      	it	ne
 8007882:	2301      	movne	r3, #1
 8007884:	0692      	lsls	r2, r2, #26
 8007886:	d42b      	bmi.n	80078e0 <_printf_common+0xb0>
 8007888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800788c:	4641      	mov	r1, r8
 800788e:	4638      	mov	r0, r7
 8007890:	47c8      	blx	r9
 8007892:	3001      	adds	r0, #1
 8007894:	d01e      	beq.n	80078d4 <_printf_common+0xa4>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	6922      	ldr	r2, [r4, #16]
 800789a:	f003 0306 	and.w	r3, r3, #6
 800789e:	2b04      	cmp	r3, #4
 80078a0:	bf02      	ittt	eq
 80078a2:	68e5      	ldreq	r5, [r4, #12]
 80078a4:	6833      	ldreq	r3, [r6, #0]
 80078a6:	1aed      	subeq	r5, r5, r3
 80078a8:	68a3      	ldr	r3, [r4, #8]
 80078aa:	bf0c      	ite	eq
 80078ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80078b0:	2500      	movne	r5, #0
 80078b2:	4293      	cmp	r3, r2
 80078b4:	bfc4      	itt	gt
 80078b6:	1a9b      	subgt	r3, r3, r2
 80078b8:	18ed      	addgt	r5, r5, r3
 80078ba:	2600      	movs	r6, #0
 80078bc:	341a      	adds	r4, #26
 80078be:	42b5      	cmp	r5, r6
 80078c0:	d11a      	bne.n	80078f8 <_printf_common+0xc8>
 80078c2:	2000      	movs	r0, #0
 80078c4:	e008      	b.n	80078d8 <_printf_common+0xa8>
 80078c6:	2301      	movs	r3, #1
 80078c8:	4652      	mov	r2, sl
 80078ca:	4641      	mov	r1, r8
 80078cc:	4638      	mov	r0, r7
 80078ce:	47c8      	blx	r9
 80078d0:	3001      	adds	r0, #1
 80078d2:	d103      	bne.n	80078dc <_printf_common+0xac>
 80078d4:	f04f 30ff 	mov.w	r0, #4294967295
 80078d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078dc:	3501      	adds	r5, #1
 80078de:	e7c6      	b.n	800786e <_printf_common+0x3e>
 80078e0:	18e1      	adds	r1, r4, r3
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	2030      	movs	r0, #48	@ 0x30
 80078e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80078ea:	4422      	add	r2, r4
 80078ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80078f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80078f4:	3302      	adds	r3, #2
 80078f6:	e7c7      	b.n	8007888 <_printf_common+0x58>
 80078f8:	2301      	movs	r3, #1
 80078fa:	4622      	mov	r2, r4
 80078fc:	4641      	mov	r1, r8
 80078fe:	4638      	mov	r0, r7
 8007900:	47c8      	blx	r9
 8007902:	3001      	adds	r0, #1
 8007904:	d0e6      	beq.n	80078d4 <_printf_common+0xa4>
 8007906:	3601      	adds	r6, #1
 8007908:	e7d9      	b.n	80078be <_printf_common+0x8e>
	...

0800790c <_printf_i>:
 800790c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007910:	7e0f      	ldrb	r7, [r1, #24]
 8007912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007914:	2f78      	cmp	r7, #120	@ 0x78
 8007916:	4691      	mov	r9, r2
 8007918:	4680      	mov	r8, r0
 800791a:	460c      	mov	r4, r1
 800791c:	469a      	mov	sl, r3
 800791e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007922:	d807      	bhi.n	8007934 <_printf_i+0x28>
 8007924:	2f62      	cmp	r7, #98	@ 0x62
 8007926:	d80a      	bhi.n	800793e <_printf_i+0x32>
 8007928:	2f00      	cmp	r7, #0
 800792a:	f000 80d2 	beq.w	8007ad2 <_printf_i+0x1c6>
 800792e:	2f58      	cmp	r7, #88	@ 0x58
 8007930:	f000 80b9 	beq.w	8007aa6 <_printf_i+0x19a>
 8007934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800793c:	e03a      	b.n	80079b4 <_printf_i+0xa8>
 800793e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007942:	2b15      	cmp	r3, #21
 8007944:	d8f6      	bhi.n	8007934 <_printf_i+0x28>
 8007946:	a101      	add	r1, pc, #4	@ (adr r1, 800794c <_printf_i+0x40>)
 8007948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800794c:	080079a5 	.word	0x080079a5
 8007950:	080079b9 	.word	0x080079b9
 8007954:	08007935 	.word	0x08007935
 8007958:	08007935 	.word	0x08007935
 800795c:	08007935 	.word	0x08007935
 8007960:	08007935 	.word	0x08007935
 8007964:	080079b9 	.word	0x080079b9
 8007968:	08007935 	.word	0x08007935
 800796c:	08007935 	.word	0x08007935
 8007970:	08007935 	.word	0x08007935
 8007974:	08007935 	.word	0x08007935
 8007978:	08007ab9 	.word	0x08007ab9
 800797c:	080079e3 	.word	0x080079e3
 8007980:	08007a73 	.word	0x08007a73
 8007984:	08007935 	.word	0x08007935
 8007988:	08007935 	.word	0x08007935
 800798c:	08007adb 	.word	0x08007adb
 8007990:	08007935 	.word	0x08007935
 8007994:	080079e3 	.word	0x080079e3
 8007998:	08007935 	.word	0x08007935
 800799c:	08007935 	.word	0x08007935
 80079a0:	08007a7b 	.word	0x08007a7b
 80079a4:	6833      	ldr	r3, [r6, #0]
 80079a6:	1d1a      	adds	r2, r3, #4
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6032      	str	r2, [r6, #0]
 80079ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80079b4:	2301      	movs	r3, #1
 80079b6:	e09d      	b.n	8007af4 <_printf_i+0x1e8>
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	6820      	ldr	r0, [r4, #0]
 80079bc:	1d19      	adds	r1, r3, #4
 80079be:	6031      	str	r1, [r6, #0]
 80079c0:	0606      	lsls	r6, r0, #24
 80079c2:	d501      	bpl.n	80079c8 <_printf_i+0xbc>
 80079c4:	681d      	ldr	r5, [r3, #0]
 80079c6:	e003      	b.n	80079d0 <_printf_i+0xc4>
 80079c8:	0645      	lsls	r5, r0, #25
 80079ca:	d5fb      	bpl.n	80079c4 <_printf_i+0xb8>
 80079cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80079d0:	2d00      	cmp	r5, #0
 80079d2:	da03      	bge.n	80079dc <_printf_i+0xd0>
 80079d4:	232d      	movs	r3, #45	@ 0x2d
 80079d6:	426d      	negs	r5, r5
 80079d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079dc:	4859      	ldr	r0, [pc, #356]	@ (8007b44 <_printf_i+0x238>)
 80079de:	230a      	movs	r3, #10
 80079e0:	e011      	b.n	8007a06 <_printf_i+0xfa>
 80079e2:	6821      	ldr	r1, [r4, #0]
 80079e4:	6833      	ldr	r3, [r6, #0]
 80079e6:	0608      	lsls	r0, r1, #24
 80079e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80079ec:	d402      	bmi.n	80079f4 <_printf_i+0xe8>
 80079ee:	0649      	lsls	r1, r1, #25
 80079f0:	bf48      	it	mi
 80079f2:	b2ad      	uxthmi	r5, r5
 80079f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80079f6:	4853      	ldr	r0, [pc, #332]	@ (8007b44 <_printf_i+0x238>)
 80079f8:	6033      	str	r3, [r6, #0]
 80079fa:	bf14      	ite	ne
 80079fc:	230a      	movne	r3, #10
 80079fe:	2308      	moveq	r3, #8
 8007a00:	2100      	movs	r1, #0
 8007a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007a06:	6866      	ldr	r6, [r4, #4]
 8007a08:	60a6      	str	r6, [r4, #8]
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	bfa2      	ittt	ge
 8007a0e:	6821      	ldrge	r1, [r4, #0]
 8007a10:	f021 0104 	bicge.w	r1, r1, #4
 8007a14:	6021      	strge	r1, [r4, #0]
 8007a16:	b90d      	cbnz	r5, 8007a1c <_printf_i+0x110>
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d04b      	beq.n	8007ab4 <_printf_i+0x1a8>
 8007a1c:	4616      	mov	r6, r2
 8007a1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007a22:	fb03 5711 	mls	r7, r3, r1, r5
 8007a26:	5dc7      	ldrb	r7, [r0, r7]
 8007a28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007a2c:	462f      	mov	r7, r5
 8007a2e:	42bb      	cmp	r3, r7
 8007a30:	460d      	mov	r5, r1
 8007a32:	d9f4      	bls.n	8007a1e <_printf_i+0x112>
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	d10b      	bne.n	8007a50 <_printf_i+0x144>
 8007a38:	6823      	ldr	r3, [r4, #0]
 8007a3a:	07df      	lsls	r7, r3, #31
 8007a3c:	d508      	bpl.n	8007a50 <_printf_i+0x144>
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	6861      	ldr	r1, [r4, #4]
 8007a42:	4299      	cmp	r1, r3
 8007a44:	bfde      	ittt	le
 8007a46:	2330      	movle	r3, #48	@ 0x30
 8007a48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007a4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007a50:	1b92      	subs	r2, r2, r6
 8007a52:	6122      	str	r2, [r4, #16]
 8007a54:	f8cd a000 	str.w	sl, [sp]
 8007a58:	464b      	mov	r3, r9
 8007a5a:	aa03      	add	r2, sp, #12
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	4640      	mov	r0, r8
 8007a60:	f7ff fee6 	bl	8007830 <_printf_common>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d14a      	bne.n	8007afe <_printf_i+0x1f2>
 8007a68:	f04f 30ff 	mov.w	r0, #4294967295
 8007a6c:	b004      	add	sp, #16
 8007a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	f043 0320 	orr.w	r3, r3, #32
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	4833      	ldr	r0, [pc, #204]	@ (8007b48 <_printf_i+0x23c>)
 8007a7c:	2778      	movs	r7, #120	@ 0x78
 8007a7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007a82:	6823      	ldr	r3, [r4, #0]
 8007a84:	6831      	ldr	r1, [r6, #0]
 8007a86:	061f      	lsls	r7, r3, #24
 8007a88:	f851 5b04 	ldr.w	r5, [r1], #4
 8007a8c:	d402      	bmi.n	8007a94 <_printf_i+0x188>
 8007a8e:	065f      	lsls	r7, r3, #25
 8007a90:	bf48      	it	mi
 8007a92:	b2ad      	uxthmi	r5, r5
 8007a94:	6031      	str	r1, [r6, #0]
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	bf44      	itt	mi
 8007a9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a9e:	6023      	strmi	r3, [r4, #0]
 8007aa0:	b11d      	cbz	r5, 8007aaa <_printf_i+0x19e>
 8007aa2:	2310      	movs	r3, #16
 8007aa4:	e7ac      	b.n	8007a00 <_printf_i+0xf4>
 8007aa6:	4827      	ldr	r0, [pc, #156]	@ (8007b44 <_printf_i+0x238>)
 8007aa8:	e7e9      	b.n	8007a7e <_printf_i+0x172>
 8007aaa:	6823      	ldr	r3, [r4, #0]
 8007aac:	f023 0320 	bic.w	r3, r3, #32
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	e7f6      	b.n	8007aa2 <_printf_i+0x196>
 8007ab4:	4616      	mov	r6, r2
 8007ab6:	e7bd      	b.n	8007a34 <_printf_i+0x128>
 8007ab8:	6833      	ldr	r3, [r6, #0]
 8007aba:	6825      	ldr	r5, [r4, #0]
 8007abc:	6961      	ldr	r1, [r4, #20]
 8007abe:	1d18      	adds	r0, r3, #4
 8007ac0:	6030      	str	r0, [r6, #0]
 8007ac2:	062e      	lsls	r6, r5, #24
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	d501      	bpl.n	8007acc <_printf_i+0x1c0>
 8007ac8:	6019      	str	r1, [r3, #0]
 8007aca:	e002      	b.n	8007ad2 <_printf_i+0x1c6>
 8007acc:	0668      	lsls	r0, r5, #25
 8007ace:	d5fb      	bpl.n	8007ac8 <_printf_i+0x1bc>
 8007ad0:	8019      	strh	r1, [r3, #0]
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	6123      	str	r3, [r4, #16]
 8007ad6:	4616      	mov	r6, r2
 8007ad8:	e7bc      	b.n	8007a54 <_printf_i+0x148>
 8007ada:	6833      	ldr	r3, [r6, #0]
 8007adc:	1d1a      	adds	r2, r3, #4
 8007ade:	6032      	str	r2, [r6, #0]
 8007ae0:	681e      	ldr	r6, [r3, #0]
 8007ae2:	6862      	ldr	r2, [r4, #4]
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	f7f8 fb9a 	bl	8000220 <memchr>
 8007aec:	b108      	cbz	r0, 8007af2 <_printf_i+0x1e6>
 8007aee:	1b80      	subs	r0, r0, r6
 8007af0:	6060      	str	r0, [r4, #4]
 8007af2:	6863      	ldr	r3, [r4, #4]
 8007af4:	6123      	str	r3, [r4, #16]
 8007af6:	2300      	movs	r3, #0
 8007af8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007afc:	e7aa      	b.n	8007a54 <_printf_i+0x148>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	4632      	mov	r2, r6
 8007b02:	4649      	mov	r1, r9
 8007b04:	4640      	mov	r0, r8
 8007b06:	47d0      	blx	sl
 8007b08:	3001      	adds	r0, #1
 8007b0a:	d0ad      	beq.n	8007a68 <_printf_i+0x15c>
 8007b0c:	6823      	ldr	r3, [r4, #0]
 8007b0e:	079b      	lsls	r3, r3, #30
 8007b10:	d413      	bmi.n	8007b3a <_printf_i+0x22e>
 8007b12:	68e0      	ldr	r0, [r4, #12]
 8007b14:	9b03      	ldr	r3, [sp, #12]
 8007b16:	4298      	cmp	r0, r3
 8007b18:	bfb8      	it	lt
 8007b1a:	4618      	movlt	r0, r3
 8007b1c:	e7a6      	b.n	8007a6c <_printf_i+0x160>
 8007b1e:	2301      	movs	r3, #1
 8007b20:	4632      	mov	r2, r6
 8007b22:	4649      	mov	r1, r9
 8007b24:	4640      	mov	r0, r8
 8007b26:	47d0      	blx	sl
 8007b28:	3001      	adds	r0, #1
 8007b2a:	d09d      	beq.n	8007a68 <_printf_i+0x15c>
 8007b2c:	3501      	adds	r5, #1
 8007b2e:	68e3      	ldr	r3, [r4, #12]
 8007b30:	9903      	ldr	r1, [sp, #12]
 8007b32:	1a5b      	subs	r3, r3, r1
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	dcf2      	bgt.n	8007b1e <_printf_i+0x212>
 8007b38:	e7eb      	b.n	8007b12 <_printf_i+0x206>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	f104 0619 	add.w	r6, r4, #25
 8007b40:	e7f5      	b.n	8007b2e <_printf_i+0x222>
 8007b42:	bf00      	nop
 8007b44:	08007d25 	.word	0x08007d25
 8007b48:	08007d36 	.word	0x08007d36

08007b4c <memmove>:
 8007b4c:	4288      	cmp	r0, r1
 8007b4e:	b510      	push	{r4, lr}
 8007b50:	eb01 0402 	add.w	r4, r1, r2
 8007b54:	d902      	bls.n	8007b5c <memmove+0x10>
 8007b56:	4284      	cmp	r4, r0
 8007b58:	4623      	mov	r3, r4
 8007b5a:	d807      	bhi.n	8007b6c <memmove+0x20>
 8007b5c:	1e43      	subs	r3, r0, #1
 8007b5e:	42a1      	cmp	r1, r4
 8007b60:	d008      	beq.n	8007b74 <memmove+0x28>
 8007b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b6a:	e7f8      	b.n	8007b5e <memmove+0x12>
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4601      	mov	r1, r0
 8007b70:	428a      	cmp	r2, r1
 8007b72:	d100      	bne.n	8007b76 <memmove+0x2a>
 8007b74:	bd10      	pop	{r4, pc}
 8007b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b7e:	e7f7      	b.n	8007b70 <memmove+0x24>

08007b80 <_sbrk_r>:
 8007b80:	b538      	push	{r3, r4, r5, lr}
 8007b82:	4d06      	ldr	r5, [pc, #24]	@ (8007b9c <_sbrk_r+0x1c>)
 8007b84:	2300      	movs	r3, #0
 8007b86:	4604      	mov	r4, r0
 8007b88:	4608      	mov	r0, r1
 8007b8a:	602b      	str	r3, [r5, #0]
 8007b8c:	f7f9 f8ec 	bl	8000d68 <_sbrk>
 8007b90:	1c43      	adds	r3, r0, #1
 8007b92:	d102      	bne.n	8007b9a <_sbrk_r+0x1a>
 8007b94:	682b      	ldr	r3, [r5, #0]
 8007b96:	b103      	cbz	r3, 8007b9a <_sbrk_r+0x1a>
 8007b98:	6023      	str	r3, [r4, #0]
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}
 8007b9c:	20006d58 	.word	0x20006d58

08007ba0 <_realloc_r>:
 8007ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ba4:	4680      	mov	r8, r0
 8007ba6:	4615      	mov	r5, r2
 8007ba8:	460c      	mov	r4, r1
 8007baa:	b921      	cbnz	r1, 8007bb6 <_realloc_r+0x16>
 8007bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bb0:	4611      	mov	r1, r2
 8007bb2:	f7ff bc59 	b.w	8007468 <_malloc_r>
 8007bb6:	b92a      	cbnz	r2, 8007bc4 <_realloc_r+0x24>
 8007bb8:	f7ff fbea 	bl	8007390 <_free_r>
 8007bbc:	2400      	movs	r4, #0
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc4:	f000 f81a 	bl	8007bfc <_malloc_usable_size_r>
 8007bc8:	4285      	cmp	r5, r0
 8007bca:	4606      	mov	r6, r0
 8007bcc:	d802      	bhi.n	8007bd4 <_realloc_r+0x34>
 8007bce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007bd2:	d8f4      	bhi.n	8007bbe <_realloc_r+0x1e>
 8007bd4:	4629      	mov	r1, r5
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f7ff fc46 	bl	8007468 <_malloc_r>
 8007bdc:	4607      	mov	r7, r0
 8007bde:	2800      	cmp	r0, #0
 8007be0:	d0ec      	beq.n	8007bbc <_realloc_r+0x1c>
 8007be2:	42b5      	cmp	r5, r6
 8007be4:	462a      	mov	r2, r5
 8007be6:	4621      	mov	r1, r4
 8007be8:	bf28      	it	cs
 8007bea:	4632      	movcs	r2, r6
 8007bec:	f7ff fbc2 	bl	8007374 <memcpy>
 8007bf0:	4621      	mov	r1, r4
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	f7ff fbcc 	bl	8007390 <_free_r>
 8007bf8:	463c      	mov	r4, r7
 8007bfa:	e7e0      	b.n	8007bbe <_realloc_r+0x1e>

08007bfc <_malloc_usable_size_r>:
 8007bfc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c00:	1f18      	subs	r0, r3, #4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bfbc      	itt	lt
 8007c06:	580b      	ldrlt	r3, [r1, r0]
 8007c08:	18c0      	addlt	r0, r0, r3
 8007c0a:	4770      	bx	lr

08007c0c <_init>:
 8007c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0e:	bf00      	nop
 8007c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c12:	bc08      	pop	{r3}
 8007c14:	469e      	mov	lr, r3
 8007c16:	4770      	bx	lr

08007c18 <_fini>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	bf00      	nop
 8007c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c1e:	bc08      	pop	{r3}
 8007c20:	469e      	mov	lr, r3
 8007c22:	4770      	bx	lr
