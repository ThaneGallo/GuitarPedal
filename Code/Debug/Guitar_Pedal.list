
Guitar_Pedal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047b8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004988  08004988  00005988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a1c  08004a1c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a1c  08004a1c  00005a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a24  08004a24  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a24  08004a24  00005a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a28  08004a28  00005a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a2c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  2000005c  08004a88  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000144c  08004a88  0000644c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb96  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002511  00000000  00000000  00015c22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00018138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b24  00000000  00000000  00018f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d0b  00000000  00000000  00019aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012404  00000000  00000000  0003d7af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddb1a  00000000  00000000  0004fbb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d6cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040f0  00000000  00000000  0012d710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00131800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004970 	.word	0x08004970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004970 	.word	0x08004970

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_ADC_ConvHalfCpltCallback>:


	}

	// Called when the **first half** of the DMA buffer is filled
	void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a05      	ldr	r2, [pc, #20]	@ (80005d4 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d102      	bne.n	80005c8 <HAL_ADC_ConvHalfCpltCallback+0x18>
	        process_first_half = 1;
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <HAL_ADC_ConvHalfCpltCallback+0x28>)
 80005c4:	2201      	movs	r2, #1
 80005c6:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40012000 	.word	0x40012000
 80005d8:	20001078 	.word	0x20001078

080005dc <HAL_ADC_ConvCpltCallback>:

	// Called when the **second half** is filled (full transfer complete)
	void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	    if (hadc->Instance == ADC1) {
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a05      	ldr	r2, [pc, #20]	@ (8000600 <HAL_ADC_ConvCpltCallback+0x24>)
 80005ea:	4293      	cmp	r3, r2
 80005ec:	d102      	bne.n	80005f4 <HAL_ADC_ConvCpltCallback+0x18>
	        // Process the second half of the buffer
	    	process_second_half = 1;
 80005ee:	4b05      	ldr	r3, [pc, #20]	@ (8000604 <HAL_ADC_ConvCpltCallback+0x28>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	701a      	strb	r2, [r3, #0]
	    }
	}
 80005f4:	bf00      	nop
 80005f6:	370c      	adds	r7, #12
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	40012000 	.word	0x40012000
 8000604:	20001079 	.word	0x20001079

08000608 <myprintf>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void myprintf(const char *fmt, ...) {
 8000608:	b40f      	push	{r0, r1, r2, r3}
 800060a:	b580      	push	{r7, lr}
 800060c:	b082      	sub	sp, #8
 800060e:	af00      	add	r7, sp, #0

//	if(res == osOK){

  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000610:	f107 0314 	add.w	r3, r7, #20
 8000614:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	693a      	ldr	r2, [r7, #16]
 800061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <myprintf+0x44>)
 8000620:	f003 fd18 	bl	8004054 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <myprintf+0x44>)
 8000626:	f7ff fdf3 	bl	8000210 <strlen>
 800062a:	4603      	mov	r3, r0
 800062c:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	b29a      	uxth	r2, r3
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	4905      	ldr	r1, [pc, #20]	@ (800064c <myprintf+0x44>)
 8000638:	4805      	ldr	r0, [pc, #20]	@ (8000650 <myprintf+0x48>)
 800063a:	f003 f923 	bl	8003884 <HAL_UART_Transmit>

	}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000648:	b004      	add	sp, #16
 800064a:	4770      	bx	lr
 800064c:	200011b4 	.word	0x200011b4
 8000650:	2000116c 	.word	0x2000116c

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fc1d 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f85d 	bl	800071c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f9af 	bl	80009c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000666:	f000 f98d 	bl	8000984 <MX_DMA_Init>
  MX_ADC1_Init();
 800066a:	f000 f8c3 	bl	80007f4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800066e:	f000 f95f 	bl	8000930 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000672:	f000 f911 	bl	8000898 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
   uint32_t i;

   myprintf("Start of start adc\n");
 8000676:	4821      	ldr	r0, [pc, #132]	@ (80006fc <main+0xa8>)
 8000678:	f7ff ffc6 	bl	8000608 <myprintf>

   //begins filling of ADC buffer
   HAL_TIM_Base_Start(&htim2);
 800067c:	4820      	ldr	r0, [pc, #128]	@ (8000700 <main+0xac>)
 800067e:	f002 fc29 	bl	8002ed4 <HAL_TIM_Base_Start>
   HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 8000682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000686:	491f      	ldr	r1, [pc, #124]	@ (8000704 <main+0xb0>)
 8000688:	481f      	ldr	r0, [pc, #124]	@ (8000708 <main+0xb4>)
 800068a:	f000 fc8b 	bl	8000fa4 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //triggers when adc buff is half full
	   	if(process_first_half == 1){
 800068e:	4b1f      	ldr	r3, [pc, #124]	@ (800070c <main+0xb8>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d115      	bne.n	80006c2 <main+0x6e>
	   		//print buffer for debug

	   		for(i = 0; i < HALF_BUF_LEN; i++){
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	e00b      	b.n	80006b4 <main+0x60>
	   			myprintf("FirstHalf %d:   %d\n", i, adc_buf[i]);
 800069c:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <main+0xb0>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006a4:	461a      	mov	r2, r3
 80006a6:	6879      	ldr	r1, [r7, #4]
 80006a8:	4819      	ldr	r0, [pc, #100]	@ (8000710 <main+0xbc>)
 80006aa:	f7ff ffad 	bl	8000608 <myprintf>
	   		for(i = 0; i < HALF_BUF_LEN; i++){
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	3301      	adds	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006ba:	d3ef      	bcc.n	800069c <main+0x48>

	   		}



	   		process_first_half = 0;
 80006bc:	4b13      	ldr	r3, [pc, #76]	@ (800070c <main+0xb8>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
	   	}
	   	//triggers once the second half is filled
	   	if(process_second_half == 1){
 80006c2:	4b14      	ldr	r3, [pc, #80]	@ (8000714 <main+0xc0>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d1e1      	bne.n	800068e <main+0x3a>

	   		for(i = 0; i < HALF_BUF_LEN; i++){
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	e00d      	b.n	80006ec <main+0x98>
	   			myprintf("SecondHalf %d:   %d\n", i, adc_buf[i + HALF_BUF_LEN]);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80006d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000704 <main+0xb0>)
 80006d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006dc:	461a      	mov	r2, r3
 80006de:	6879      	ldr	r1, [r7, #4]
 80006e0:	480d      	ldr	r0, [pc, #52]	@ (8000718 <main+0xc4>)
 80006e2:	f7ff ff91 	bl	8000608 <myprintf>
	   		for(i = 0; i < HALF_BUF_LEN; i++){
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	3301      	adds	r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80006f2:	d3ed      	bcc.n	80006d0 <main+0x7c>

	   	    }


	   		process_second_half = 0;
 80006f4:	4b07      	ldr	r3, [pc, #28]	@ (8000714 <main+0xc0>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
	   	if(process_first_half == 1){
 80006fa:	e7c8      	b.n	800068e <main+0x3a>
 80006fc:	08004988 	.word	0x08004988
 8000700:	20001124 	.word	0x20001124
 8000704:	20000078 	.word	0x20000078
 8000708:	2000107c 	.word	0x2000107c
 800070c:	20001078 	.word	0x20001078
 8000710:	0800499c 	.word	0x0800499c
 8000714:	20001079 	.word	0x20001079
 8000718:	080049b0 	.word	0x080049b0

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	2234      	movs	r2, #52	@ 0x34
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f003 fca0 	bl	8004070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 0308 	add.w	r3, r7, #8
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000740:	2300      	movs	r3, #0
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	4b29      	ldr	r3, [pc, #164]	@ (80007ec <SystemClock_Config+0xd0>)
 8000746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000748:	4a28      	ldr	r2, [pc, #160]	@ (80007ec <SystemClock_Config+0xd0>)
 800074a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800074e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <SystemClock_Config+0xd0>)
 8000752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800075c:	2300      	movs	r3, #0
 800075e:	603b      	str	r3, [r7, #0]
 8000760:	4b23      	ldr	r3, [pc, #140]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <SystemClock_Config+0xd4>)
 800076a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800076e:	6013      	str	r3, [r2, #0]
 8000770:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <SystemClock_Config+0xd4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000790:	2308      	movs	r3, #8
 8000792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000794:	2360      	movs	r3, #96	@ 0x60
 8000796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000798:	2302      	movs	r3, #2
 800079a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 f8a5 	bl	80028f8 <HAL_RCC_OscConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007b4:	f000 f932 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b8:	230f      	movs	r3, #15
 80007ba:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007bc:	2302      	movs	r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2101      	movs	r1, #1
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fd99 	bl	800230c <HAL_RCC_ClockConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007e0:	f000 f91c 	bl	8000a1c <Error_Handler>
  }
}
 80007e4:	bf00      	nop
 80007e6:	3750      	adds	r7, #80	@ 0x50
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40007000 	.word	0x40007000

080007f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007fa:	463b      	mov	r3, r7
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000808:	4a22      	ldr	r2, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xa0>)
 800080a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800080c:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800080e:	2200      	movs	r2, #0
 8000810:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000812:	4b1f      	ldr	r3, [pc, #124]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000818:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000820:	2200      	movs	r2, #0
 8000822:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800082e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000836:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 800083a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800083c:	4b14      	ldr	r3, [pc, #80]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000842:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000844:	2201      	movs	r2, #1
 8000846:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000848:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <MX_ADC1_Init+0x9c>)
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000850:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000852:	2201      	movs	r2, #1
 8000854:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000856:	480e      	ldr	r0, [pc, #56]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000858:	f000 fb60 	bl	8000f1c <HAL_ADC_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8000862:	f000 f8db 	bl	8000a1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800086e:	2300      	movs	r3, #0
 8000870:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000872:	463b      	mov	r3, r7
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	@ (8000890 <MX_ADC1_Init+0x9c>)
 8000878:	f000 fcb2 	bl	80011e0 <HAL_ADC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000882:	f000 f8cb 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	2000107c 	.word	0x2000107c
 8000894:	40012000 	.word	0x40012000

08000898 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089e:	f107 0308 	add.w	r3, r7, #8
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ac:	463b      	mov	r3, r7
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008b4:	4b1d      	ldr	r3, [pc, #116]	@ (800092c <MX_TIM2_Init+0x94>)
 80008b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_TIM2_Init+0x94>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	@ (800092c <MX_TIM2_Init+0x94>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 499;
 80008c8:	4b18      	ldr	r3, [pc, #96]	@ (800092c <MX_TIM2_Init+0x94>)
 80008ca:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80008ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d0:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_TIM2_Init+0x94>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008d6:	4b15      	ldr	r3, [pc, #84]	@ (800092c <MX_TIM2_Init+0x94>)
 80008d8:	2280      	movs	r2, #128	@ 0x80
 80008da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008dc:	4813      	ldr	r0, [pc, #76]	@ (800092c <MX_TIM2_Init+0x94>)
 80008de:	f002 faa9 	bl	8002e34 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008e8:	f000 f898 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f2:	f107 0308 	add.w	r3, r7, #8
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	@ (800092c <MX_TIM2_Init+0x94>)
 80008fa:	f002 fcb3 	bl	8003264 <HAL_TIM_ConfigClockSource>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000904:	f000 f88a 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000908:	2320      	movs	r3, #32
 800090a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	@ (800092c <MX_TIM2_Init+0x94>)
 8000916:	f002 fed5 	bl	80036c4 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f87c 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20001124 	.word	0x20001124

08000930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000934:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000936:	4a12      	ldr	r2, [pc, #72]	@ (8000980 <MX_USART2_UART_Init+0x50>)
 8000938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800093a:	4b10      	ldr	r3, [pc, #64]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 800093c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000948:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000954:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000956:	220c      	movs	r2, #12
 8000958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095a:	4b08      	ldr	r3, [pc, #32]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000966:	4805      	ldr	r0, [pc, #20]	@ (800097c <MX_USART2_UART_Init+0x4c>)
 8000968:	f002 ff3c 	bl	80037e4 <HAL_UART_Init>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000972:	f000 f853 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	2000116c 	.word	0x2000116c
 8000980:	40004400 	.word	0x40004400

08000984 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_DMA_Init+0x3c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <MX_DMA_Init+0x3c>)
 8000994:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_DMA_Init+0x3c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2038      	movs	r0, #56	@ 0x38
 80009ac:	f000 ff80 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80009b0:	2038      	movs	r0, #56	@ 0x38
 80009b2:	f000 ff99 	bl	80018e8 <HAL_NVIC_EnableIRQ>

}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40023800 	.word	0x40023800

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <MX_GPIO_Init+0x30>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <MX_GPIO_Init+0x30>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <MX_GPIO_Init+0x30>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a04      	ldr	r2, [pc, #16]	@ (8000a18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d101      	bne.n	8000a0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a0a:	f000 fa67 	bl	8000edc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40010000 	.word	0x40010000

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <Error_Handler+0x8>

08000a28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a0f      	ldr	r2, [pc, #60]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a08      	ldr	r2, [pc, #32]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40023800 	.word	0x40023800

08000a78 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b08a      	sub	sp, #40	@ 0x28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
 8000a8e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a33      	ldr	r2, [pc, #204]	@ (8000b64 <HAL_ADC_MspInit+0xec>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d160      	bne.n	8000b5c <HAL_ADC_MspInit+0xe4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	613b      	str	r3, [r7, #16]
 8000a9e:	4b32      	ldr	r3, [pc, #200]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	4a31      	ldr	r2, [pc, #196]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aaa:	4b2f      	ldr	r3, [pc, #188]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a2a      	ldr	r2, [pc, #168]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b28      	ldr	r3, [pc, #160]	@ (8000b68 <HAL_ADC_MspInit+0xf0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	60fb      	str	r3, [r7, #12]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4821      	ldr	r0, [pc, #132]	@ (8000b6c <HAL_ADC_MspInit+0xf4>)
 8000ae6:	f001 fa7d 	bl	8001fe4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000aea:	4b21      	ldr	r3, [pc, #132]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000aec:	4a21      	ldr	r2, [pc, #132]	@ (8000b74 <HAL_ADC_MspInit+0xfc>)
 8000aee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000af0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b02:	4b1b      	ldr	r3, [pc, #108]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b04:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b08:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b0c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b10:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b12:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b18:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b20:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b30:	2203      	movs	r2, #3
 8000b32:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000b34:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b42:	f000 fedf 	bl	8001904 <HAL_DMA_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_ADC_MspInit+0xd8>
    {
      Error_Handler();
 8000b4c:	f7ff ff66 	bl	8000a1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a07      	ldr	r2, [pc, #28]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b56:	4a06      	ldr	r2, [pc, #24]	@ (8000b70 <HAL_ADC_MspInit+0xf8>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000b5c:	bf00      	nop
 8000b5e:	3728      	adds	r7, #40	@ 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40012000 	.word	0x40012000
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000
 8000b70:	200010c4 	.word	0x200010c4
 8000b74:	40026410 	.word	0x40026410

08000b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000b88:	d10d      	bne.n	8000ba6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a08      	ldr	r2, [pc, #32]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_TIM_Base_MspInit+0x3c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b08a      	sub	sp, #40	@ 0x28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a19      	ldr	r2, [pc, #100]	@ (8000c3c <HAL_UART_MspInit+0x84>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d12b      	bne.n	8000c32 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	4b18      	ldr	r3, [pc, #96]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a17      	ldr	r2, [pc, #92]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b15      	ldr	r3, [pc, #84]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bf2:	613b      	str	r3, [r7, #16]
 8000bf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	60fb      	str	r3, [r7, #12]
 8000bfa:	4b11      	ldr	r3, [pc, #68]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	4a10      	ldr	r2, [pc, #64]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c06:	4b0e      	ldr	r3, [pc, #56]	@ (8000c40 <HAL_UART_MspInit+0x88>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c12:	230c      	movs	r3, #12
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1e:	2303      	movs	r3, #3
 8000c20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c22:	2307      	movs	r3, #7
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <HAL_UART_MspInit+0x8c>)
 8000c2e:	f001 f9d9 	bl	8001fe4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c32:	bf00      	nop
 8000c34:	3728      	adds	r7, #40	@ 0x28
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40004400 	.word	0x40004400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	@ 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <HAL_InitTick+0xd0>)
 8000c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c60:	4a2d      	ldr	r2, [pc, #180]	@ (8000d18 <HAL_InitTick+0xd0>)
 8000c62:	f043 0301 	orr.w	r3, r3, #1
 8000c66:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c68:	4b2b      	ldr	r3, [pc, #172]	@ (8000d18 <HAL_InitTick+0xd0>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6c:	f003 0301 	and.w	r3, r3, #1
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c74:	f107 020c 	add.w	r2, r7, #12
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	4611      	mov	r1, r2
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f001 fc5e 	bl	8002540 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c84:	f001 fc48 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8000c88:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c8c:	4a23      	ldr	r2, [pc, #140]	@ (8000d1c <HAL_InitTick+0xd4>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	3b01      	subs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000c98:	4b21      	ldr	r3, [pc, #132]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000c9a:	4a22      	ldr	r2, [pc, #136]	@ (8000d24 <HAL_InitTick+0xdc>)
 8000c9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000ca0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ca4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ca6:	4a1e      	ldr	r2, [pc, #120]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000caa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000cc0:	f002 f8b8 	bl	8002e34 <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000cca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11b      	bne.n	8000d0a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cd2:	4813      	ldr	r0, [pc, #76]	@ (8000d20 <HAL_InitTick+0xd8>)
 8000cd4:	f002 f966 	bl	8002fa4 <HAL_TIM_Base_Start_IT>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000cde:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d111      	bne.n	8000d0a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ce6:	2019      	movs	r0, #25
 8000ce8:	f000 fdfe 	bl	80018e8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b0f      	cmp	r3, #15
 8000cf0:	d808      	bhi.n	8000d04 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	6879      	ldr	r1, [r7, #4]
 8000cf6:	2019      	movs	r0, #25
 8000cf8:	f000 fdda 	bl	80018b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000d28 <HAL_InitTick+0xe0>)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
 8000d02:	e002      	b.n	8000d0a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000d04:	2301      	movs	r3, #1
 8000d06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3730      	adds	r7, #48	@ 0x30
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	431bde83 	.word	0x431bde83
 8000d20:	200012b4 	.word	0x200012b4
 8000d24:	40010000 	.word	0x40010000
 8000d28:	20000004 	.word	0x20000004

08000d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d30:	bf00      	nop
 8000d32:	e7fd      	b.n	8000d30 <NMI_Handler+0x4>

08000d34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <HardFault_Handler+0x4>

08000d3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <MemManage_Handler+0x4>

08000d44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <BusFault_Handler+0x4>

08000d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <UsageFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d92:	f002 f977 	bl	8003084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200012b4 	.word	0x200012b4

08000da0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000da4:	4802      	ldr	r0, [pc, #8]	@ (8000db0 <DMA2_Stream0_IRQHandler+0x10>)
 8000da6:	f000 feb3 	bl	8001b10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200010c4 	.word	0x200010c4

08000db4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dbc:	4a14      	ldr	r2, [pc, #80]	@ (8000e10 <_sbrk+0x5c>)
 8000dbe:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <_sbrk+0x60>)
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d102      	bne.n	8000dd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	@ (8000e18 <_sbrk+0x64>)
 8000dd2:	4a12      	ldr	r2, [pc, #72]	@ (8000e1c <_sbrk+0x68>)
 8000dd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <_sbrk+0x64>)
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d207      	bcs.n	8000df4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de4:	f003 f94c 	bl	8004080 <__errno>
 8000de8:	4603      	mov	r3, r0
 8000dea:	220c      	movs	r2, #12
 8000dec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295
 8000df2:	e009      	b.n	8000e08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df4:	4b08      	ldr	r3, [pc, #32]	@ (8000e18 <_sbrk+0x64>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfa:	4b07      	ldr	r3, [pc, #28]	@ (8000e18 <_sbrk+0x64>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4413      	add	r3, r2
 8000e02:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <_sbrk+0x64>)
 8000e04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e06:	68fb      	ldr	r3, [r7, #12]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3718      	adds	r7, #24
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20020000 	.word	0x20020000
 8000e14:	00000400 	.word	0x00000400
 8000e18:	200012fc 	.word	0x200012fc
 8000e1c:	20001450 	.word	0x20001450

08000e20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <SystemInit+0x20>)
 8000e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e2a:	4a05      	ldr	r2, [pc, #20]	@ (8000e40 <SystemInit+0x20>)
 8000e2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e48:	f7ff ffea 	bl	8000e20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f003 f90b 	bl	800408c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fbed 	bl	8000654 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e88:	08004a2c 	.word	0x08004a2c
  ldr r2, =_sbss
 8000e8c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e90:	2000144c 	.word	0x2000144c

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fcea 	bl	800189a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	200f      	movs	r0, #15
 8000ec8:	f7ff febe 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fdac 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	@ (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20001300 	.word	0x20001300

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20001300 	.word	0x20001300

08000f1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f24:	2300      	movs	r3, #0
 8000f26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e033      	b.n	8000f9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d109      	bne.n	8000f4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fd9c 	bl	8000a78 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	f003 0310 	and.w	r3, r3, #16
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d118      	bne.n	8000f8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f62:	f023 0302 	bic.w	r3, r3, #2
 8000f66:	f043 0202 	orr.w	r2, r3, #2
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f000 fa68 	bl	8001444 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7e:	f023 0303 	bic.w	r3, r3, #3
 8000f82:	f043 0201 	orr.w	r2, r3, #1
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f8a:	e001      	b.n	8000f90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3710      	adds	r7, #16
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d101      	bne.n	8000fc6 <HAL_ADC_Start_DMA+0x22>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	e0eb      	b.n	800119e <HAL_ADC_Start_DMA+0x1fa>
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d018      	beq.n	800100e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689a      	ldr	r2, [r3, #8]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f042 0201 	orr.w	r2, r2, #1
 8000fea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fec:	4b6e      	ldr	r3, [pc, #440]	@ (80011a8 <HAL_ADC_Start_DMA+0x204>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a6e      	ldr	r2, [pc, #440]	@ (80011ac <HAL_ADC_Start_DMA+0x208>)
 8000ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff6:	0c9a      	lsrs	r2, r3, #18
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	4413      	add	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001000:	e002      	b.n	8001008 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3b01      	subs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1f9      	bne.n	8001002 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800101c:	d107      	bne.n	800102e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800102c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b01      	cmp	r3, #1
 800103a:	f040 80a3 	bne.w	8001184 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001042:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001046:	f023 0301 	bic.w	r3, r3, #1
 800104a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800105c:	2b00      	cmp	r3, #0
 800105e:	d007      	beq.n	8001070 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001068:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800107c:	d106      	bne.n	800108c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001082:	f023 0206 	bic.w	r2, r3, #6
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	645a      	str	r2, [r3, #68]	@ 0x44
 800108a:	e002      	b.n	8001092 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2200      	movs	r2, #0
 8001090:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2200      	movs	r2, #0
 8001096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800109a:	4b45      	ldr	r3, [pc, #276]	@ (80011b0 <HAL_ADC_Start_DMA+0x20c>)
 800109c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010a2:	4a44      	ldr	r2, [pc, #272]	@ (80011b4 <HAL_ADC_Start_DMA+0x210>)
 80010a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010aa:	4a43      	ldr	r2, [pc, #268]	@ (80011b8 <HAL_ADC_Start_DMA+0x214>)
 80010ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80010b2:	4a42      	ldr	r2, [pc, #264]	@ (80011bc <HAL_ADC_Start_DMA+0x218>)
 80010b4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80010ce:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80010de:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	334c      	adds	r3, #76	@ 0x4c
 80010ea:	4619      	mov	r1, r3
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f000 fcb6 	bl	8001a60 <HAL_DMA_Start_IT>
 80010f4:	4603      	mov	r3, r0
 80010f6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 031f 	and.w	r3, r3, #31
 8001100:	2b00      	cmp	r3, #0
 8001102:	d12a      	bne.n	800115a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2d      	ldr	r2, [pc, #180]	@ (80011c0 <HAL_ADC_Start_DMA+0x21c>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d015      	beq.n	800113a <HAL_ADC_Start_DMA+0x196>
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a2c      	ldr	r2, [pc, #176]	@ (80011c4 <HAL_ADC_Start_DMA+0x220>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d105      	bne.n	8001124 <HAL_ADC_Start_DMA+0x180>
 8001118:	4b25      	ldr	r3, [pc, #148]	@ (80011b0 <HAL_ADC_Start_DMA+0x20c>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00a      	beq.n	800113a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <HAL_ADC_Start_DMA+0x224>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d136      	bne.n	800119c <HAL_ADC_Start_DMA+0x1f8>
 800112e:	4b20      	ldr	r3, [pc, #128]	@ (80011b0 <HAL_ADC_Start_DMA+0x20c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 0310 	and.w	r3, r3, #16
 8001136:	2b00      	cmp	r3, #0
 8001138:	d130      	bne.n	800119c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d129      	bne.n	800119c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689a      	ldr	r2, [r3, #8]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	e020      	b.n	800119c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a18      	ldr	r2, [pc, #96]	@ (80011c0 <HAL_ADC_Start_DMA+0x21c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d11b      	bne.n	800119c <HAL_ADC_Start_DMA+0x1f8>
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d114      	bne.n	800119c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689a      	ldr	r2, [r3, #8]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	e00b      	b.n	800119c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001188:	f043 0210 	orr.w	r2, r3, #16
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001194:	f043 0201 	orr.w	r2, r3, #1
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 800119c:	7ffb      	ldrb	r3, [r7, #31]
}
 800119e:	4618      	mov	r0, r3
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000000 	.word	0x20000000
 80011ac:	431bde83 	.word	0x431bde83
 80011b0:	40012300 	.word	0x40012300
 80011b4:	0800163d 	.word	0x0800163d
 80011b8:	080016f7 	.word	0x080016f7
 80011bc:	08001713 	.word	0x08001713
 80011c0:	40012000 	.word	0x40012000
 80011c4:	40012100 	.word	0x40012100
 80011c8:	40012200 	.word	0x40012200

080011cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x1c>
 80011f8:	2302      	movs	r3, #2
 80011fa:	e113      	b.n	8001424 <HAL_ADC_ConfigChannel+0x244>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b09      	cmp	r3, #9
 800120a:	d925      	bls.n	8001258 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68d9      	ldr	r1, [r3, #12]
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	b29b      	uxth	r3, r3
 8001218:	461a      	mov	r2, r3
 800121a:	4613      	mov	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	4413      	add	r3, r2
 8001220:	3b1e      	subs	r3, #30
 8001222:	2207      	movs	r2, #7
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43da      	mvns	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	400a      	ands	r2, r1
 8001230:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	68d9      	ldr	r1, [r3, #12]
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	b29b      	uxth	r3, r3
 8001242:	4618      	mov	r0, r3
 8001244:	4603      	mov	r3, r0
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	4403      	add	r3, r0
 800124a:	3b1e      	subs	r3, #30
 800124c:	409a      	lsls	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	e022      	b.n	800129e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6919      	ldr	r1, [r3, #16]
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	b29b      	uxth	r3, r3
 8001264:	461a      	mov	r2, r3
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	2207      	movs	r2, #7
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	400a      	ands	r2, r1
 800127a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6919      	ldr	r1, [r3, #16]
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689a      	ldr	r2, [r3, #8]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	4618      	mov	r0, r3
 800128e:	4603      	mov	r3, r0
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4403      	add	r3, r0
 8001294:	409a      	lsls	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	430a      	orrs	r2, r1
 800129c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d824      	bhi.n	80012f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	4413      	add	r3, r2
 80012b6:	3b05      	subs	r3, #5
 80012b8:	221f      	movs	r2, #31
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43da      	mvns	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	400a      	ands	r2, r1
 80012c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	4618      	mov	r0, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	4413      	add	r3, r2
 80012e0:	3b05      	subs	r3, #5
 80012e2:	fa00 f203 	lsl.w	r2, r0, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80012ee:	e04c      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b0c      	cmp	r3, #12
 80012f6:	d824      	bhi.n	8001342 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b23      	subs	r3, #35	@ 0x23
 800130a:	221f      	movs	r2, #31
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	43da      	mvns	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	400a      	ands	r2, r1
 8001318:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	b29b      	uxth	r3, r3
 8001326:	4618      	mov	r0, r3
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	4613      	mov	r3, r2
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	3b23      	subs	r3, #35	@ 0x23
 8001334:	fa00 f203 	lsl.w	r2, r0, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001340:	e023      	b.n	800138a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	3b41      	subs	r3, #65	@ 0x41
 8001354:	221f      	movs	r2, #31
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	400a      	ands	r2, r1
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	b29b      	uxth	r3, r3
 8001370:	4618      	mov	r0, r3
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	4613      	mov	r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	4413      	add	r3, r2
 800137c:	3b41      	subs	r3, #65	@ 0x41
 800137e:	fa00 f203 	lsl.w	r2, r0, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138a:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <HAL_ADC_ConfigChannel+0x250>)
 800138c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a28      	ldr	r2, [pc, #160]	@ (8001434 <HAL_ADC_ConfigChannel+0x254>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d10f      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b12      	cmp	r3, #18
 800139e:	d10b      	bne.n	80013b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001434 <HAL_ADC_ConfigChannel+0x254>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12b      	bne.n	800141a <HAL_ADC_ConfigChannel+0x23a>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001438 <HAL_ADC_ConfigChannel+0x258>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d003      	beq.n	80013d4 <HAL_ADC_ConfigChannel+0x1f4>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b11      	cmp	r3, #17
 80013d2:	d122      	bne.n	800141a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <HAL_ADC_ConfigChannel+0x258>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d111      	bne.n	800141a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_ADC_ConfigChannel+0x25c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a11      	ldr	r2, [pc, #68]	@ (8001440 <HAL_ADC_ConfigChannel+0x260>)
 80013fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001400:	0c9a      	lsrs	r2, r3, #18
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800140c:	e002      	b.n	8001414 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3b01      	subs	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f9      	bne.n	800140e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2200      	movs	r2, #0
 800141e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	40012300 	.word	0x40012300
 8001434:	40012000 	.word	0x40012000
 8001438:	10000012 	.word	0x10000012
 800143c:	20000000 	.word	0x20000000
 8001440:	431bde83 	.word	0x431bde83

08001444 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144c:	4b79      	ldr	r3, [pc, #484]	@ (8001634 <ADC_Init+0x1f0>)
 800144e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	685a      	ldr	r2, [r3, #4]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	431a      	orrs	r2, r3
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	685a      	ldr	r2, [r3, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001478:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6859      	ldr	r1, [r3, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	021a      	lsls	r2, r3, #8
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800149c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	6859      	ldr	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	689a      	ldr	r2, [r3, #8]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6899      	ldr	r1, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d6:	4a58      	ldr	r2, [pc, #352]	@ (8001638 <ADC_Init+0x1f4>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d022      	beq.n	8001522 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80014ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6899      	ldr	r1, [r3, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	430a      	orrs	r2, r1
 80014fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689a      	ldr	r2, [r3, #8]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800150c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6899      	ldr	r1, [r3, #8]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	430a      	orrs	r2, r1
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	e00f      	b.n	8001542 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689a      	ldr	r2, [r3, #8]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001530:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689a      	ldr	r2, [r3, #8]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001540:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 0202 	bic.w	r2, r2, #2
 8001550:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	7e1b      	ldrb	r3, [r3, #24]
 800155c:	005a      	lsls	r2, r3, #1
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d01b      	beq.n	80015a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800157e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	685a      	ldr	r2, [r3, #4]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800158e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6859      	ldr	r1, [r3, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800159a:	3b01      	subs	r3, #1
 800159c:	035a      	lsls	r2, r3, #13
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	430a      	orrs	r2, r1
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	e007      	b.n	80015b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80015b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	051a      	lsls	r2, r3, #20
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80015ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80015fa:	025a      	lsls	r2, r3, #9
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	029a      	lsls	r2, r3, #10
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	609a      	str	r2, [r3, #8]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	40012300 	.word	0x40012300
 8001638:	0f000001 	.word	0x0f000001

0800163c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001648:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001652:	2b00      	cmp	r3, #0
 8001654:	d13c      	bne.n	80016d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d12b      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001674:	2b00      	cmp	r3, #0
 8001676:	d127      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001690:	2b00      	cmp	r3, #0
 8001692:	d119      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f022 0220 	bic.w	r2, r2, #32
 80016a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d105      	bne.n	80016c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c0:	f043 0201 	orr.w	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7fe ff87 	bl	80005dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016ce:	e00e      	b.n	80016ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	f003 0310 	and.w	r3, r3, #16
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f7ff fd75 	bl	80011cc <HAL_ADC_ErrorCallback>
}
 80016e2:	e004      	b.n	80016ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b084      	sub	sp, #16
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001702:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f7fe ff53 	bl	80005b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800170a:	bf00      	nop
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b084      	sub	sp, #16
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800171e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2240      	movs	r2, #64	@ 0x40
 8001724:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800172a:	f043 0204 	orr.w	r2, r3, #4
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7ff fd4a 	bl	80011cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001738:	bf00      	nop
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001750:	4b0c      	ldr	r3, [pc, #48]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800175c:	4013      	ands	r3, r2
 800175e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001768:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800176c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001772:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <__NVIC_SetPriorityGrouping+0x44>)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	60d3      	str	r3, [r2, #12]
}
 8001778:	bf00      	nop
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	e000ed00 	.word	0xe000ed00

08001788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800178c:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <__NVIC_GetPriorityGrouping+0x18>)
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	f003 0307 	and.w	r3, r3, #7
}
 8001796:	4618      	mov	r0, r3
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4603      	mov	r3, r0
 80017ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	db0b      	blt.n	80017ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	f003 021f 	and.w	r2, r3, #31
 80017bc:	4907      	ldr	r1, [pc, #28]	@ (80017dc <__NVIC_EnableIRQ+0x38>)
 80017be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	2001      	movs	r0, #1
 80017c6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100

080017e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	6039      	str	r1, [r7, #0]
 80017ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	db0a      	blt.n	800180a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	490c      	ldr	r1, [pc, #48]	@ (800182c <__NVIC_SetPriority+0x4c>)
 80017fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fe:	0112      	lsls	r2, r2, #4
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	440b      	add	r3, r1
 8001804:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001808:	e00a      	b.n	8001820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4908      	ldr	r1, [pc, #32]	@ (8001830 <__NVIC_SetPriority+0x50>)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	3b04      	subs	r3, #4
 8001818:	0112      	lsls	r2, r2, #4
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	440b      	add	r3, r1
 800181e:	761a      	strb	r2, [r3, #24]
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr
 800182c:	e000e100 	.word	0xe000e100
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	@ 0x24
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f1c3 0307 	rsb	r3, r3, #7
 800184e:	2b04      	cmp	r3, #4
 8001850:	bf28      	it	cs
 8001852:	2304      	movcs	r3, #4
 8001854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	3304      	adds	r3, #4
 800185a:	2b06      	cmp	r3, #6
 800185c:	d902      	bls.n	8001864 <NVIC_EncodePriority+0x30>
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	3b03      	subs	r3, #3
 8001862:	e000      	b.n	8001866 <NVIC_EncodePriority+0x32>
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001868:	f04f 32ff 	mov.w	r2, #4294967295
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43da      	mvns	r2, r3
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	401a      	ands	r2, r3
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800187c:	f04f 31ff 	mov.w	r1, #4294967295
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa01 f303 	lsl.w	r3, r1, r3
 8001886:	43d9      	mvns	r1, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	4313      	orrs	r3, r2
         );
}
 800188e:	4618      	mov	r0, r3
 8001890:	3724      	adds	r7, #36	@ 0x24
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff ff4c 	bl	8001740 <__NVIC_SetPriorityGrouping>
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
 80018bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018be:	2300      	movs	r3, #0
 80018c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018c2:	f7ff ff61 	bl	8001788 <__NVIC_GetPriorityGrouping>
 80018c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f7ff ffb1 	bl	8001834 <NVIC_EncodePriority>
 80018d2:	4602      	mov	r2, r0
 80018d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff80 	bl	80017e0 <__NVIC_SetPriority>
}
 80018e0:	bf00      	nop
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7ff ff54 	bl	80017a4 <__NVIC_EnableIRQ>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff faf8 	bl	8000f04 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e099      	b.n	8001a54 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001940:	e00f      	b.n	8001962 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001942:	f7ff fadf 	bl	8000f04 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b05      	cmp	r3, #5
 800194e:	d908      	bls.n	8001962 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2220      	movs	r2, #32
 8001954:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2203      	movs	r2, #3
 800195a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e078      	b.n	8001a54 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1e8      	bne.n	8001942 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	4b38      	ldr	r3, [pc, #224]	@ (8001a5c <HAL_DMA_Init+0x158>)
 800197c:	4013      	ands	r3, r2
 800197e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800198e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019ae:	697a      	ldr	r2, [r7, #20]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d107      	bne.n	80019cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c4:	4313      	orrs	r3, r2
 80019c6:	697a      	ldr	r2, [r7, #20]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	697a      	ldr	r2, [r7, #20]
 80019d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f023 0307 	bic.w	r3, r3, #7
 80019e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d117      	bne.n	8001a26 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f000 fa6f 	bl	8001eec <DMA_CheckFifoParam>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2240      	movs	r2, #64	@ 0x40
 8001a18:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001a22:	2301      	movs	r3, #1
 8001a24:	e016      	b.n	8001a54 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fa26 	bl	8001e80 <DMA_CalcBaseAndBitshift>
 8001a34:	4603      	mov	r3, r0
 8001a36:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3c:	223f      	movs	r2, #63	@ 0x3f
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	f010803f 	.word	0xf010803f

08001a60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_DMA_Start_IT+0x26>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e040      	b.n	8001b08 <HAL_DMA_Start_IT+0xa8>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d12f      	bne.n	8001afa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f9b8 	bl	8001e24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab8:	223f      	movs	r2, #63	@ 0x3f
 8001aba:	409a      	lsls	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0216 	orr.w	r2, r2, #22
 8001ace:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0208 	orr.w	r2, r2, #8
 8001ae6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0201 	orr.w	r2, r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e005      	b.n	8001b06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b02:	2302      	movs	r3, #2
 8001b04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3718      	adds	r7, #24
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d58 <HAL_DMA_IRQHandler+0x248>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a8e      	ldr	r2, [pc, #568]	@ (8001d5c <HAL_DMA_IRQHandler+0x24c>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0a9b      	lsrs	r3, r3, #10
 8001b28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3a:	2208      	movs	r2, #8
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01a      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0304 	and.w	r3, r3, #4
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0204 	bic.w	r2, r2, #4
 8001b62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b68:	2208      	movs	r2, #8
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b74:	f043 0201 	orr.w	r2, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b80:	2201      	movs	r2, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d012      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d00b      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001baa:	f043 0202 	orr.w	r2, r3, #2
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb6:	2204      	movs	r2, #4
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d012      	beq.n	8001be8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d00b      	beq.n	8001be8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001be0:	f043 0204 	orr.w	r2, r3, #4
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bec:	2210      	movs	r2, #16
 8001bee:	409a      	lsls	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d043      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d03c      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	409a      	lsls	r2, r3
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d018      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d108      	bne.n	8001c40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d024      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	4798      	blx	r3
 8001c3e:	e01f      	b.n	8001c80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d01b      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	4798      	blx	r3
 8001c50:	e016      	b.n	8001c80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0208 	bic.w	r2, r2, #8
 8001c6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c84:	2220      	movs	r2, #32
 8001c86:	409a      	lsls	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f000 808f 	beq.w	8001db0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8087 	beq.w	8001db0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b05      	cmp	r3, #5
 8001cb8:	d136      	bne.n	8001d28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0216 	bic.w	r2, r2, #22
 8001cc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001cd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d103      	bne.n	8001cea <HAL_DMA_IRQHandler+0x1da>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f022 0208 	bic.w	r2, r2, #8
 8001cf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cfe:	223f      	movs	r2, #63	@ 0x3f
 8001d00:	409a      	lsls	r2, r3
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d07e      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	4798      	blx	r3
        }
        return;
 8001d26:	e079      	b.n	8001e1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d10d      	bne.n	8001d60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d031      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	4798      	blx	r3
 8001d54:	e02c      	b.n	8001db0 <HAL_DMA_IRQHandler+0x2a0>
 8001d56:	bf00      	nop
 8001d58:	20000000 	.word	0x20000000
 8001d5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d023      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	4798      	blx	r3
 8001d70:	e01e      	b.n	8001db0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10f      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0210 	bic.w	r2, r2, #16
 8001d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d032      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d022      	beq.n	8001e0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2205      	movs	r2, #5
 8001dc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0201 	bic.w	r2, r2, #1
 8001dda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	3301      	adds	r3, #1
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d307      	bcc.n	8001df8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f2      	bne.n	8001ddc <HAL_DMA_IRQHandler+0x2cc>
 8001df6:	e000      	b.n	8001dfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001df8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	4798      	blx	r3
 8001e1a:	e000      	b.n	8001e1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e1c:	bf00      	nop
    }
  }
}
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	683a      	ldr	r2, [r7, #0]
 8001e48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b40      	cmp	r3, #64	@ 0x40
 8001e50:	d108      	bne.n	8001e64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e62:	e007      	b.n	8001e74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	60da      	str	r2, [r3, #12]
}
 8001e74:	bf00      	nop
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3b10      	subs	r3, #16
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <DMA_CalcBaseAndBitshift+0x64>)
 8001e92:	fba2 2303 	umull	r2, r3, r2, r3
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e9a:	4a13      	ldr	r2, [pc, #76]	@ (8001ee8 <DMA_CalcBaseAndBitshift+0x68>)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d909      	bls.n	8001ec2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eb6:	f023 0303 	bic.w	r3, r3, #3
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001ec0:	e007      	b.n	8001ed2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001eca:	f023 0303 	bic.w	r3, r3, #3
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	aaaaaaab 	.word	0xaaaaaaab
 8001ee8:	080049e0 	.word	0x080049e0

08001eec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d11f      	bne.n	8001f46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	2b03      	cmp	r3, #3
 8001f0a:	d856      	bhi.n	8001fba <DMA_CheckFifoParam+0xce>
 8001f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <DMA_CheckFifoParam+0x28>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f37 	.word	0x08001f37
 8001f1c:	08001f25 	.word	0x08001f25
 8001f20:	08001fbb 	.word	0x08001fbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d046      	beq.n	8001fbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f34:	e043      	b.n	8001fbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f3e:	d140      	bne.n	8001fc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f44:	e03d      	b.n	8001fc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f4e:	d121      	bne.n	8001f94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b03      	cmp	r3, #3
 8001f54:	d837      	bhi.n	8001fc6 <DMA_CheckFifoParam+0xda>
 8001f56:	a201      	add	r2, pc, #4	@ (adr r2, 8001f5c <DMA_CheckFifoParam+0x70>)
 8001f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f5c:	08001f6d 	.word	0x08001f6d
 8001f60:	08001f73 	.word	0x08001f73
 8001f64:	08001f6d 	.word	0x08001f6d
 8001f68:	08001f85 	.word	0x08001f85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f70:	e030      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d025      	beq.n	8001fca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f82:	e022      	b.n	8001fca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f8c:	d11f      	bne.n	8001fce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f92:	e01c      	b.n	8001fce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d903      	bls.n	8001fa2 <DMA_CheckFifoParam+0xb6>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d003      	beq.n	8001fa8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fa0:	e018      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa6:	e015      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00e      	beq.n	8001fd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb8:	e00b      	b.n	8001fd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fba:	bf00      	nop
 8001fbc:	e00a      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fbe:	bf00      	nop
 8001fc0:	e008      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc2:	bf00      	nop
 8001fc4:	e006      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fc6:	bf00      	nop
 8001fc8:	e004      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e002      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fce:	bf00      	nop
 8001fd0:	e000      	b.n	8001fd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
    }
  } 
  
  return status; 
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop

08001fe4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b089      	sub	sp, #36	@ 0x24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	e165      	b.n	80022cc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002000:	2201      	movs	r2, #1
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4013      	ands	r3, r2
 8002012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	429a      	cmp	r2, r3
 800201a:	f040 8154 	bne.w	80022c6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f003 0303 	and.w	r3, r3, #3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d005      	beq.n	8002036 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002032:	2b02      	cmp	r3, #2
 8002034:	d130      	bne.n	8002098 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800206c:	2201      	movs	r2, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	091b      	lsrs	r3, r3, #4
 8002082:	f003 0201 	and.w	r2, r3, #1
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4313      	orrs	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f003 0303 	and.w	r3, r3, #3
 80020a0:	2b03      	cmp	r3, #3
 80020a2:	d017      	beq.n	80020d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	2203      	movs	r2, #3
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689a      	ldr	r2, [r3, #8]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d123      	bne.n	8002128 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	08da      	lsrs	r2, r3, #3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3208      	adds	r2, #8
 80020e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	220f      	movs	r2, #15
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	08da      	lsrs	r2, r3, #3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3208      	adds	r2, #8
 8002122:	69b9      	ldr	r1, [r7, #24]
 8002124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f003 0203 	and.w	r2, r3, #3
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4313      	orrs	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002164:	2b00      	cmp	r3, #0
 8002166:	f000 80ae 	beq.w	80022c6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	4b5d      	ldr	r3, [pc, #372]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002172:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 8002174:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002178:	6453      	str	r3, [r2, #68]	@ 0x44
 800217a:	4b5a      	ldr	r3, [pc, #360]	@ (80022e4 <HAL_GPIO_Init+0x300>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800217e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002186:	4a58      	ldr	r2, [pc, #352]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	089b      	lsrs	r3, r3, #2
 800218c:	3302      	adds	r3, #2
 800218e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	220f      	movs	r2, #15
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4f      	ldr	r2, [pc, #316]	@ (80022ec <HAL_GPIO_Init+0x308>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x21a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a4e      	ldr	r2, [pc, #312]	@ (80022f0 <HAL_GPIO_Init+0x30c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x216>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a4d      	ldr	r2, [pc, #308]	@ (80022f4 <HAL_GPIO_Init+0x310>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x212>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a4c      	ldr	r2, [pc, #304]	@ (80022f8 <HAL_GPIO_Init+0x314>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x20e>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a4b      	ldr	r2, [pc, #300]	@ (80022fc <HAL_GPIO_Init+0x318>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x20a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	@ (8002300 <HAL_GPIO_Init+0x31c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x206>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	@ (8002304 <HAL_GPIO_Init+0x320>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x202>
 80021e2:	2306      	movs	r3, #6
 80021e4:	e00c      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00a      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ea:	2305      	movs	r3, #5
 80021ec:	e008      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021ee:	2304      	movs	r3, #4
 80021f0:	e006      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f2:	2303      	movs	r3, #3
 80021f4:	e004      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e002      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <HAL_GPIO_Init+0x21c>
 80021fe:	2300      	movs	r3, #0
 8002200:	69fa      	ldr	r2, [r7, #28]
 8002202:	f002 0203 	and.w	r2, r2, #3
 8002206:	0092      	lsls	r2, r2, #2
 8002208:	4093      	lsls	r3, r2
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002210:	4935      	ldr	r1, [pc, #212]	@ (80022e8 <HAL_GPIO_Init+0x304>)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	089b      	lsrs	r3, r3, #2
 8002216:	3302      	adds	r3, #2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002242:	4a31      	ldr	r2, [pc, #196]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002244:	69bb      	ldr	r3, [r7, #24]
 8002246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002248:	4b2f      	ldr	r3, [pc, #188]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800226c:	4a26      	ldr	r2, [pc, #152]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002272:	4b25      	ldr	r3, [pc, #148]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4313      	orrs	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002296:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_GPIO_Init+0x324>)
 8002298:	69bb      	ldr	r3, [r7, #24]
 800229a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800229c:	4b1a      	ldr	r3, [pc, #104]	@ (8002308 <HAL_GPIO_Init+0x324>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d003      	beq.n	80022c0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4313      	orrs	r3, r2
 80022be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022c0:	4a11      	ldr	r2, [pc, #68]	@ (8002308 <HAL_GPIO_Init+0x324>)
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	3301      	adds	r3, #1
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	f67f ae96 	bls.w	8002000 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3724      	adds	r7, #36	@ 0x24
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40013800 	.word	0x40013800
 80022ec:	40020000 	.word	0x40020000
 80022f0:	40020400 	.word	0x40020400
 80022f4:	40020800 	.word	0x40020800
 80022f8:	40020c00 	.word	0x40020c00
 80022fc:	40021000 	.word	0x40021000
 8002300:	40021400 	.word	0x40021400
 8002304:	40021800 	.word	0x40021800
 8002308:	40013c00 	.word	0x40013c00

0800230c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0cc      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002320:	4b68      	ldr	r3, [pc, #416]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 030f 	and.w	r3, r3, #15
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d90c      	bls.n	8002348 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b65      	ldr	r3, [pc, #404]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b63      	ldr	r3, [pc, #396]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e0b8      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d020      	beq.n	8002396 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002360:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4a58      	ldr	r2, [pc, #352]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800236a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002378:	4b53      	ldr	r3, [pc, #332]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	4a52      	ldr	r2, [pc, #328]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002382:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002384:	4b50      	ldr	r3, [pc, #320]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	494d      	ldr	r1, [pc, #308]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002392:	4313      	orrs	r3, r2
 8002394:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0301 	and.w	r3, r3, #1
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d044      	beq.n	800242c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	4b47      	ldr	r3, [pc, #284]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d119      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e07f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d003      	beq.n	80023ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ca:	4b3f      	ldr	r3, [pc, #252]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023da:	4b3b      	ldr	r3, [pc, #236]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e067      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4934      	ldr	r1, [pc, #208]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023fc:	f7fe fd82 	bl	8000f04 <HAL_GetTick>
 8002400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002402:	e00a      	b.n	800241a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002404:	f7fe fd7e 	bl	8000f04 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04f      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241a:	4b2b      	ldr	r3, [pc, #172]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 020c 	and.w	r2, r3, #12
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	429a      	cmp	r2, r3
 800242a:	d1eb      	bne.n	8002404 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800242c:	4b25      	ldr	r3, [pc, #148]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d20c      	bcs.n	8002454 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b20      	ldr	r3, [pc, #128]	@ (80024c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e032      	b.n	80024ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002460:	4b19      	ldr	r3, [pc, #100]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	4916      	ldr	r1, [pc, #88]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	4313      	orrs	r3, r2
 8002470:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0308 	and.w	r3, r3, #8
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	00db      	lsls	r3, r3, #3
 800248c:	490e      	ldr	r1, [pc, #56]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	4313      	orrs	r3, r2
 8002490:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002492:	f000 f887 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002496:	4602      	mov	r2, r0
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	490a      	ldr	r1, [pc, #40]	@ (80024cc <HAL_RCC_ClockConfig+0x1c0>)
 80024a4:	5ccb      	ldrb	r3, [r1, r3]
 80024a6:	fa22 f303 	lsr.w	r3, r2, r3
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80024ae:	4b09      	ldr	r3, [pc, #36]	@ (80024d4 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fbc8 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40023c00 	.word	0x40023c00
 80024c8:	40023800 	.word	0x40023800
 80024cc:	080049c8 	.word	0x080049c8
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000004 	.word	0x20000004

080024d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <HAL_RCC_GetHCLKFreq+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000000 	.word	0x20000000

080024f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024f4:	f7ff fff0 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0a9b      	lsrs	r3, r3, #10
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4903      	ldr	r1, [pc, #12]	@ (8002514 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40023800 	.word	0x40023800
 8002514:	080049d8 	.word	0x080049d8

08002518 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800251c:	f7ff ffdc 	bl	80024d8 <HAL_RCC_GetHCLKFreq>
 8002520:	4602      	mov	r2, r0
 8002522:	4b05      	ldr	r3, [pc, #20]	@ (8002538 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	0b5b      	lsrs	r3, r3, #13
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	4903      	ldr	r1, [pc, #12]	@ (800253c <HAL_RCC_GetPCLK2Freq+0x24>)
 800252e:	5ccb      	ldrb	r3, [r1, r3]
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002534:	4618      	mov	r0, r3
 8002536:	bd80      	pop	{r7, pc}
 8002538:	40023800 	.word	0x40023800
 800253c:	080049d8 	.word	0x080049d8

08002540 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	220f      	movs	r2, #15
 800254e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002550:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_RCC_GetClockConfig+0x5c>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 0203 	and.w	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800255c:	4b0f      	ldr	r3, [pc, #60]	@ (800259c <HAL_RCC_GetClockConfig+0x5c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002568:	4b0c      	ldr	r3, [pc, #48]	@ (800259c <HAL_RCC_GetClockConfig+0x5c>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002574:	4b09      	ldr	r3, [pc, #36]	@ (800259c <HAL_RCC_GetClockConfig+0x5c>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	08db      	lsrs	r3, r3, #3
 800257a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002582:	4b07      	ldr	r3, [pc, #28]	@ (80025a0 <HAL_RCC_GetClockConfig+0x60>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 020f 	and.w	r2, r3, #15
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	601a      	str	r2, [r3, #0]
}
 800258e:	bf00      	nop
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800
 80025a0:	40023c00 	.word	0x40023c00

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b0a6      	sub	sp, #152	@ 0x98
 80025aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025ca:	4bc8      	ldr	r3, [pc, #800]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f003 030c 	and.w	r3, r3, #12
 80025d2:	2b0c      	cmp	r3, #12
 80025d4:	f200 817e 	bhi.w	80028d4 <HAL_RCC_GetSysClockFreq+0x330>
 80025d8:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	08002615 	.word	0x08002615
 80025e4:	080028d5 	.word	0x080028d5
 80025e8:	080028d5 	.word	0x080028d5
 80025ec:	080028d5 	.word	0x080028d5
 80025f0:	0800261d 	.word	0x0800261d
 80025f4:	080028d5 	.word	0x080028d5
 80025f8:	080028d5 	.word	0x080028d5
 80025fc:	080028d5 	.word	0x080028d5
 8002600:	08002625 	.word	0x08002625
 8002604:	080028d5 	.word	0x080028d5
 8002608:	080028d5 	.word	0x080028d5
 800260c:	080028d5 	.word	0x080028d5
 8002610:	0800278f 	.word	0x0800278f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4bb6      	ldr	r3, [pc, #728]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800261a:	e15f      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4bb5      	ldr	r3, [pc, #724]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800261e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002622:	e15b      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002624:	4bb1      	ldr	r3, [pc, #708]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800262c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002630:	4bae      	ldr	r3, [pc, #696]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d031      	beq.n	80026a0 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263c:	4bab      	ldr	r3, [pc, #684]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	099b      	lsrs	r3, r3, #6
 8002642:	2200      	movs	r2, #0
 8002644:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002646:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002648:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800264a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800264e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002650:	2300      	movs	r3, #0
 8002652:	667b      	str	r3, [r7, #100]	@ 0x64
 8002654:	4ba7      	ldr	r3, [pc, #668]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002656:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800265a:	462a      	mov	r2, r5
 800265c:	fb03 f202 	mul.w	r2, r3, r2
 8002660:	2300      	movs	r3, #0
 8002662:	4621      	mov	r1, r4
 8002664:	fb01 f303 	mul.w	r3, r1, r3
 8002668:	4413      	add	r3, r2
 800266a:	4aa2      	ldr	r2, [pc, #648]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x350>)
 800266c:	4621      	mov	r1, r4
 800266e:	fba1 1202 	umull	r1, r2, r1, r2
 8002672:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002674:	460a      	mov	r2, r1
 8002676:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002678:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800267a:	4413      	add	r3, r2
 800267c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800267e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002682:	2200      	movs	r2, #0
 8002684:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002686:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002688:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800268c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002690:	f7fd fe16 	bl	80002c0 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800269e:	e064      	b.n	800276a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026a0:	4b92      	ldr	r3, [pc, #584]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	2200      	movs	r2, #0
 80026a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80026aa:	657a      	str	r2, [r7, #84]	@ 0x54
 80026ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026b4:	2300      	movs	r3, #0
 80026b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026b8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80026bc:	4622      	mov	r2, r4
 80026be:	462b      	mov	r3, r5
 80026c0:	f04f 0000 	mov.w	r0, #0
 80026c4:	f04f 0100 	mov.w	r1, #0
 80026c8:	0159      	lsls	r1, r3, #5
 80026ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ce:	0150      	lsls	r0, r2, #5
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4621      	mov	r1, r4
 80026d6:	1a51      	subs	r1, r2, r1
 80026d8:	6139      	str	r1, [r7, #16]
 80026da:	4629      	mov	r1, r5
 80026dc:	eb63 0301 	sbc.w	r3, r3, r1
 80026e0:	617b      	str	r3, [r7, #20]
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ee:	4659      	mov	r1, fp
 80026f0:	018b      	lsls	r3, r1, #6
 80026f2:	4651      	mov	r1, sl
 80026f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f8:	4651      	mov	r1, sl
 80026fa:	018a      	lsls	r2, r1, #6
 80026fc:	4651      	mov	r1, sl
 80026fe:	ebb2 0801 	subs.w	r8, r2, r1
 8002702:	4659      	mov	r1, fp
 8002704:	eb63 0901 	sbc.w	r9, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002714:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002718:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800271c:	4690      	mov	r8, r2
 800271e:	4699      	mov	r9, r3
 8002720:	4623      	mov	r3, r4
 8002722:	eb18 0303 	adds.w	r3, r8, r3
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	462b      	mov	r3, r5
 800272a:	eb49 0303 	adc.w	r3, r9, r3
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	f04f 0200 	mov.w	r2, #0
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800273c:	4629      	mov	r1, r5
 800273e:	028b      	lsls	r3, r1, #10
 8002740:	4621      	mov	r1, r4
 8002742:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002746:	4621      	mov	r1, r4
 8002748:	028a      	lsls	r2, r1, #10
 800274a:	4610      	mov	r0, r2
 800274c:	4619      	mov	r1, r3
 800274e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002752:	2200      	movs	r2, #0
 8002754:	643b      	str	r3, [r7, #64]	@ 0x40
 8002756:	647a      	str	r2, [r7, #68]	@ 0x44
 8002758:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800275c:	f7fd fdb0 	bl	80002c0 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800276a:	4b60      	ldr	r3, [pc, #384]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0c1b      	lsrs	r3, r3, #16
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	3301      	adds	r3, #1
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800277c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002780:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800278c:	e0a6      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800278e:	4b57      	ldr	r3, [pc, #348]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002796:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800279a:	4b54      	ldr	r3, [pc, #336]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d02a      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027a6:	4b51      	ldr	r3, [pc, #324]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	099b      	lsrs	r3, r3, #6
 80027ac:	2200      	movs	r2, #0
 80027ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027b8:	2100      	movs	r1, #0
 80027ba:	4b4e      	ldr	r3, [pc, #312]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80027bc:	fb03 f201 	mul.w	r2, r3, r1
 80027c0:	2300      	movs	r3, #0
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	4a4a      	ldr	r2, [pc, #296]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x350>)
 80027ca:	fba0 1202 	umull	r1, r2, r0, r2
 80027ce:	677a      	str	r2, [r7, #116]	@ 0x74
 80027d0:	460a      	mov	r2, r1
 80027d2:	673a      	str	r2, [r7, #112]	@ 0x70
 80027d4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80027d6:	4413      	add	r3, r2
 80027d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80027da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80027de:	2200      	movs	r2, #0
 80027e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80027e2:	637a      	str	r2, [r7, #52]	@ 0x34
 80027e4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80027e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80027ec:	f7fd fd68 	bl	80002c0 <__aeabi_uldivmod>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4613      	mov	r3, r2
 80027f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80027fa:	e05b      	b.n	80028b4 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fc:	4b3b      	ldr	r3, [pc, #236]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	2200      	movs	r2, #0
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002806:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
 8002814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	f04f 0000 	mov.w	r0, #0
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	0159      	lsls	r1, r3, #5
 8002826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282a:	0150      	lsls	r0, r2, #5
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4641      	mov	r1, r8
 8002832:	ebb2 0a01 	subs.w	sl, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb63 0b01 	sbc.w	fp, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800284c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002850:	ebb2 040a 	subs.w	r4, r2, sl
 8002854:	eb63 050b 	sbc.w	r5, r3, fp
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	00eb      	lsls	r3, r5, #3
 8002862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	4614      	mov	r4, r2
 800286a:	461d      	mov	r5, r3
 800286c:	4643      	mov	r3, r8
 800286e:	18e3      	adds	r3, r4, r3
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	464b      	mov	r3, r9
 8002874:	eb45 0303 	adc.w	r3, r5, r3
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002886:	4629      	mov	r1, r5
 8002888:	028b      	lsls	r3, r1, #10
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002890:	4621      	mov	r1, r4
 8002892:	028a      	lsls	r2, r1, #10
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800289c:	2200      	movs	r2, #0
 800289e:	61bb      	str	r3, [r7, #24]
 80028a0:	61fa      	str	r2, [r7, #28]
 80028a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a6:	f7fd fd0b 	bl	80002c0 <__aeabi_uldivmod>
 80028aa:	4602      	mov	r2, r0
 80028ac:	460b      	mov	r3, r1
 80028ae:	4613      	mov	r3, r2
 80028b0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028b4:	4b0d      	ldr	r3, [pc, #52]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x348>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	0f1b      	lsrs	r3, r3, #28
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80028c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028d2:	e003      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028d4:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80028d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80028da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3798      	adds	r7, #152	@ 0x98
 80028e4:	46bd      	mov	sp, r7
 80028e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ea:	bf00      	nop
 80028ec:	40023800 	.word	0x40023800
 80028f0:	00f42400 	.word	0x00f42400
 80028f4:	017d7840 	.word	0x017d7840

080028f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e28d      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8083 	beq.w	8002a1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002918:	4b94      	ldr	r3, [pc, #592]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	f003 030c 	and.w	r3, r3, #12
 8002920:	2b04      	cmp	r3, #4
 8002922:	d019      	beq.n	8002958 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002924:	4b91      	ldr	r3, [pc, #580]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
        || \
 800292c:	2b08      	cmp	r3, #8
 800292e:	d106      	bne.n	800293e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002930:	4b8e      	ldr	r3, [pc, #568]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002938:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800293c:	d00c      	beq.n	8002958 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800293e:	4b8b      	ldr	r3, [pc, #556]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002946:	2b0c      	cmp	r3, #12
 8002948:	d112      	bne.n	8002970 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294a:	4b88      	ldr	r3, [pc, #544]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002952:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002956:	d10b      	bne.n	8002970 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002958:	4b84      	ldr	r3, [pc, #528]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d05b      	beq.n	8002a1c <HAL_RCC_OscConfig+0x124>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d157      	bne.n	8002a1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e25a      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002978:	d106      	bne.n	8002988 <HAL_RCC_OscConfig+0x90>
 800297a:	4b7c      	ldr	r3, [pc, #496]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a7b      	ldr	r2, [pc, #492]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002980:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	e01d      	b.n	80029c4 <HAL_RCC_OscConfig+0xcc>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0xb4>
 8002992:	4b76      	ldr	r3, [pc, #472]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a75      	ldr	r2, [pc, #468]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002998:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b73      	ldr	r3, [pc, #460]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a72      	ldr	r2, [pc, #456]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e00b      	b.n	80029c4 <HAL_RCC_OscConfig+0xcc>
 80029ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6e      	ldr	r2, [pc, #440]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4b6c      	ldr	r3, [pc, #432]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a6b      	ldr	r2, [pc, #428]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d013      	beq.n	80029f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7fe fa9a 	bl	8000f04 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029d4:	f7fe fa96 	bl	8000f04 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b64      	cmp	r3, #100	@ 0x64
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e21f      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e6:	4b61      	ldr	r3, [pc, #388]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d0f0      	beq.n	80029d4 <HAL_RCC_OscConfig+0xdc>
 80029f2:	e014      	b.n	8002a1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fa86 	bl	8000f04 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029fc:	f7fe fa82 	bl	8000f04 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b64      	cmp	r3, #100	@ 0x64
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e20b      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	4b57      	ldr	r3, [pc, #348]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x104>
 8002a1a:	e000      	b.n	8002a1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06f      	beq.n	8002b0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a2a:	4b50      	ldr	r3, [pc, #320]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d017      	beq.n	8002a66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a36:	4b4d      	ldr	r3, [pc, #308]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d105      	bne.n	8002a4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a42:	4b4a      	ldr	r3, [pc, #296]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b47      	ldr	r3, [pc, #284]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b44      	ldr	r3, [pc, #272]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b41      	ldr	r3, [pc, #260]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x186>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1d3      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4937      	ldr	r1, [pc, #220]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b34      	ldr	r3, [pc, #208]	@ (8002b70 <HAL_RCC_OscConfig+0x278>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe fa2f 	bl	8000f04 <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7fe fa2b 	bl	8000f04 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1b4      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	4b2b      	ldr	r3, [pc, #172]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b28      	ldr	r3, [pc, #160]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4925      	ldr	r1, [pc, #148]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b24      	ldr	r3, [pc, #144]	@ (8002b70 <HAL_RCC_OscConfig+0x278>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7fe fa0e 	bl	8000f04 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aec:	f7fe fa0a 	bl	8000f04 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e193      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b1b      	ldr	r3, [pc, #108]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d036      	beq.n	8002b84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b15      	ldr	r3, [pc, #84]	@ (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe f9ee 	bl	8000f04 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f9ea 	bl	8000f04 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e173      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002b6c <HAL_RCC_OscConfig+0x274>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x234>
 8002b4a:	e01b      	b.n	8002b84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	4b09      	ldr	r3, [pc, #36]	@ (8002b74 <HAL_RCC_OscConfig+0x27c>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7fe f9d7 	bl	8000f04 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	e00e      	b.n	8002b78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7fe f9d3 	bl	8000f04 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d907      	bls.n	8002b78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e15c      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	42470000 	.word	0x42470000
 8002b74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b78:	4b8a      	ldr	r3, [pc, #552]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002b7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ea      	bne.n	8002b5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f000 8097 	beq.w	8002cc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b92:	2300      	movs	r3, #0
 8002b94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b96:	4b83      	ldr	r3, [pc, #524]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	4a7e      	ldr	r2, [pc, #504]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb2:	4b7c      	ldr	r3, [pc, #496]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc2:	4b79      	ldr	r3, [pc, #484]	@ (8002da8 <HAL_RCC_OscConfig+0x4b0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d118      	bne.n	8002c00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bce:	4b76      	ldr	r3, [pc, #472]	@ (8002da8 <HAL_RCC_OscConfig+0x4b0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a75      	ldr	r2, [pc, #468]	@ (8002da8 <HAL_RCC_OscConfig+0x4b0>)
 8002bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bda:	f7fe f993 	bl	8000f04 <HAL_GetTick>
 8002bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be0:	e008      	b.n	8002bf4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe f98f 	bl	8000f04 <HAL_GetTick>
 8002be6:	4602      	mov	r2, r0
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	1ad3      	subs	r3, r2, r3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d901      	bls.n	8002bf4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	e118      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf4:	4b6c      	ldr	r3, [pc, #432]	@ (8002da8 <HAL_RCC_OscConfig+0x4b0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d0f0      	beq.n	8002be2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d106      	bne.n	8002c16 <HAL_RCC_OscConfig+0x31e>
 8002c08:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c0c:	4a65      	ldr	r2, [pc, #404]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c14:	e01c      	b.n	8002c50 <HAL_RCC_OscConfig+0x358>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	2b05      	cmp	r3, #5
 8002c1c:	d10c      	bne.n	8002c38 <HAL_RCC_OscConfig+0x340>
 8002c1e:	4b61      	ldr	r3, [pc, #388]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c22:	4a60      	ldr	r2, [pc, #384]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c24:	f043 0304 	orr.w	r3, r3, #4
 8002c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2e:	4a5d      	ldr	r2, [pc, #372]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c36:	e00b      	b.n	8002c50 <HAL_RCC_OscConfig+0x358>
 8002c38:	4b5a      	ldr	r3, [pc, #360]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a59      	ldr	r2, [pc, #356]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	f023 0301 	bic.w	r3, r3, #1
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c44:	4b57      	ldr	r3, [pc, #348]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c48:	4a56      	ldr	r2, [pc, #344]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c4a:	f023 0304 	bic.w	r3, r3, #4
 8002c4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d015      	beq.n	8002c84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c58:	f7fe f954 	bl	8000f04 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5e:	e00a      	b.n	8002c76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c60:	f7fe f950 	bl	8000f04 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e0d7      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	4b4b      	ldr	r3, [pc, #300]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0ee      	beq.n	8002c60 <HAL_RCC_OscConfig+0x368>
 8002c82:	e014      	b.n	8002cae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe f93e 	bl	8000f04 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fe f93a 	bl	8000f04 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e0c1      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca2:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1ee      	bne.n	8002c8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cae:	7dfb      	ldrb	r3, [r7, #23]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cbe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699b      	ldr	r3, [r3, #24]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80ad 	beq.w	8002e24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cca:	4b36      	ldr	r3, [pc, #216]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f003 030c 	and.w	r3, r3, #12
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d060      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d145      	bne.n	8002d6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cde:	4b33      	ldr	r3, [pc, #204]	@ (8002dac <HAL_RCC_OscConfig+0x4b4>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe f90e 	bl	8000f04 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cec:	f7fe f90a 	bl	8000f04 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e093      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfe:	4b29      	ldr	r3, [pc, #164]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d18:	019b      	lsls	r3, r3, #6
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	085b      	lsrs	r3, r3, #1
 8002d22:	3b01      	subs	r3, #1
 8002d24:	041b      	lsls	r3, r3, #16
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2c:	061b      	lsls	r3, r3, #24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d34:	071b      	lsls	r3, r3, #28
 8002d36:	491b      	ldr	r1, [pc, #108]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dac <HAL_RCC_OscConfig+0x4b4>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d42:	f7fe f8df 	bl	8000f04 <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7fe f8db 	bl	8000f04 <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e064      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5c:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x452>
 8002d68:	e05c      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b10      	ldr	r3, [pc, #64]	@ (8002dac <HAL_RCC_OscConfig+0x4b4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d70:	f7fe f8c8 	bl	8000f04 <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7fe f8c4 	bl	8000f04 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e04d      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x480>
 8002d96:	e045      	b.n	8002e24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d107      	bne.n	8002db0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e040      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40007000 	.word	0x40007000
 8002dac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <HAL_RCC_OscConfig+0x538>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d030      	beq.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d129      	bne.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d122      	bne.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dda:	68fa      	ldr	r2, [r7, #12]
 8002ddc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002de0:	4013      	ands	r3, r2
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002de6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d119      	bne.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df6:	085b      	lsrs	r3, r3, #1
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d10f      	bne.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fd fe8c 	bl	8000b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 fae6 	bl	8003444 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d001      	beq.n	8002eec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e046      	b.n	8002f7a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a23      	ldr	r2, [pc, #140]	@ (8002f88 <HAL_TIM_Base_Start+0xb4>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d022      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f06:	d01d      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8002f8c <HAL_TIM_Base_Start+0xb8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d018      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1e      	ldr	r2, [pc, #120]	@ (8002f90 <HAL_TIM_Base_Start+0xbc>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d013      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <HAL_TIM_Base_Start+0xc0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002f98 <HAL_TIM_Base_Start+0xc4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a19      	ldr	r2, [pc, #100]	@ (8002f9c <HAL_TIM_Base_Start+0xc8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_TIM_Base_Start+0x70>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <HAL_TIM_Base_Start+0xcc>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d111      	bne.n	8002f68 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d010      	beq.n	8002f78 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f66:	e007      	b.n	8002f78 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40010000 	.word	0x40010000
 8002f8c:	40000400 	.word	0x40000400
 8002f90:	40000800 	.word	0x40000800
 8002f94:	40000c00 	.word	0x40000c00
 8002f98:	40010400 	.word	0x40010400
 8002f9c:	40014000 	.word	0x40014000
 8002fa0:	40001800 	.word	0x40001800

08002fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d001      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e04e      	b.n	800305a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a23      	ldr	r2, [pc, #140]	@ (8003068 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d022      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe6:	d01d      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d018      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <HAL_TIM_Base_Start_IT+0xd0>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00e      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_TIM_Base_Start_IT+0xd4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d009      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a19      	ldr	r2, [pc, #100]	@ (800307c <HAL_TIM_Base_Start_IT+0xd8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <HAL_TIM_Base_Start_IT+0x80>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a18      	ldr	r2, [pc, #96]	@ (8003080 <HAL_TIM_Base_Start_IT+0xdc>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d111      	bne.n	8003048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d010      	beq.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f042 0201 	orr.w	r2, r2, #1
 8003044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003046:	e007      	b.n	8003058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3714      	adds	r7, #20
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40010000 	.word	0x40010000
 800306c:	40000400 	.word	0x40000400
 8003070:	40000800 	.word	0x40000800
 8003074:	40000c00 	.word	0x40000c00
 8003078:	40010400 	.word	0x40010400
 800307c:	40014000 	.word	0x40014000
 8003080:	40001800 	.word	0x40001800

08003084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d020      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d01b      	beq.n	80030e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0202 	mvn.w	r2, #2
 80030b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f999 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 80030d4:	e005      	b.n	80030e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f98b 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f99c 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d020      	beq.n	8003134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 0304 	and.w	r3, r3, #4
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0204 	mvn.w	r2, #4
 8003104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2202      	movs	r2, #2
 800310a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f973 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 8003120:	e005      	b.n	800312e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f965 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f976 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d020      	beq.n	8003180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d01b      	beq.n	8003180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0208 	mvn.w	r2, #8
 8003150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2204      	movs	r2, #4
 8003156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	f003 0303 	and.w	r3, r3, #3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f94d 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 800316c:	e005      	b.n	800317a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f93f 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 f950 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f003 0310 	and.w	r3, r3, #16
 8003186:	2b00      	cmp	r3, #0
 8003188:	d020      	beq.n	80031cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d01b      	beq.n	80031cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f06f 0210 	mvn.w	r2, #16
 800319c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2208      	movs	r2, #8
 80031a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f927 	bl	8003406 <HAL_TIM_IC_CaptureCallback>
 80031b8:	e005      	b.n	80031c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f919 	bl	80033f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	f000 f92a 	bl	800341a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00c      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d007      	beq.n	80031f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0201 	mvn.w	r2, #1
 80031e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd fc04 	bl	80009f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00c      	beq.n	8003214 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003200:	2b00      	cmp	r3, #0
 8003202:	d007      	beq.n	8003214 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800320c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fade 	bl	80037d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00c      	beq.n	8003238 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003224:	2b00      	cmp	r3, #0
 8003226:	d007      	beq.n	8003238 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 f8fb 	bl	800342e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d00c      	beq.n	800325c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d007      	beq.n	800325c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f06f 0220 	mvn.w	r2, #32
 8003254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fab0 	bl	80037bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800326e:	2300      	movs	r3, #0
 8003270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_TIM_ConfigClockSource+0x1c>
 800327c:	2302      	movs	r3, #2
 800327e:	e0b4      	b.n	80033ea <HAL_TIM_ConfigClockSource+0x186>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800329e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032b8:	d03e      	beq.n	8003338 <HAL_TIM_ConfigClockSource+0xd4>
 80032ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032be:	f200 8087 	bhi.w	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032c6:	f000 8086 	beq.w	80033d6 <HAL_TIM_ConfigClockSource+0x172>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032ce:	d87f      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b70      	cmp	r3, #112	@ 0x70
 80032d2:	d01a      	beq.n	800330a <HAL_TIM_ConfigClockSource+0xa6>
 80032d4:	2b70      	cmp	r3, #112	@ 0x70
 80032d6:	d87b      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b60      	cmp	r3, #96	@ 0x60
 80032da:	d050      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x11a>
 80032dc:	2b60      	cmp	r3, #96	@ 0x60
 80032de:	d877      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b50      	cmp	r3, #80	@ 0x50
 80032e2:	d03c      	beq.n	800335e <HAL_TIM_ConfigClockSource+0xfa>
 80032e4:	2b50      	cmp	r3, #80	@ 0x50
 80032e6:	d873      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e8:	2b40      	cmp	r3, #64	@ 0x40
 80032ea:	d058      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x13a>
 80032ec:	2b40      	cmp	r3, #64	@ 0x40
 80032ee:	d86f      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f0:	2b30      	cmp	r3, #48	@ 0x30
 80032f2:	d064      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 80032f4:	2b30      	cmp	r3, #48	@ 0x30
 80032f6:	d86b      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 80032f8:	2b20      	cmp	r3, #32
 80032fa:	d060      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	d867      	bhi.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
 8003300:	2b00      	cmp	r3, #0
 8003302:	d05c      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 8003304:	2b10      	cmp	r3, #16
 8003306:	d05a      	beq.n	80033be <HAL_TIM_ConfigClockSource+0x15a>
 8003308:	e062      	b.n	80033d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800331a:	f000 f9b3 	bl	8003684 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800332c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	609a      	str	r2, [r3, #8]
      break;
 8003336:	e04f      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003348:	f000 f99c 	bl	8003684 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800335a:	609a      	str	r2, [r3, #8]
      break;
 800335c:	e03c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	461a      	mov	r2, r3
 800336c:	f000 f910 	bl	8003590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2150      	movs	r1, #80	@ 0x50
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f969 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 800337c:	e02c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800338a:	461a      	mov	r2, r3
 800338c:	f000 f92f 	bl	80035ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2160      	movs	r1, #96	@ 0x60
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f959 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 800339c:	e01c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033aa:	461a      	mov	r2, r3
 80033ac:	f000 f8f0 	bl	8003590 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2140      	movs	r1, #64	@ 0x40
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f949 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 80033bc:	e00c      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	4610      	mov	r0, r2
 80033ca:	f000 f940 	bl	800364e <TIM_ITRx_SetConfig>
      break;
 80033ce:	e003      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	73fb      	strb	r3, [r7, #15]
      break;
 80033d4:	e000      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003406:	b480      	push	{r7}
 8003408:	b083      	sub	sp, #12
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800340e:	bf00      	nop
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003422:	bf00      	nop
 8003424:	370c      	adds	r7, #12
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a43      	ldr	r2, [pc, #268]	@ (8003564 <TIM_Base_SetConfig+0x120>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d013      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003462:	d00f      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <TIM_Base_SetConfig+0x124>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d00b      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a3f      	ldr	r2, [pc, #252]	@ (800356c <TIM_Base_SetConfig+0x128>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d007      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a3e      	ldr	r2, [pc, #248]	@ (8003570 <TIM_Base_SetConfig+0x12c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_Base_SetConfig+0x40>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a3d      	ldr	r2, [pc, #244]	@ (8003574 <TIM_Base_SetConfig+0x130>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d108      	bne.n	8003496 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800348a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a32      	ldr	r2, [pc, #200]	@ (8003564 <TIM_Base_SetConfig+0x120>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a4:	d027      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003568 <TIM_Base_SetConfig+0x124>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d023      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2e      	ldr	r2, [pc, #184]	@ (800356c <TIM_Base_SetConfig+0x128>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <TIM_Base_SetConfig+0x12c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <TIM_Base_SetConfig+0x130>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d017      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <TIM_Base_SetConfig+0x134>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <TIM_Base_SetConfig+0x138>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00f      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a29      	ldr	r2, [pc, #164]	@ (8003580 <TIM_Base_SetConfig+0x13c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d00b      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a28      	ldr	r2, [pc, #160]	@ (8003584 <TIM_Base_SetConfig+0x140>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d007      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a27      	ldr	r2, [pc, #156]	@ (8003588 <TIM_Base_SetConfig+0x144>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <TIM_Base_SetConfig+0xb2>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a26      	ldr	r2, [pc, #152]	@ (800358c <TIM_Base_SetConfig+0x148>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d108      	bne.n	8003508 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4313      	orrs	r3, r2
 8003506:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a0e      	ldr	r2, [pc, #56]	@ (8003564 <TIM_Base_SetConfig+0x120>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_Base_SetConfig+0xf2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <TIM_Base_SetConfig+0x130>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d103      	bne.n	800353e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	691a      	ldr	r2, [r3, #16]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f043 0204 	orr.w	r2, r3, #4
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2201      	movs	r2, #1
 800354e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	601a      	str	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40010000 	.word	0x40010000
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40010400 	.word	0x40010400
 8003578:	40014000 	.word	0x40014000
 800357c:	40014400 	.word	0x40014400
 8003580:	40014800 	.word	0x40014800
 8003584:	40001800 	.word	0x40001800
 8003588:	40001c00 	.word	0x40001c00
 800358c:	40002000 	.word	0x40002000

08003590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6a1b      	ldr	r3, [r3, #32]
 80035a6:	f023 0201 	bic.w	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80035ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 030a 	bic.w	r3, r3, #10
 80035cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	621a      	str	r2, [r3, #32]
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f023 0210 	bic.w	r2, r3, #16
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003618:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	031b      	lsls	r3, r3, #12
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	4313      	orrs	r3, r2
 8003622:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800362a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	4313      	orrs	r3, r2
 8003634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	697a      	ldr	r2, [r7, #20]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr

0800364e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800364e:	b480      	push	{r7}
 8003650:	b085      	sub	sp, #20
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
 8003656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	f043 0307 	orr.w	r3, r3, #7
 8003670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
 8003690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800369e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	609a      	str	r2, [r3, #8]
}
 80036b8:	bf00      	nop
 80036ba:	371c      	adds	r7, #28
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d101      	bne.n	80036dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036d8:	2302      	movs	r3, #2
 80036da:	e05a      	b.n	8003792 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68fa      	ldr	r2, [r7, #12]
 8003714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a21      	ldr	r2, [pc, #132]	@ (80037a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d022      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003728:	d01d      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d018      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d013      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a1a      	ldr	r2, [pc, #104]	@ (80037ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00e      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a18      	ldr	r2, [pc, #96]	@ (80037b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d009      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a17      	ldr	r2, [pc, #92]	@ (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d004      	beq.n	8003766 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d10c      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800376c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	4313      	orrs	r3, r2
 8003776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68ba      	ldr	r2, [r7, #8]
 800377e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3714      	adds	r7, #20
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40000400 	.word	0x40000400
 80037a8:	40000800 	.word	0x40000800
 80037ac:	40000c00 	.word	0x40000c00
 80037b0:	40010400 	.word	0x40010400
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40001800 	.word	0x40001800

080037bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e042      	b.n	800387c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd f9d4 	bl	8000bb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2224      	movs	r2, #36	@ 0x24
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003826:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f973 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800383c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800384c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800385c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	@ 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b20      	cmp	r3, #32
 80038a2:	d175      	bne.n	8003990 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d002      	beq.n	80038b0 <HAL_UART_Transmit+0x2c>
 80038aa:	88fb      	ldrh	r3, [r7, #6]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e06e      	b.n	8003992 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2221      	movs	r2, #33	@ 0x21
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038c2:	f7fd fb1f 	bl	8000f04 <HAL_GetTick>
 80038c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	88fa      	ldrh	r2, [r7, #6]
 80038cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	88fa      	ldrh	r2, [r7, #6]
 80038d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038dc:	d108      	bne.n	80038f0 <HAL_UART_Transmit+0x6c>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	e003      	b.n	80038f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80038f4:	2300      	movs	r3, #0
 80038f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80038f8:	e02e      	b.n	8003958 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	2180      	movs	r1, #128	@ 0x80
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f848 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e03a      	b.n	8003992 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10b      	bne.n	800393a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003930:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	3302      	adds	r3, #2
 8003936:	61bb      	str	r3, [r7, #24]
 8003938:	e007      	b.n	800394a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	781a      	ldrb	r2, [r3, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	3301      	adds	r3, #1
 8003948:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1cb      	bne.n	80038fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	2200      	movs	r2, #0
 800396a:	2140      	movs	r1, #64	@ 0x40
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 f814 	bl	800399a <UART_WaitOnFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d005      	beq.n	8003984 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e006      	b.n	8003992 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800398c:	2300      	movs	r3, #0
 800398e:	e000      	b.n	8003992 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
  }
}
 8003992:	4618      	mov	r0, r3
 8003994:	3720      	adds	r7, #32
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	603b      	str	r3, [r7, #0]
 80039a6:	4613      	mov	r3, r2
 80039a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039aa:	e03b      	b.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d037      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fd faa6 	bl	8000f04 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	6a3a      	ldr	r2, [r7, #32]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <UART_WaitOnFlagUntilTimeout+0x30>
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e03a      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d023      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b80      	cmp	r3, #128	@ 0x80
 80039e0:	d020      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	2b40      	cmp	r3, #64	@ 0x40
 80039e6:	d01d      	beq.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0308 	and.w	r3, r3, #8
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d116      	bne.n	8003a24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039f6:	2300      	movs	r3, #0
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	617b      	str	r3, [r7, #20]
 8003a0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f81d 	bl	8003a4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2208      	movs	r2, #8
 8003a16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e00f      	b.n	8003a44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	bf0c      	ite	eq
 8003a34:	2301      	moveq	r3, #1
 8003a36:	2300      	movne	r3, #0
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	79fb      	ldrb	r3, [r7, #7]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d0b4      	beq.n	80039ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3718      	adds	r7, #24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b095      	sub	sp, #84	@ 0x54
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	330c      	adds	r3, #12
 8003a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5e:	e853 3f00 	ldrex	r3, [r3]
 8003a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a74:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a7c:	e841 2300 	strex	r3, r2, [r1]
 8003a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1e5      	bne.n	8003a54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	3314      	adds	r3, #20
 8003a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3314      	adds	r3, #20
 8003aa6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003aa8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003aae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e5      	bne.n	8003a88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d119      	bne.n	8003af8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	330c      	adds	r3, #12
 8003aca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	e853 3f00 	ldrex	r3, [r3]
 8003ad2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f023 0310 	bic.w	r3, r3, #16
 8003ada:	647b      	str	r3, [r7, #68]	@ 0x44
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	330c      	adds	r3, #12
 8003ae2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ae4:	61ba      	str	r2, [r7, #24]
 8003ae6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6979      	ldr	r1, [r7, #20]
 8003aea:	69ba      	ldr	r2, [r7, #24]
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	613b      	str	r3, [r7, #16]
   return(result);
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e5      	bne.n	8003ac4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b06:	bf00      	nop
 8003b08:	3754      	adds	r7, #84	@ 0x54
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
	...

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b18:	b0c0      	sub	sp, #256	@ 0x100
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	68d9      	ldr	r1, [r3, #12]
 8003b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	ea40 0301 	orr.w	r3, r0, r1
 8003b3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b6c:	f021 010c 	bic.w	r1, r1, #12
 8003b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b7a:	430b      	orrs	r3, r1
 8003b7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8e:	6999      	ldr	r1, [r3, #24]
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	ea40 0301 	orr.w	r3, r0, r1
 8003b9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	4b8f      	ldr	r3, [pc, #572]	@ (8003de0 <UART_SetConfig+0x2cc>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d005      	beq.n	8003bb4 <UART_SetConfig+0xa0>
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b8d      	ldr	r3, [pc, #564]	@ (8003de4 <UART_SetConfig+0x2d0>)
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d104      	bne.n	8003bbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7fe fcb0 	bl	8002518 <HAL_RCC_GetPCLK2Freq>
 8003bb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003bbc:	e003      	b.n	8003bc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bbe:	f7fe fc97 	bl	80024f0 <HAL_RCC_GetPCLK1Freq>
 8003bc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bd0:	f040 810c 	bne.w	8003dec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003bde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003be2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003be6:	4622      	mov	r2, r4
 8003be8:	462b      	mov	r3, r5
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003bf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	eb12 0801 	adds.w	r8, r2, r1
 8003bfc:	4629      	mov	r1, r5
 8003bfe:	eb43 0901 	adc.w	r9, r3, r1
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c16:	4690      	mov	r8, r2
 8003c18:	4699      	mov	r9, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	eb18 0303 	adds.w	r3, r8, r3
 8003c20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c24:	462b      	mov	r3, r5
 8003c26:	eb49 0303 	adc.w	r3, r9, r3
 8003c2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c42:	460b      	mov	r3, r1
 8003c44:	18db      	adds	r3, r3, r3
 8003c46:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c48:	4613      	mov	r3, r2
 8003c4a:	eb42 0303 	adc.w	r3, r2, r3
 8003c4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c58:	f7fc fb32 	bl	80002c0 <__aeabi_uldivmod>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4b61      	ldr	r3, [pc, #388]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003c62:	fba3 2302 	umull	r2, r3, r3, r2
 8003c66:	095b      	lsrs	r3, r3, #5
 8003c68:	011c      	lsls	r4, r3, #4
 8003c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c7c:	4642      	mov	r2, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	1891      	adds	r1, r2, r2
 8003c82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c84:	415b      	adcs	r3, r3
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c8c:	4641      	mov	r1, r8
 8003c8e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c92:	4649      	mov	r1, r9
 8003c94:	eb43 0b01 	adc.w	fp, r3, r1
 8003c98:	f04f 0200 	mov.w	r2, #0
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ca4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ca8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003cac:	4692      	mov	sl, r2
 8003cae:	469b      	mov	fp, r3
 8003cb0:	4643      	mov	r3, r8
 8003cb2:	eb1a 0303 	adds.w	r3, sl, r3
 8003cb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	eb4b 0303 	adc.w	r3, fp, r3
 8003cc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003cd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003cd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	18db      	adds	r3, r3, r3
 8003cdc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cde:	4613      	mov	r3, r2
 8003ce0:	eb42 0303 	adc.w	r3, r2, r3
 8003ce4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ce6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003cee:	f7fc fae7 	bl	80002c0 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4b3b      	ldr	r3, [pc, #236]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003cfa:	fba3 2301 	umull	r2, r3, r3, r1
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	2264      	movs	r2, #100	@ 0x64
 8003d02:	fb02 f303 	mul.w	r3, r2, r3
 8003d06:	1acb      	subs	r3, r1, r3
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d0e:	4b36      	ldr	r3, [pc, #216]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003d10:	fba3 2302 	umull	r2, r3, r3, r2
 8003d14:	095b      	lsrs	r3, r3, #5
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d1c:	441c      	add	r4, r3
 8003d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d22:	2200      	movs	r2, #0
 8003d24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d30:	4642      	mov	r2, r8
 8003d32:	464b      	mov	r3, r9
 8003d34:	1891      	adds	r1, r2, r2
 8003d36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d38:	415b      	adcs	r3, r3
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d40:	4641      	mov	r1, r8
 8003d42:	1851      	adds	r1, r2, r1
 8003d44:	6339      	str	r1, [r7, #48]	@ 0x30
 8003d46:	4649      	mov	r1, r9
 8003d48:	414b      	adcs	r3, r1
 8003d4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d4c:	f04f 0200 	mov.w	r2, #0
 8003d50:	f04f 0300 	mov.w	r3, #0
 8003d54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d58:	4659      	mov	r1, fp
 8003d5a:	00cb      	lsls	r3, r1, #3
 8003d5c:	4651      	mov	r1, sl
 8003d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d62:	4651      	mov	r1, sl
 8003d64:	00ca      	lsls	r2, r1, #3
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	189b      	adds	r3, r3, r2
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d74:	464b      	mov	r3, r9
 8003d76:	460a      	mov	r2, r1
 8003d78:	eb42 0303 	adc.w	r3, r2, r3
 8003d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d94:	460b      	mov	r3, r1
 8003d96:	18db      	adds	r3, r3, r3
 8003d98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	eb42 0303 	adc.w	r3, r2, r3
 8003da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003da2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003da6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003daa:	f7fc fa89 	bl	80002c0 <__aeabi_uldivmod>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4b0d      	ldr	r3, [pc, #52]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003db4:	fba3 1302 	umull	r1, r3, r3, r2
 8003db8:	095b      	lsrs	r3, r3, #5
 8003dba:	2164      	movs	r1, #100	@ 0x64
 8003dbc:	fb01 f303 	mul.w	r3, r1, r3
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	3332      	adds	r3, #50	@ 0x32
 8003dc6:	4a08      	ldr	r2, [pc, #32]	@ (8003de8 <UART_SetConfig+0x2d4>)
 8003dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dcc:	095b      	lsrs	r3, r3, #5
 8003dce:	f003 0207 	and.w	r2, r3, #7
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4422      	add	r2, r4
 8003dda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ddc:	e106      	b.n	8003fec <UART_SetConfig+0x4d8>
 8003dde:	bf00      	nop
 8003de0:	40011000 	.word	0x40011000
 8003de4:	40011400 	.word	0x40011400
 8003de8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df0:	2200      	movs	r2, #0
 8003df2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003df6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003dfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dfe:	4642      	mov	r2, r8
 8003e00:	464b      	mov	r3, r9
 8003e02:	1891      	adds	r1, r2, r2
 8003e04:	6239      	str	r1, [r7, #32]
 8003e06:	415b      	adcs	r3, r3
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e0e:	4641      	mov	r1, r8
 8003e10:	1854      	adds	r4, r2, r1
 8003e12:	4649      	mov	r1, r9
 8003e14:	eb43 0501 	adc.w	r5, r3, r1
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	00eb      	lsls	r3, r5, #3
 8003e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e26:	00e2      	lsls	r2, r4, #3
 8003e28:	4614      	mov	r4, r2
 8003e2a:	461d      	mov	r5, r3
 8003e2c:	4643      	mov	r3, r8
 8003e2e:	18e3      	adds	r3, r4, r3
 8003e30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e34:	464b      	mov	r3, r9
 8003e36:	eb45 0303 	adc.w	r3, r5, r3
 8003e3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	008b      	lsls	r3, r1, #2
 8003e5e:	4621      	mov	r1, r4
 8003e60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e64:	4621      	mov	r1, r4
 8003e66:	008a      	lsls	r2, r1, #2
 8003e68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e6c:	f7fc fa28 	bl	80002c0 <__aeabi_uldivmod>
 8003e70:	4602      	mov	r2, r0
 8003e72:	460b      	mov	r3, r1
 8003e74:	4b60      	ldr	r3, [pc, #384]	@ (8003ff8 <UART_SetConfig+0x4e4>)
 8003e76:	fba3 2302 	umull	r2, r3, r3, r2
 8003e7a:	095b      	lsrs	r3, r3, #5
 8003e7c:	011c      	lsls	r4, r3, #4
 8003e7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e82:	2200      	movs	r2, #0
 8003e84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e90:	4642      	mov	r2, r8
 8003e92:	464b      	mov	r3, r9
 8003e94:	1891      	adds	r1, r2, r2
 8003e96:	61b9      	str	r1, [r7, #24]
 8003e98:	415b      	adcs	r3, r3
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ea0:	4641      	mov	r1, r8
 8003ea2:	1851      	adds	r1, r2, r1
 8003ea4:	6139      	str	r1, [r7, #16]
 8003ea6:	4649      	mov	r1, r9
 8003ea8:	414b      	adcs	r3, r1
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	f04f 0200 	mov.w	r2, #0
 8003eb0:	f04f 0300 	mov.w	r3, #0
 8003eb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003eb8:	4659      	mov	r1, fp
 8003eba:	00cb      	lsls	r3, r1, #3
 8003ebc:	4651      	mov	r1, sl
 8003ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ec2:	4651      	mov	r1, sl
 8003ec4:	00ca      	lsls	r2, r1, #3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	4642      	mov	r2, r8
 8003ece:	189b      	adds	r3, r3, r2
 8003ed0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ed4:	464b      	mov	r3, r9
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	eb42 0303 	adc.w	r3, r2, r3
 8003edc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ef8:	4649      	mov	r1, r9
 8003efa:	008b      	lsls	r3, r1, #2
 8003efc:	4641      	mov	r1, r8
 8003efe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f02:	4641      	mov	r1, r8
 8003f04:	008a      	lsls	r2, r1, #2
 8003f06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f0a:	f7fc f9d9 	bl	80002c0 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	4b38      	ldr	r3, [pc, #224]	@ (8003ff8 <UART_SetConfig+0x4e4>)
 8003f16:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2264      	movs	r2, #100	@ 0x64
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	1acb      	subs	r3, r1, r3
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	3332      	adds	r3, #50	@ 0x32
 8003f28:	4a33      	ldr	r2, [pc, #204]	@ (8003ff8 <UART_SetConfig+0x4e4>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f34:	441c      	add	r4, r3
 8003f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003f44:	4642      	mov	r2, r8
 8003f46:	464b      	mov	r3, r9
 8003f48:	1891      	adds	r1, r2, r2
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	415b      	adcs	r3, r3
 8003f4e:	60fb      	str	r3, [r7, #12]
 8003f50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f54:	4641      	mov	r1, r8
 8003f56:	1851      	adds	r1, r2, r1
 8003f58:	6039      	str	r1, [r7, #0]
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	414b      	adcs	r3, r1
 8003f5e:	607b      	str	r3, [r7, #4]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	f04f 0300 	mov.w	r3, #0
 8003f68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	00cb      	lsls	r3, r1, #3
 8003f70:	4651      	mov	r1, sl
 8003f72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f76:	4651      	mov	r1, sl
 8003f78:	00ca      	lsls	r2, r1, #3
 8003f7a:	4610      	mov	r0, r2
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4642      	mov	r2, r8
 8003f82:	189b      	adds	r3, r3, r2
 8003f84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f86:	464b      	mov	r3, r9
 8003f88:	460a      	mov	r2, r1
 8003f8a:	eb42 0303 	adc.w	r3, r2, r3
 8003f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003fa8:	4649      	mov	r1, r9
 8003faa:	008b      	lsls	r3, r1, #2
 8003fac:	4641      	mov	r1, r8
 8003fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	008a      	lsls	r2, r1, #2
 8003fb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003fba:	f7fc f981 	bl	80002c0 <__aeabi_uldivmod>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff8 <UART_SetConfig+0x4e4>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	2164      	movs	r1, #100	@ 0x64
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	3332      	adds	r3, #50	@ 0x32
 8003fd6:	4a08      	ldr	r2, [pc, #32]	@ (8003ff8 <UART_SetConfig+0x4e4>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	f003 020f 	and.w	r2, r3, #15
 8003fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4422      	add	r2, r4
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ff8:	51eb851f 	.word	0x51eb851f

08003ffc <_vsniprintf_r>:
 8003ffc:	b530      	push	{r4, r5, lr}
 8003ffe:	4614      	mov	r4, r2
 8004000:	2c00      	cmp	r4, #0
 8004002:	b09b      	sub	sp, #108	@ 0x6c
 8004004:	4605      	mov	r5, r0
 8004006:	461a      	mov	r2, r3
 8004008:	da05      	bge.n	8004016 <_vsniprintf_r+0x1a>
 800400a:	238b      	movs	r3, #139	@ 0x8b
 800400c:	6003      	str	r3, [r0, #0]
 800400e:	f04f 30ff 	mov.w	r0, #4294967295
 8004012:	b01b      	add	sp, #108	@ 0x6c
 8004014:	bd30      	pop	{r4, r5, pc}
 8004016:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800401a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800401e:	bf14      	ite	ne
 8004020:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004024:	4623      	moveq	r3, r4
 8004026:	9302      	str	r3, [sp, #8]
 8004028:	9305      	str	r3, [sp, #20]
 800402a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800402e:	9100      	str	r1, [sp, #0]
 8004030:	9104      	str	r1, [sp, #16]
 8004032:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004036:	4669      	mov	r1, sp
 8004038:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800403a:	f000 f9a1 	bl	8004380 <_svfiprintf_r>
 800403e:	1c43      	adds	r3, r0, #1
 8004040:	bfbc      	itt	lt
 8004042:	238b      	movlt	r3, #139	@ 0x8b
 8004044:	602b      	strlt	r3, [r5, #0]
 8004046:	2c00      	cmp	r4, #0
 8004048:	d0e3      	beq.n	8004012 <_vsniprintf_r+0x16>
 800404a:	9b00      	ldr	r3, [sp, #0]
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
 8004050:	e7df      	b.n	8004012 <_vsniprintf_r+0x16>
	...

08004054 <vsniprintf>:
 8004054:	b507      	push	{r0, r1, r2, lr}
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	460a      	mov	r2, r1
 800405c:	4601      	mov	r1, r0
 800405e:	4803      	ldr	r0, [pc, #12]	@ (800406c <vsniprintf+0x18>)
 8004060:	6800      	ldr	r0, [r0, #0]
 8004062:	f7ff ffcb 	bl	8003ffc <_vsniprintf_r>
 8004066:	b003      	add	sp, #12
 8004068:	f85d fb04 	ldr.w	pc, [sp], #4
 800406c:	2000000c 	.word	0x2000000c

08004070 <memset>:
 8004070:	4402      	add	r2, r0
 8004072:	4603      	mov	r3, r0
 8004074:	4293      	cmp	r3, r2
 8004076:	d100      	bne.n	800407a <memset+0xa>
 8004078:	4770      	bx	lr
 800407a:	f803 1b01 	strb.w	r1, [r3], #1
 800407e:	e7f9      	b.n	8004074 <memset+0x4>

08004080 <__errno>:
 8004080:	4b01      	ldr	r3, [pc, #4]	@ (8004088 <__errno+0x8>)
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	2000000c 	.word	0x2000000c

0800408c <__libc_init_array>:
 800408c:	b570      	push	{r4, r5, r6, lr}
 800408e:	4d0d      	ldr	r5, [pc, #52]	@ (80040c4 <__libc_init_array+0x38>)
 8004090:	4c0d      	ldr	r4, [pc, #52]	@ (80040c8 <__libc_init_array+0x3c>)
 8004092:	1b64      	subs	r4, r4, r5
 8004094:	10a4      	asrs	r4, r4, #2
 8004096:	2600      	movs	r6, #0
 8004098:	42a6      	cmp	r6, r4
 800409a:	d109      	bne.n	80040b0 <__libc_init_array+0x24>
 800409c:	4d0b      	ldr	r5, [pc, #44]	@ (80040cc <__libc_init_array+0x40>)
 800409e:	4c0c      	ldr	r4, [pc, #48]	@ (80040d0 <__libc_init_array+0x44>)
 80040a0:	f000 fc66 	bl	8004970 <_init>
 80040a4:	1b64      	subs	r4, r4, r5
 80040a6:	10a4      	asrs	r4, r4, #2
 80040a8:	2600      	movs	r6, #0
 80040aa:	42a6      	cmp	r6, r4
 80040ac:	d105      	bne.n	80040ba <__libc_init_array+0x2e>
 80040ae:	bd70      	pop	{r4, r5, r6, pc}
 80040b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040b4:	4798      	blx	r3
 80040b6:	3601      	adds	r6, #1
 80040b8:	e7ee      	b.n	8004098 <__libc_init_array+0xc>
 80040ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80040be:	4798      	blx	r3
 80040c0:	3601      	adds	r6, #1
 80040c2:	e7f2      	b.n	80040aa <__libc_init_array+0x1e>
 80040c4:	08004a24 	.word	0x08004a24
 80040c8:	08004a24 	.word	0x08004a24
 80040cc:	08004a24 	.word	0x08004a24
 80040d0:	08004a28 	.word	0x08004a28

080040d4 <__retarget_lock_acquire_recursive>:
 80040d4:	4770      	bx	lr

080040d6 <__retarget_lock_release_recursive>:
 80040d6:	4770      	bx	lr

080040d8 <_free_r>:
 80040d8:	b538      	push	{r3, r4, r5, lr}
 80040da:	4605      	mov	r5, r0
 80040dc:	2900      	cmp	r1, #0
 80040de:	d041      	beq.n	8004164 <_free_r+0x8c>
 80040e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040e4:	1f0c      	subs	r4, r1, #4
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	bfb8      	it	lt
 80040ea:	18e4      	addlt	r4, r4, r3
 80040ec:	f000 f8e0 	bl	80042b0 <__malloc_lock>
 80040f0:	4a1d      	ldr	r2, [pc, #116]	@ (8004168 <_free_r+0x90>)
 80040f2:	6813      	ldr	r3, [r2, #0]
 80040f4:	b933      	cbnz	r3, 8004104 <_free_r+0x2c>
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	6014      	str	r4, [r2, #0]
 80040fa:	4628      	mov	r0, r5
 80040fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004100:	f000 b8dc 	b.w	80042bc <__malloc_unlock>
 8004104:	42a3      	cmp	r3, r4
 8004106:	d908      	bls.n	800411a <_free_r+0x42>
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	1821      	adds	r1, r4, r0
 800410c:	428b      	cmp	r3, r1
 800410e:	bf01      	itttt	eq
 8004110:	6819      	ldreq	r1, [r3, #0]
 8004112:	685b      	ldreq	r3, [r3, #4]
 8004114:	1809      	addeq	r1, r1, r0
 8004116:	6021      	streq	r1, [r4, #0]
 8004118:	e7ed      	b.n	80040f6 <_free_r+0x1e>
 800411a:	461a      	mov	r2, r3
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b10b      	cbz	r3, 8004124 <_free_r+0x4c>
 8004120:	42a3      	cmp	r3, r4
 8004122:	d9fa      	bls.n	800411a <_free_r+0x42>
 8004124:	6811      	ldr	r1, [r2, #0]
 8004126:	1850      	adds	r0, r2, r1
 8004128:	42a0      	cmp	r0, r4
 800412a:	d10b      	bne.n	8004144 <_free_r+0x6c>
 800412c:	6820      	ldr	r0, [r4, #0]
 800412e:	4401      	add	r1, r0
 8004130:	1850      	adds	r0, r2, r1
 8004132:	4283      	cmp	r3, r0
 8004134:	6011      	str	r1, [r2, #0]
 8004136:	d1e0      	bne.n	80040fa <_free_r+0x22>
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	6053      	str	r3, [r2, #4]
 800413e:	4408      	add	r0, r1
 8004140:	6010      	str	r0, [r2, #0]
 8004142:	e7da      	b.n	80040fa <_free_r+0x22>
 8004144:	d902      	bls.n	800414c <_free_r+0x74>
 8004146:	230c      	movs	r3, #12
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	e7d6      	b.n	80040fa <_free_r+0x22>
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	1821      	adds	r1, r4, r0
 8004150:	428b      	cmp	r3, r1
 8004152:	bf04      	itt	eq
 8004154:	6819      	ldreq	r1, [r3, #0]
 8004156:	685b      	ldreq	r3, [r3, #4]
 8004158:	6063      	str	r3, [r4, #4]
 800415a:	bf04      	itt	eq
 800415c:	1809      	addeq	r1, r1, r0
 800415e:	6021      	streq	r1, [r4, #0]
 8004160:	6054      	str	r4, [r2, #4]
 8004162:	e7ca      	b.n	80040fa <_free_r+0x22>
 8004164:	bd38      	pop	{r3, r4, r5, pc}
 8004166:	bf00      	nop
 8004168:	20001448 	.word	0x20001448

0800416c <sbrk_aligned>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	4e0f      	ldr	r6, [pc, #60]	@ (80041ac <sbrk_aligned+0x40>)
 8004170:	460c      	mov	r4, r1
 8004172:	6831      	ldr	r1, [r6, #0]
 8004174:	4605      	mov	r5, r0
 8004176:	b911      	cbnz	r1, 800417e <sbrk_aligned+0x12>
 8004178:	f000 fba6 	bl	80048c8 <_sbrk_r>
 800417c:	6030      	str	r0, [r6, #0]
 800417e:	4621      	mov	r1, r4
 8004180:	4628      	mov	r0, r5
 8004182:	f000 fba1 	bl	80048c8 <_sbrk_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	d103      	bne.n	8004192 <sbrk_aligned+0x26>
 800418a:	f04f 34ff 	mov.w	r4, #4294967295
 800418e:	4620      	mov	r0, r4
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	1cc4      	adds	r4, r0, #3
 8004194:	f024 0403 	bic.w	r4, r4, #3
 8004198:	42a0      	cmp	r0, r4
 800419a:	d0f8      	beq.n	800418e <sbrk_aligned+0x22>
 800419c:	1a21      	subs	r1, r4, r0
 800419e:	4628      	mov	r0, r5
 80041a0:	f000 fb92 	bl	80048c8 <_sbrk_r>
 80041a4:	3001      	adds	r0, #1
 80041a6:	d1f2      	bne.n	800418e <sbrk_aligned+0x22>
 80041a8:	e7ef      	b.n	800418a <sbrk_aligned+0x1e>
 80041aa:	bf00      	nop
 80041ac:	20001444 	.word	0x20001444

080041b0 <_malloc_r>:
 80041b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b4:	1ccd      	adds	r5, r1, #3
 80041b6:	f025 0503 	bic.w	r5, r5, #3
 80041ba:	3508      	adds	r5, #8
 80041bc:	2d0c      	cmp	r5, #12
 80041be:	bf38      	it	cc
 80041c0:	250c      	movcc	r5, #12
 80041c2:	2d00      	cmp	r5, #0
 80041c4:	4606      	mov	r6, r0
 80041c6:	db01      	blt.n	80041cc <_malloc_r+0x1c>
 80041c8:	42a9      	cmp	r1, r5
 80041ca:	d904      	bls.n	80041d6 <_malloc_r+0x26>
 80041cc:	230c      	movs	r3, #12
 80041ce:	6033      	str	r3, [r6, #0]
 80041d0:	2000      	movs	r0, #0
 80041d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042ac <_malloc_r+0xfc>
 80041da:	f000 f869 	bl	80042b0 <__malloc_lock>
 80041de:	f8d8 3000 	ldr.w	r3, [r8]
 80041e2:	461c      	mov	r4, r3
 80041e4:	bb44      	cbnz	r4, 8004238 <_malloc_r+0x88>
 80041e6:	4629      	mov	r1, r5
 80041e8:	4630      	mov	r0, r6
 80041ea:	f7ff ffbf 	bl	800416c <sbrk_aligned>
 80041ee:	1c43      	adds	r3, r0, #1
 80041f0:	4604      	mov	r4, r0
 80041f2:	d158      	bne.n	80042a6 <_malloc_r+0xf6>
 80041f4:	f8d8 4000 	ldr.w	r4, [r8]
 80041f8:	4627      	mov	r7, r4
 80041fa:	2f00      	cmp	r7, #0
 80041fc:	d143      	bne.n	8004286 <_malloc_r+0xd6>
 80041fe:	2c00      	cmp	r4, #0
 8004200:	d04b      	beq.n	800429a <_malloc_r+0xea>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	4639      	mov	r1, r7
 8004206:	4630      	mov	r0, r6
 8004208:	eb04 0903 	add.w	r9, r4, r3
 800420c:	f000 fb5c 	bl	80048c8 <_sbrk_r>
 8004210:	4581      	cmp	r9, r0
 8004212:	d142      	bne.n	800429a <_malloc_r+0xea>
 8004214:	6821      	ldr	r1, [r4, #0]
 8004216:	1a6d      	subs	r5, r5, r1
 8004218:	4629      	mov	r1, r5
 800421a:	4630      	mov	r0, r6
 800421c:	f7ff ffa6 	bl	800416c <sbrk_aligned>
 8004220:	3001      	adds	r0, #1
 8004222:	d03a      	beq.n	800429a <_malloc_r+0xea>
 8004224:	6823      	ldr	r3, [r4, #0]
 8004226:	442b      	add	r3, r5
 8004228:	6023      	str	r3, [r4, #0]
 800422a:	f8d8 3000 	ldr.w	r3, [r8]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	bb62      	cbnz	r2, 800428c <_malloc_r+0xdc>
 8004232:	f8c8 7000 	str.w	r7, [r8]
 8004236:	e00f      	b.n	8004258 <_malloc_r+0xa8>
 8004238:	6822      	ldr	r2, [r4, #0]
 800423a:	1b52      	subs	r2, r2, r5
 800423c:	d420      	bmi.n	8004280 <_malloc_r+0xd0>
 800423e:	2a0b      	cmp	r2, #11
 8004240:	d917      	bls.n	8004272 <_malloc_r+0xc2>
 8004242:	1961      	adds	r1, r4, r5
 8004244:	42a3      	cmp	r3, r4
 8004246:	6025      	str	r5, [r4, #0]
 8004248:	bf18      	it	ne
 800424a:	6059      	strne	r1, [r3, #4]
 800424c:	6863      	ldr	r3, [r4, #4]
 800424e:	bf08      	it	eq
 8004250:	f8c8 1000 	streq.w	r1, [r8]
 8004254:	5162      	str	r2, [r4, r5]
 8004256:	604b      	str	r3, [r1, #4]
 8004258:	4630      	mov	r0, r6
 800425a:	f000 f82f 	bl	80042bc <__malloc_unlock>
 800425e:	f104 000b 	add.w	r0, r4, #11
 8004262:	1d23      	adds	r3, r4, #4
 8004264:	f020 0007 	bic.w	r0, r0, #7
 8004268:	1ac2      	subs	r2, r0, r3
 800426a:	bf1c      	itt	ne
 800426c:	1a1b      	subne	r3, r3, r0
 800426e:	50a3      	strne	r3, [r4, r2]
 8004270:	e7af      	b.n	80041d2 <_malloc_r+0x22>
 8004272:	6862      	ldr	r2, [r4, #4]
 8004274:	42a3      	cmp	r3, r4
 8004276:	bf0c      	ite	eq
 8004278:	f8c8 2000 	streq.w	r2, [r8]
 800427c:	605a      	strne	r2, [r3, #4]
 800427e:	e7eb      	b.n	8004258 <_malloc_r+0xa8>
 8004280:	4623      	mov	r3, r4
 8004282:	6864      	ldr	r4, [r4, #4]
 8004284:	e7ae      	b.n	80041e4 <_malloc_r+0x34>
 8004286:	463c      	mov	r4, r7
 8004288:	687f      	ldr	r7, [r7, #4]
 800428a:	e7b6      	b.n	80041fa <_malloc_r+0x4a>
 800428c:	461a      	mov	r2, r3
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	42a3      	cmp	r3, r4
 8004292:	d1fb      	bne.n	800428c <_malloc_r+0xdc>
 8004294:	2300      	movs	r3, #0
 8004296:	6053      	str	r3, [r2, #4]
 8004298:	e7de      	b.n	8004258 <_malloc_r+0xa8>
 800429a:	230c      	movs	r3, #12
 800429c:	6033      	str	r3, [r6, #0]
 800429e:	4630      	mov	r0, r6
 80042a0:	f000 f80c 	bl	80042bc <__malloc_unlock>
 80042a4:	e794      	b.n	80041d0 <_malloc_r+0x20>
 80042a6:	6005      	str	r5, [r0, #0]
 80042a8:	e7d6      	b.n	8004258 <_malloc_r+0xa8>
 80042aa:	bf00      	nop
 80042ac:	20001448 	.word	0x20001448

080042b0 <__malloc_lock>:
 80042b0:	4801      	ldr	r0, [pc, #4]	@ (80042b8 <__malloc_lock+0x8>)
 80042b2:	f7ff bf0f 	b.w	80040d4 <__retarget_lock_acquire_recursive>
 80042b6:	bf00      	nop
 80042b8:	20001440 	.word	0x20001440

080042bc <__malloc_unlock>:
 80042bc:	4801      	ldr	r0, [pc, #4]	@ (80042c4 <__malloc_unlock+0x8>)
 80042be:	f7ff bf0a 	b.w	80040d6 <__retarget_lock_release_recursive>
 80042c2:	bf00      	nop
 80042c4:	20001440 	.word	0x20001440

080042c8 <__ssputs_r>:
 80042c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042cc:	688e      	ldr	r6, [r1, #8]
 80042ce:	461f      	mov	r7, r3
 80042d0:	42be      	cmp	r6, r7
 80042d2:	680b      	ldr	r3, [r1, #0]
 80042d4:	4682      	mov	sl, r0
 80042d6:	460c      	mov	r4, r1
 80042d8:	4690      	mov	r8, r2
 80042da:	d82d      	bhi.n	8004338 <__ssputs_r+0x70>
 80042dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80042e4:	d026      	beq.n	8004334 <__ssputs_r+0x6c>
 80042e6:	6965      	ldr	r5, [r4, #20]
 80042e8:	6909      	ldr	r1, [r1, #16]
 80042ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042ee:	eba3 0901 	sub.w	r9, r3, r1
 80042f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042f6:	1c7b      	adds	r3, r7, #1
 80042f8:	444b      	add	r3, r9
 80042fa:	106d      	asrs	r5, r5, #1
 80042fc:	429d      	cmp	r5, r3
 80042fe:	bf38      	it	cc
 8004300:	461d      	movcc	r5, r3
 8004302:	0553      	lsls	r3, r2, #21
 8004304:	d527      	bpl.n	8004356 <__ssputs_r+0x8e>
 8004306:	4629      	mov	r1, r5
 8004308:	f7ff ff52 	bl	80041b0 <_malloc_r>
 800430c:	4606      	mov	r6, r0
 800430e:	b360      	cbz	r0, 800436a <__ssputs_r+0xa2>
 8004310:	6921      	ldr	r1, [r4, #16]
 8004312:	464a      	mov	r2, r9
 8004314:	f000 fae8 	bl	80048e8 <memcpy>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800431e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004322:	81a3      	strh	r3, [r4, #12]
 8004324:	6126      	str	r6, [r4, #16]
 8004326:	6165      	str	r5, [r4, #20]
 8004328:	444e      	add	r6, r9
 800432a:	eba5 0509 	sub.w	r5, r5, r9
 800432e:	6026      	str	r6, [r4, #0]
 8004330:	60a5      	str	r5, [r4, #8]
 8004332:	463e      	mov	r6, r7
 8004334:	42be      	cmp	r6, r7
 8004336:	d900      	bls.n	800433a <__ssputs_r+0x72>
 8004338:	463e      	mov	r6, r7
 800433a:	6820      	ldr	r0, [r4, #0]
 800433c:	4632      	mov	r2, r6
 800433e:	4641      	mov	r1, r8
 8004340:	f000 faa8 	bl	8004894 <memmove>
 8004344:	68a3      	ldr	r3, [r4, #8]
 8004346:	1b9b      	subs	r3, r3, r6
 8004348:	60a3      	str	r3, [r4, #8]
 800434a:	6823      	ldr	r3, [r4, #0]
 800434c:	4433      	add	r3, r6
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	2000      	movs	r0, #0
 8004352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004356:	462a      	mov	r2, r5
 8004358:	f000 fad4 	bl	8004904 <_realloc_r>
 800435c:	4606      	mov	r6, r0
 800435e:	2800      	cmp	r0, #0
 8004360:	d1e0      	bne.n	8004324 <__ssputs_r+0x5c>
 8004362:	6921      	ldr	r1, [r4, #16]
 8004364:	4650      	mov	r0, sl
 8004366:	f7ff feb7 	bl	80040d8 <_free_r>
 800436a:	230c      	movs	r3, #12
 800436c:	f8ca 3000 	str.w	r3, [sl]
 8004370:	89a3      	ldrh	r3, [r4, #12]
 8004372:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004376:	81a3      	strh	r3, [r4, #12]
 8004378:	f04f 30ff 	mov.w	r0, #4294967295
 800437c:	e7e9      	b.n	8004352 <__ssputs_r+0x8a>
	...

08004380 <_svfiprintf_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	4698      	mov	r8, r3
 8004386:	898b      	ldrh	r3, [r1, #12]
 8004388:	061b      	lsls	r3, r3, #24
 800438a:	b09d      	sub	sp, #116	@ 0x74
 800438c:	4607      	mov	r7, r0
 800438e:	460d      	mov	r5, r1
 8004390:	4614      	mov	r4, r2
 8004392:	d510      	bpl.n	80043b6 <_svfiprintf_r+0x36>
 8004394:	690b      	ldr	r3, [r1, #16]
 8004396:	b973      	cbnz	r3, 80043b6 <_svfiprintf_r+0x36>
 8004398:	2140      	movs	r1, #64	@ 0x40
 800439a:	f7ff ff09 	bl	80041b0 <_malloc_r>
 800439e:	6028      	str	r0, [r5, #0]
 80043a0:	6128      	str	r0, [r5, #16]
 80043a2:	b930      	cbnz	r0, 80043b2 <_svfiprintf_r+0x32>
 80043a4:	230c      	movs	r3, #12
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	b01d      	add	sp, #116	@ 0x74
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	2340      	movs	r3, #64	@ 0x40
 80043b4:	616b      	str	r3, [r5, #20]
 80043b6:	2300      	movs	r3, #0
 80043b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ba:	2320      	movs	r3, #32
 80043bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c4:	2330      	movs	r3, #48	@ 0x30
 80043c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004564 <_svfiprintf_r+0x1e4>
 80043ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043ce:	f04f 0901 	mov.w	r9, #1
 80043d2:	4623      	mov	r3, r4
 80043d4:	469a      	mov	sl, r3
 80043d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043da:	b10a      	cbz	r2, 80043e0 <_svfiprintf_r+0x60>
 80043dc:	2a25      	cmp	r2, #37	@ 0x25
 80043de:	d1f9      	bne.n	80043d4 <_svfiprintf_r+0x54>
 80043e0:	ebba 0b04 	subs.w	fp, sl, r4
 80043e4:	d00b      	beq.n	80043fe <_svfiprintf_r+0x7e>
 80043e6:	465b      	mov	r3, fp
 80043e8:	4622      	mov	r2, r4
 80043ea:	4629      	mov	r1, r5
 80043ec:	4638      	mov	r0, r7
 80043ee:	f7ff ff6b 	bl	80042c8 <__ssputs_r>
 80043f2:	3001      	adds	r0, #1
 80043f4:	f000 80a7 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 80043f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80043fa:	445a      	add	r2, fp
 80043fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80043fe:	f89a 3000 	ldrb.w	r3, [sl]
 8004402:	2b00      	cmp	r3, #0
 8004404:	f000 809f 	beq.w	8004546 <_svfiprintf_r+0x1c6>
 8004408:	2300      	movs	r3, #0
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004412:	f10a 0a01 	add.w	sl, sl, #1
 8004416:	9304      	str	r3, [sp, #16]
 8004418:	9307      	str	r3, [sp, #28]
 800441a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800441e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004420:	4654      	mov	r4, sl
 8004422:	2205      	movs	r2, #5
 8004424:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004428:	484e      	ldr	r0, [pc, #312]	@ (8004564 <_svfiprintf_r+0x1e4>)
 800442a:	f7fb fef9 	bl	8000220 <memchr>
 800442e:	9a04      	ldr	r2, [sp, #16]
 8004430:	b9d8      	cbnz	r0, 800446a <_svfiprintf_r+0xea>
 8004432:	06d0      	lsls	r0, r2, #27
 8004434:	bf44      	itt	mi
 8004436:	2320      	movmi	r3, #32
 8004438:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800443c:	0711      	lsls	r1, r2, #28
 800443e:	bf44      	itt	mi
 8004440:	232b      	movmi	r3, #43	@ 0x2b
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004446:	f89a 3000 	ldrb.w	r3, [sl]
 800444a:	2b2a      	cmp	r3, #42	@ 0x2a
 800444c:	d015      	beq.n	800447a <_svfiprintf_r+0xfa>
 800444e:	9a07      	ldr	r2, [sp, #28]
 8004450:	4654      	mov	r4, sl
 8004452:	2000      	movs	r0, #0
 8004454:	f04f 0c0a 	mov.w	ip, #10
 8004458:	4621      	mov	r1, r4
 800445a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800445e:	3b30      	subs	r3, #48	@ 0x30
 8004460:	2b09      	cmp	r3, #9
 8004462:	d94b      	bls.n	80044fc <_svfiprintf_r+0x17c>
 8004464:	b1b0      	cbz	r0, 8004494 <_svfiprintf_r+0x114>
 8004466:	9207      	str	r2, [sp, #28]
 8004468:	e014      	b.n	8004494 <_svfiprintf_r+0x114>
 800446a:	eba0 0308 	sub.w	r3, r0, r8
 800446e:	fa09 f303 	lsl.w	r3, r9, r3
 8004472:	4313      	orrs	r3, r2
 8004474:	9304      	str	r3, [sp, #16]
 8004476:	46a2      	mov	sl, r4
 8004478:	e7d2      	b.n	8004420 <_svfiprintf_r+0xa0>
 800447a:	9b03      	ldr	r3, [sp, #12]
 800447c:	1d19      	adds	r1, r3, #4
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	9103      	str	r1, [sp, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	bfbb      	ittet	lt
 8004486:	425b      	neglt	r3, r3
 8004488:	f042 0202 	orrlt.w	r2, r2, #2
 800448c:	9307      	strge	r3, [sp, #28]
 800448e:	9307      	strlt	r3, [sp, #28]
 8004490:	bfb8      	it	lt
 8004492:	9204      	strlt	r2, [sp, #16]
 8004494:	7823      	ldrb	r3, [r4, #0]
 8004496:	2b2e      	cmp	r3, #46	@ 0x2e
 8004498:	d10a      	bne.n	80044b0 <_svfiprintf_r+0x130>
 800449a:	7863      	ldrb	r3, [r4, #1]
 800449c:	2b2a      	cmp	r3, #42	@ 0x2a
 800449e:	d132      	bne.n	8004506 <_svfiprintf_r+0x186>
 80044a0:	9b03      	ldr	r3, [sp, #12]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	9203      	str	r2, [sp, #12]
 80044a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044ac:	3402      	adds	r4, #2
 80044ae:	9305      	str	r3, [sp, #20]
 80044b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004574 <_svfiprintf_r+0x1f4>
 80044b4:	7821      	ldrb	r1, [r4, #0]
 80044b6:	2203      	movs	r2, #3
 80044b8:	4650      	mov	r0, sl
 80044ba:	f7fb feb1 	bl	8000220 <memchr>
 80044be:	b138      	cbz	r0, 80044d0 <_svfiprintf_r+0x150>
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	eba0 000a 	sub.w	r0, r0, sl
 80044c6:	2240      	movs	r2, #64	@ 0x40
 80044c8:	4082      	lsls	r2, r0
 80044ca:	4313      	orrs	r3, r2
 80044cc:	3401      	adds	r4, #1
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d4:	4824      	ldr	r0, [pc, #144]	@ (8004568 <_svfiprintf_r+0x1e8>)
 80044d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044da:	2206      	movs	r2, #6
 80044dc:	f7fb fea0 	bl	8000220 <memchr>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d036      	beq.n	8004552 <_svfiprintf_r+0x1d2>
 80044e4:	4b21      	ldr	r3, [pc, #132]	@ (800456c <_svfiprintf_r+0x1ec>)
 80044e6:	bb1b      	cbnz	r3, 8004530 <_svfiprintf_r+0x1b0>
 80044e8:	9b03      	ldr	r3, [sp, #12]
 80044ea:	3307      	adds	r3, #7
 80044ec:	f023 0307 	bic.w	r3, r3, #7
 80044f0:	3308      	adds	r3, #8
 80044f2:	9303      	str	r3, [sp, #12]
 80044f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80044f6:	4433      	add	r3, r6
 80044f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80044fa:	e76a      	b.n	80043d2 <_svfiprintf_r+0x52>
 80044fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004500:	460c      	mov	r4, r1
 8004502:	2001      	movs	r0, #1
 8004504:	e7a8      	b.n	8004458 <_svfiprintf_r+0xd8>
 8004506:	2300      	movs	r3, #0
 8004508:	3401      	adds	r4, #1
 800450a:	9305      	str	r3, [sp, #20]
 800450c:	4619      	mov	r1, r3
 800450e:	f04f 0c0a 	mov.w	ip, #10
 8004512:	4620      	mov	r0, r4
 8004514:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004518:	3a30      	subs	r2, #48	@ 0x30
 800451a:	2a09      	cmp	r2, #9
 800451c:	d903      	bls.n	8004526 <_svfiprintf_r+0x1a6>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0c6      	beq.n	80044b0 <_svfiprintf_r+0x130>
 8004522:	9105      	str	r1, [sp, #20]
 8004524:	e7c4      	b.n	80044b0 <_svfiprintf_r+0x130>
 8004526:	fb0c 2101 	mla	r1, ip, r1, r2
 800452a:	4604      	mov	r4, r0
 800452c:	2301      	movs	r3, #1
 800452e:	e7f0      	b.n	8004512 <_svfiprintf_r+0x192>
 8004530:	ab03      	add	r3, sp, #12
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	462a      	mov	r2, r5
 8004536:	4b0e      	ldr	r3, [pc, #56]	@ (8004570 <_svfiprintf_r+0x1f0>)
 8004538:	a904      	add	r1, sp, #16
 800453a:	4638      	mov	r0, r7
 800453c:	f3af 8000 	nop.w
 8004540:	1c42      	adds	r2, r0, #1
 8004542:	4606      	mov	r6, r0
 8004544:	d1d6      	bne.n	80044f4 <_svfiprintf_r+0x174>
 8004546:	89ab      	ldrh	r3, [r5, #12]
 8004548:	065b      	lsls	r3, r3, #25
 800454a:	f53f af2d 	bmi.w	80043a8 <_svfiprintf_r+0x28>
 800454e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004550:	e72c      	b.n	80043ac <_svfiprintf_r+0x2c>
 8004552:	ab03      	add	r3, sp, #12
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	462a      	mov	r2, r5
 8004558:	4b05      	ldr	r3, [pc, #20]	@ (8004570 <_svfiprintf_r+0x1f0>)
 800455a:	a904      	add	r1, sp, #16
 800455c:	4638      	mov	r0, r7
 800455e:	f000 f879 	bl	8004654 <_printf_i>
 8004562:	e7ed      	b.n	8004540 <_svfiprintf_r+0x1c0>
 8004564:	080049e8 	.word	0x080049e8
 8004568:	080049f2 	.word	0x080049f2
 800456c:	00000000 	.word	0x00000000
 8004570:	080042c9 	.word	0x080042c9
 8004574:	080049ee 	.word	0x080049ee

08004578 <_printf_common>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	4616      	mov	r6, r2
 800457e:	4698      	mov	r8, r3
 8004580:	688a      	ldr	r2, [r1, #8]
 8004582:	690b      	ldr	r3, [r1, #16]
 8004584:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004588:	4293      	cmp	r3, r2
 800458a:	bfb8      	it	lt
 800458c:	4613      	movlt	r3, r2
 800458e:	6033      	str	r3, [r6, #0]
 8004590:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004594:	4607      	mov	r7, r0
 8004596:	460c      	mov	r4, r1
 8004598:	b10a      	cbz	r2, 800459e <_printf_common+0x26>
 800459a:	3301      	adds	r3, #1
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	0699      	lsls	r1, r3, #26
 80045a2:	bf42      	ittt	mi
 80045a4:	6833      	ldrmi	r3, [r6, #0]
 80045a6:	3302      	addmi	r3, #2
 80045a8:	6033      	strmi	r3, [r6, #0]
 80045aa:	6825      	ldr	r5, [r4, #0]
 80045ac:	f015 0506 	ands.w	r5, r5, #6
 80045b0:	d106      	bne.n	80045c0 <_printf_common+0x48>
 80045b2:	f104 0a19 	add.w	sl, r4, #25
 80045b6:	68e3      	ldr	r3, [r4, #12]
 80045b8:	6832      	ldr	r2, [r6, #0]
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	42ab      	cmp	r3, r5
 80045be:	dc26      	bgt.n	800460e <_printf_common+0x96>
 80045c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	3b00      	subs	r3, #0
 80045c8:	bf18      	it	ne
 80045ca:	2301      	movne	r3, #1
 80045cc:	0692      	lsls	r2, r2, #26
 80045ce:	d42b      	bmi.n	8004628 <_printf_common+0xb0>
 80045d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045d4:	4641      	mov	r1, r8
 80045d6:	4638      	mov	r0, r7
 80045d8:	47c8      	blx	r9
 80045da:	3001      	adds	r0, #1
 80045dc:	d01e      	beq.n	800461c <_printf_common+0xa4>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	6922      	ldr	r2, [r4, #16]
 80045e2:	f003 0306 	and.w	r3, r3, #6
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf02      	ittt	eq
 80045ea:	68e5      	ldreq	r5, [r4, #12]
 80045ec:	6833      	ldreq	r3, [r6, #0]
 80045ee:	1aed      	subeq	r5, r5, r3
 80045f0:	68a3      	ldr	r3, [r4, #8]
 80045f2:	bf0c      	ite	eq
 80045f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f8:	2500      	movne	r5, #0
 80045fa:	4293      	cmp	r3, r2
 80045fc:	bfc4      	itt	gt
 80045fe:	1a9b      	subgt	r3, r3, r2
 8004600:	18ed      	addgt	r5, r5, r3
 8004602:	2600      	movs	r6, #0
 8004604:	341a      	adds	r4, #26
 8004606:	42b5      	cmp	r5, r6
 8004608:	d11a      	bne.n	8004640 <_printf_common+0xc8>
 800460a:	2000      	movs	r0, #0
 800460c:	e008      	b.n	8004620 <_printf_common+0xa8>
 800460e:	2301      	movs	r3, #1
 8004610:	4652      	mov	r2, sl
 8004612:	4641      	mov	r1, r8
 8004614:	4638      	mov	r0, r7
 8004616:	47c8      	blx	r9
 8004618:	3001      	adds	r0, #1
 800461a:	d103      	bne.n	8004624 <_printf_common+0xac>
 800461c:	f04f 30ff 	mov.w	r0, #4294967295
 8004620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004624:	3501      	adds	r5, #1
 8004626:	e7c6      	b.n	80045b6 <_printf_common+0x3e>
 8004628:	18e1      	adds	r1, r4, r3
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	2030      	movs	r0, #48	@ 0x30
 800462e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004632:	4422      	add	r2, r4
 8004634:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004638:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800463c:	3302      	adds	r3, #2
 800463e:	e7c7      	b.n	80045d0 <_printf_common+0x58>
 8004640:	2301      	movs	r3, #1
 8004642:	4622      	mov	r2, r4
 8004644:	4641      	mov	r1, r8
 8004646:	4638      	mov	r0, r7
 8004648:	47c8      	blx	r9
 800464a:	3001      	adds	r0, #1
 800464c:	d0e6      	beq.n	800461c <_printf_common+0xa4>
 800464e:	3601      	adds	r6, #1
 8004650:	e7d9      	b.n	8004606 <_printf_common+0x8e>
	...

08004654 <_printf_i>:
 8004654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004658:	7e0f      	ldrb	r7, [r1, #24]
 800465a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800465c:	2f78      	cmp	r7, #120	@ 0x78
 800465e:	4691      	mov	r9, r2
 8004660:	4680      	mov	r8, r0
 8004662:	460c      	mov	r4, r1
 8004664:	469a      	mov	sl, r3
 8004666:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800466a:	d807      	bhi.n	800467c <_printf_i+0x28>
 800466c:	2f62      	cmp	r7, #98	@ 0x62
 800466e:	d80a      	bhi.n	8004686 <_printf_i+0x32>
 8004670:	2f00      	cmp	r7, #0
 8004672:	f000 80d2 	beq.w	800481a <_printf_i+0x1c6>
 8004676:	2f58      	cmp	r7, #88	@ 0x58
 8004678:	f000 80b9 	beq.w	80047ee <_printf_i+0x19a>
 800467c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004680:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004684:	e03a      	b.n	80046fc <_printf_i+0xa8>
 8004686:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800468a:	2b15      	cmp	r3, #21
 800468c:	d8f6      	bhi.n	800467c <_printf_i+0x28>
 800468e:	a101      	add	r1, pc, #4	@ (adr r1, 8004694 <_printf_i+0x40>)
 8004690:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004694:	080046ed 	.word	0x080046ed
 8004698:	08004701 	.word	0x08004701
 800469c:	0800467d 	.word	0x0800467d
 80046a0:	0800467d 	.word	0x0800467d
 80046a4:	0800467d 	.word	0x0800467d
 80046a8:	0800467d 	.word	0x0800467d
 80046ac:	08004701 	.word	0x08004701
 80046b0:	0800467d 	.word	0x0800467d
 80046b4:	0800467d 	.word	0x0800467d
 80046b8:	0800467d 	.word	0x0800467d
 80046bc:	0800467d 	.word	0x0800467d
 80046c0:	08004801 	.word	0x08004801
 80046c4:	0800472b 	.word	0x0800472b
 80046c8:	080047bb 	.word	0x080047bb
 80046cc:	0800467d 	.word	0x0800467d
 80046d0:	0800467d 	.word	0x0800467d
 80046d4:	08004823 	.word	0x08004823
 80046d8:	0800467d 	.word	0x0800467d
 80046dc:	0800472b 	.word	0x0800472b
 80046e0:	0800467d 	.word	0x0800467d
 80046e4:	0800467d 	.word	0x0800467d
 80046e8:	080047c3 	.word	0x080047c3
 80046ec:	6833      	ldr	r3, [r6, #0]
 80046ee:	1d1a      	adds	r2, r3, #4
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6032      	str	r2, [r6, #0]
 80046f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046fc:	2301      	movs	r3, #1
 80046fe:	e09d      	b.n	800483c <_printf_i+0x1e8>
 8004700:	6833      	ldr	r3, [r6, #0]
 8004702:	6820      	ldr	r0, [r4, #0]
 8004704:	1d19      	adds	r1, r3, #4
 8004706:	6031      	str	r1, [r6, #0]
 8004708:	0606      	lsls	r6, r0, #24
 800470a:	d501      	bpl.n	8004710 <_printf_i+0xbc>
 800470c:	681d      	ldr	r5, [r3, #0]
 800470e:	e003      	b.n	8004718 <_printf_i+0xc4>
 8004710:	0645      	lsls	r5, r0, #25
 8004712:	d5fb      	bpl.n	800470c <_printf_i+0xb8>
 8004714:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004718:	2d00      	cmp	r5, #0
 800471a:	da03      	bge.n	8004724 <_printf_i+0xd0>
 800471c:	232d      	movs	r3, #45	@ 0x2d
 800471e:	426d      	negs	r5, r5
 8004720:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004724:	4859      	ldr	r0, [pc, #356]	@ (800488c <_printf_i+0x238>)
 8004726:	230a      	movs	r3, #10
 8004728:	e011      	b.n	800474e <_printf_i+0xfa>
 800472a:	6821      	ldr	r1, [r4, #0]
 800472c:	6833      	ldr	r3, [r6, #0]
 800472e:	0608      	lsls	r0, r1, #24
 8004730:	f853 5b04 	ldr.w	r5, [r3], #4
 8004734:	d402      	bmi.n	800473c <_printf_i+0xe8>
 8004736:	0649      	lsls	r1, r1, #25
 8004738:	bf48      	it	mi
 800473a:	b2ad      	uxthmi	r5, r5
 800473c:	2f6f      	cmp	r7, #111	@ 0x6f
 800473e:	4853      	ldr	r0, [pc, #332]	@ (800488c <_printf_i+0x238>)
 8004740:	6033      	str	r3, [r6, #0]
 8004742:	bf14      	ite	ne
 8004744:	230a      	movne	r3, #10
 8004746:	2308      	moveq	r3, #8
 8004748:	2100      	movs	r1, #0
 800474a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800474e:	6866      	ldr	r6, [r4, #4]
 8004750:	60a6      	str	r6, [r4, #8]
 8004752:	2e00      	cmp	r6, #0
 8004754:	bfa2      	ittt	ge
 8004756:	6821      	ldrge	r1, [r4, #0]
 8004758:	f021 0104 	bicge.w	r1, r1, #4
 800475c:	6021      	strge	r1, [r4, #0]
 800475e:	b90d      	cbnz	r5, 8004764 <_printf_i+0x110>
 8004760:	2e00      	cmp	r6, #0
 8004762:	d04b      	beq.n	80047fc <_printf_i+0x1a8>
 8004764:	4616      	mov	r6, r2
 8004766:	fbb5 f1f3 	udiv	r1, r5, r3
 800476a:	fb03 5711 	mls	r7, r3, r1, r5
 800476e:	5dc7      	ldrb	r7, [r0, r7]
 8004770:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004774:	462f      	mov	r7, r5
 8004776:	42bb      	cmp	r3, r7
 8004778:	460d      	mov	r5, r1
 800477a:	d9f4      	bls.n	8004766 <_printf_i+0x112>
 800477c:	2b08      	cmp	r3, #8
 800477e:	d10b      	bne.n	8004798 <_printf_i+0x144>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	07df      	lsls	r7, r3, #31
 8004784:	d508      	bpl.n	8004798 <_printf_i+0x144>
 8004786:	6923      	ldr	r3, [r4, #16]
 8004788:	6861      	ldr	r1, [r4, #4]
 800478a:	4299      	cmp	r1, r3
 800478c:	bfde      	ittt	le
 800478e:	2330      	movle	r3, #48	@ 0x30
 8004790:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004794:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004798:	1b92      	subs	r2, r2, r6
 800479a:	6122      	str	r2, [r4, #16]
 800479c:	f8cd a000 	str.w	sl, [sp]
 80047a0:	464b      	mov	r3, r9
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4640      	mov	r0, r8
 80047a8:	f7ff fee6 	bl	8004578 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14a      	bne.n	8004846 <_printf_i+0x1f2>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295
 80047b4:	b004      	add	sp, #16
 80047b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	f043 0320 	orr.w	r3, r3, #32
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	4833      	ldr	r0, [pc, #204]	@ (8004890 <_printf_i+0x23c>)
 80047c4:	2778      	movs	r7, #120	@ 0x78
 80047c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047ca:	6823      	ldr	r3, [r4, #0]
 80047cc:	6831      	ldr	r1, [r6, #0]
 80047ce:	061f      	lsls	r7, r3, #24
 80047d0:	f851 5b04 	ldr.w	r5, [r1], #4
 80047d4:	d402      	bmi.n	80047dc <_printf_i+0x188>
 80047d6:	065f      	lsls	r7, r3, #25
 80047d8:	bf48      	it	mi
 80047da:	b2ad      	uxthmi	r5, r5
 80047dc:	6031      	str	r1, [r6, #0]
 80047de:	07d9      	lsls	r1, r3, #31
 80047e0:	bf44      	itt	mi
 80047e2:	f043 0320 	orrmi.w	r3, r3, #32
 80047e6:	6023      	strmi	r3, [r4, #0]
 80047e8:	b11d      	cbz	r5, 80047f2 <_printf_i+0x19e>
 80047ea:	2310      	movs	r3, #16
 80047ec:	e7ac      	b.n	8004748 <_printf_i+0xf4>
 80047ee:	4827      	ldr	r0, [pc, #156]	@ (800488c <_printf_i+0x238>)
 80047f0:	e7e9      	b.n	80047c6 <_printf_i+0x172>
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	f023 0320 	bic.w	r3, r3, #32
 80047f8:	6023      	str	r3, [r4, #0]
 80047fa:	e7f6      	b.n	80047ea <_printf_i+0x196>
 80047fc:	4616      	mov	r6, r2
 80047fe:	e7bd      	b.n	800477c <_printf_i+0x128>
 8004800:	6833      	ldr	r3, [r6, #0]
 8004802:	6825      	ldr	r5, [r4, #0]
 8004804:	6961      	ldr	r1, [r4, #20]
 8004806:	1d18      	adds	r0, r3, #4
 8004808:	6030      	str	r0, [r6, #0]
 800480a:	062e      	lsls	r6, r5, #24
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	d501      	bpl.n	8004814 <_printf_i+0x1c0>
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	e002      	b.n	800481a <_printf_i+0x1c6>
 8004814:	0668      	lsls	r0, r5, #25
 8004816:	d5fb      	bpl.n	8004810 <_printf_i+0x1bc>
 8004818:	8019      	strh	r1, [r3, #0]
 800481a:	2300      	movs	r3, #0
 800481c:	6123      	str	r3, [r4, #16]
 800481e:	4616      	mov	r6, r2
 8004820:	e7bc      	b.n	800479c <_printf_i+0x148>
 8004822:	6833      	ldr	r3, [r6, #0]
 8004824:	1d1a      	adds	r2, r3, #4
 8004826:	6032      	str	r2, [r6, #0]
 8004828:	681e      	ldr	r6, [r3, #0]
 800482a:	6862      	ldr	r2, [r4, #4]
 800482c:	2100      	movs	r1, #0
 800482e:	4630      	mov	r0, r6
 8004830:	f7fb fcf6 	bl	8000220 <memchr>
 8004834:	b108      	cbz	r0, 800483a <_printf_i+0x1e6>
 8004836:	1b80      	subs	r0, r0, r6
 8004838:	6060      	str	r0, [r4, #4]
 800483a:	6863      	ldr	r3, [r4, #4]
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	2300      	movs	r3, #0
 8004840:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004844:	e7aa      	b.n	800479c <_printf_i+0x148>
 8004846:	6923      	ldr	r3, [r4, #16]
 8004848:	4632      	mov	r2, r6
 800484a:	4649      	mov	r1, r9
 800484c:	4640      	mov	r0, r8
 800484e:	47d0      	blx	sl
 8004850:	3001      	adds	r0, #1
 8004852:	d0ad      	beq.n	80047b0 <_printf_i+0x15c>
 8004854:	6823      	ldr	r3, [r4, #0]
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	d413      	bmi.n	8004882 <_printf_i+0x22e>
 800485a:	68e0      	ldr	r0, [r4, #12]
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	4298      	cmp	r0, r3
 8004860:	bfb8      	it	lt
 8004862:	4618      	movlt	r0, r3
 8004864:	e7a6      	b.n	80047b4 <_printf_i+0x160>
 8004866:	2301      	movs	r3, #1
 8004868:	4632      	mov	r2, r6
 800486a:	4649      	mov	r1, r9
 800486c:	4640      	mov	r0, r8
 800486e:	47d0      	blx	sl
 8004870:	3001      	adds	r0, #1
 8004872:	d09d      	beq.n	80047b0 <_printf_i+0x15c>
 8004874:	3501      	adds	r5, #1
 8004876:	68e3      	ldr	r3, [r4, #12]
 8004878:	9903      	ldr	r1, [sp, #12]
 800487a:	1a5b      	subs	r3, r3, r1
 800487c:	42ab      	cmp	r3, r5
 800487e:	dcf2      	bgt.n	8004866 <_printf_i+0x212>
 8004880:	e7eb      	b.n	800485a <_printf_i+0x206>
 8004882:	2500      	movs	r5, #0
 8004884:	f104 0619 	add.w	r6, r4, #25
 8004888:	e7f5      	b.n	8004876 <_printf_i+0x222>
 800488a:	bf00      	nop
 800488c:	080049f9 	.word	0x080049f9
 8004890:	08004a0a 	.word	0x08004a0a

08004894 <memmove>:
 8004894:	4288      	cmp	r0, r1
 8004896:	b510      	push	{r4, lr}
 8004898:	eb01 0402 	add.w	r4, r1, r2
 800489c:	d902      	bls.n	80048a4 <memmove+0x10>
 800489e:	4284      	cmp	r4, r0
 80048a0:	4623      	mov	r3, r4
 80048a2:	d807      	bhi.n	80048b4 <memmove+0x20>
 80048a4:	1e43      	subs	r3, r0, #1
 80048a6:	42a1      	cmp	r1, r4
 80048a8:	d008      	beq.n	80048bc <memmove+0x28>
 80048aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048b2:	e7f8      	b.n	80048a6 <memmove+0x12>
 80048b4:	4402      	add	r2, r0
 80048b6:	4601      	mov	r1, r0
 80048b8:	428a      	cmp	r2, r1
 80048ba:	d100      	bne.n	80048be <memmove+0x2a>
 80048bc:	bd10      	pop	{r4, pc}
 80048be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048c6:	e7f7      	b.n	80048b8 <memmove+0x24>

080048c8 <_sbrk_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4d06      	ldr	r5, [pc, #24]	@ (80048e4 <_sbrk_r+0x1c>)
 80048cc:	2300      	movs	r3, #0
 80048ce:	4604      	mov	r4, r0
 80048d0:	4608      	mov	r0, r1
 80048d2:	602b      	str	r3, [r5, #0]
 80048d4:	f7fc fa6e 	bl	8000db4 <_sbrk>
 80048d8:	1c43      	adds	r3, r0, #1
 80048da:	d102      	bne.n	80048e2 <_sbrk_r+0x1a>
 80048dc:	682b      	ldr	r3, [r5, #0]
 80048de:	b103      	cbz	r3, 80048e2 <_sbrk_r+0x1a>
 80048e0:	6023      	str	r3, [r4, #0]
 80048e2:	bd38      	pop	{r3, r4, r5, pc}
 80048e4:	2000143c 	.word	0x2000143c

080048e8 <memcpy>:
 80048e8:	440a      	add	r2, r1
 80048ea:	4291      	cmp	r1, r2
 80048ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80048f0:	d100      	bne.n	80048f4 <memcpy+0xc>
 80048f2:	4770      	bx	lr
 80048f4:	b510      	push	{r4, lr}
 80048f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048fe:	4291      	cmp	r1, r2
 8004900:	d1f9      	bne.n	80048f6 <memcpy+0xe>
 8004902:	bd10      	pop	{r4, pc}

08004904 <_realloc_r>:
 8004904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4680      	mov	r8, r0
 800490a:	4615      	mov	r5, r2
 800490c:	460c      	mov	r4, r1
 800490e:	b921      	cbnz	r1, 800491a <_realloc_r+0x16>
 8004910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004914:	4611      	mov	r1, r2
 8004916:	f7ff bc4b 	b.w	80041b0 <_malloc_r>
 800491a:	b92a      	cbnz	r2, 8004928 <_realloc_r+0x24>
 800491c:	f7ff fbdc 	bl	80040d8 <_free_r>
 8004920:	2400      	movs	r4, #0
 8004922:	4620      	mov	r0, r4
 8004924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004928:	f000 f81a 	bl	8004960 <_malloc_usable_size_r>
 800492c:	4285      	cmp	r5, r0
 800492e:	4606      	mov	r6, r0
 8004930:	d802      	bhi.n	8004938 <_realloc_r+0x34>
 8004932:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004936:	d8f4      	bhi.n	8004922 <_realloc_r+0x1e>
 8004938:	4629      	mov	r1, r5
 800493a:	4640      	mov	r0, r8
 800493c:	f7ff fc38 	bl	80041b0 <_malloc_r>
 8004940:	4607      	mov	r7, r0
 8004942:	2800      	cmp	r0, #0
 8004944:	d0ec      	beq.n	8004920 <_realloc_r+0x1c>
 8004946:	42b5      	cmp	r5, r6
 8004948:	462a      	mov	r2, r5
 800494a:	4621      	mov	r1, r4
 800494c:	bf28      	it	cs
 800494e:	4632      	movcs	r2, r6
 8004950:	f7ff ffca 	bl	80048e8 <memcpy>
 8004954:	4621      	mov	r1, r4
 8004956:	4640      	mov	r0, r8
 8004958:	f7ff fbbe 	bl	80040d8 <_free_r>
 800495c:	463c      	mov	r4, r7
 800495e:	e7e0      	b.n	8004922 <_realloc_r+0x1e>

08004960 <_malloc_usable_size_r>:
 8004960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004964:	1f18      	subs	r0, r3, #4
 8004966:	2b00      	cmp	r3, #0
 8004968:	bfbc      	itt	lt
 800496a:	580b      	ldrlt	r3, [r1, r0]
 800496c:	18c0      	addlt	r0, r0, r3
 800496e:	4770      	bx	lr

08004970 <_init>:
 8004970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004972:	bf00      	nop
 8004974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004976:	bc08      	pop	{r3}
 8004978:	469e      	mov	lr, r3
 800497a:	4770      	bx	lr

0800497c <_fini>:
 800497c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497e:	bf00      	nop
 8004980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004982:	bc08      	pop	{r3}
 8004984:	469e      	mov	lr, r3
 8004986:	4770      	bx	lr
